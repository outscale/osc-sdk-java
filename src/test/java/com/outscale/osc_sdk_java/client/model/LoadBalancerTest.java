/*
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> You can learn more about errors returned by the API in the dedicated [errors page](api/errors).<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).
 *
 * The version of the OpenAPI document: 1.23
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.outscale.osc_sdk_java.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.outscale.osc_sdk_java.client.model.AccessLog;
import com.outscale.osc_sdk_java.client.model.ApplicationStickyCookiePolicy;
import com.outscale.osc_sdk_java.client.model.HealthCheck;
import com.outscale.osc_sdk_java.client.model.Listener;
import com.outscale.osc_sdk_java.client.model.LoadBalancerStickyCookiePolicy;
import com.outscale.osc_sdk_java.client.model.ResourceTag;
import com.outscale.osc_sdk_java.client.model.SourceSecurityGroup;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;


/**
 * Model tests for LoadBalancer
 */
public class LoadBalancerTest {
    private final LoadBalancer model = new LoadBalancer();

    /**
     * Model tests for LoadBalancer
     */
    @Test
    public void testLoadBalancer() {
        // TODO: test LoadBalancer
    }

    /**
     * Test the property 'accessLog'
     */
    @Test
    public void accessLogTest() {
        // TODO: test accessLog
    }

    /**
     * Test the property 'applicationStickyCookiePolicies'
     */
    @Test
    public void applicationStickyCookiePoliciesTest() {
        // TODO: test applicationStickyCookiePolicies
    }

    /**
     * Test the property 'backendIps'
     */
    @Test
    public void backendIpsTest() {
        // TODO: test backendIps
    }

    /**
     * Test the property 'backendVmIds'
     */
    @Test
    public void backendVmIdsTest() {
        // TODO: test backendVmIds
    }

    /**
     * Test the property 'dnsName'
     */
    @Test
    public void dnsNameTest() {
        // TODO: test dnsName
    }

    /**
     * Test the property 'healthCheck'
     */
    @Test
    public void healthCheckTest() {
        // TODO: test healthCheck
    }

    /**
     * Test the property 'listeners'
     */
    @Test
    public void listenersTest() {
        // TODO: test listeners
    }

    /**
     * Test the property 'loadBalancerName'
     */
    @Test
    public void loadBalancerNameTest() {
        // TODO: test loadBalancerName
    }

    /**
     * Test the property 'loadBalancerStickyCookiePolicies'
     */
    @Test
    public void loadBalancerStickyCookiePoliciesTest() {
        // TODO: test loadBalancerStickyCookiePolicies
    }

    /**
     * Test the property 'loadBalancerType'
     */
    @Test
    public void loadBalancerTypeTest() {
        // TODO: test loadBalancerType
    }

    /**
     * Test the property 'netId'
     */
    @Test
    public void netIdTest() {
        // TODO: test netId
    }

    /**
     * Test the property 'publicIp'
     */
    @Test
    public void publicIpTest() {
        // TODO: test publicIp
    }

    /**
     * Test the property 'securedCookies'
     */
    @Test
    public void securedCookiesTest() {
        // TODO: test securedCookies
    }

    /**
     * Test the property 'securityGroups'
     */
    @Test
    public void securityGroupsTest() {
        // TODO: test securityGroups
    }

    /**
     * Test the property 'sourceSecurityGroup'
     */
    @Test
    public void sourceSecurityGroupTest() {
        // TODO: test sourceSecurityGroup
    }

    /**
     * Test the property 'subnets'
     */
    @Test
    public void subnetsTest() {
        // TODO: test subnets
    }

    /**
     * Test the property 'subregionNames'
     */
    @Test
    public void subregionNamesTest() {
        // TODO: test subregionNames
    }

    /**
     * Test the property 'tags'
     */
    @Test
    public void tagsTest() {
        // TODO: test tags
    }

}
