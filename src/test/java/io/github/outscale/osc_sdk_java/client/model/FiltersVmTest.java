/*
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> Throttling: To protect against overloads, the number of identical requests allowed in a given time period is limited.<br /> Brute force: To protect against brute force attacks, the number of failed authentication attempts in a given time period is limited.<br /><br /> You can learn more about errors returned by the API in the dedicated [errors page](api/errors).<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).<br /> # Authentication Schemes ### Access Key/Secret Key The main way to authenticate your requests to the OUTSCALE API is to use an access key and a secret key.<br /> The mechanism behind this is based on AWS Signature Version 4, whose technical implementation details are described in [Signature of API Requests](https://docs.outscale.com/en/userguide/Signature-of-API-Requests.html).<br /><br /> In practice, the way to specify your access key and secret key depends on the tool or SDK you want to use to interact with the API.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify your access key, secret key, and the Region of your account. > 2. You then specify the `--profile` option when executing OSC CLI commands. >  > For more information, see [Installing and Configuring OSC CLI](https://docs.outscale.com/en/userguide/Installing-and-Configuring-OSC-CLI.html).  See the code samples in each section of this documentation for specific examples in different programming languages.<br /> For more information about access keys, see [About Access Keys](https://docs.outscale.com/en/userguide/About-Access-Keys.html). ### Login/Password For certain API actions, you can also use basic authentication with the login (email address) and password of your TINA account.<br /> This is useful only in special circumstances, for example if you do not know your access key/secret key and want to retrieve them programmatically.<br /> In most cases, however, you can use the Cockpit web interface to retrieve them.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify the Region of your account, but you leave the access key value and secret key value empty (`&quot;&quot;`). > 2. You then specify the `--profile`, `--authentication-method`, `--login`, and `--password` options when executing OSC CLI commands.  See the code samples in each section of this documentation for specific examples in different programming languages. ### No Authentication A few API actions do not require any authentication. They are indicated as such in this documentation.<br /> ### Other Security Mechanisms In parallel with the authentication schemes, you can add other security mechanisms to your OUTSCALE account, for example to restrict API requests by IP or other criteria.<br /> For more information, see [Managing Your API Accesses](https://docs.outscale.com/en/userguide/Managing-Your-API-Accesses.html).
 *
 * The version of the OpenAPI document: 1.28.5
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.github.outscale.osc_sdk_java.client.model;

import org.junit.jupiter.api.Test;

/** Model tests for FiltersVm */
public class FiltersVmTest {
    private final FiltersVm model = new FiltersVm();

    /** Model tests for FiltersVm */
    @Test
    public void testFiltersVm() {
        // TODO: test FiltersVm
    }

    /** Test the property 'architectures' */
    @Test
    public void architecturesTest() {
        // TODO: test architectures
    }

    /** Test the property 'blockDeviceMappingDeleteOnVmDeletion' */
    @Test
    public void blockDeviceMappingDeleteOnVmDeletionTest() {
        // TODO: test blockDeviceMappingDeleteOnVmDeletion
    }

    /** Test the property 'blockDeviceMappingDeviceNames' */
    @Test
    public void blockDeviceMappingDeviceNamesTest() {
        // TODO: test blockDeviceMappingDeviceNames
    }

    /** Test the property 'blockDeviceMappingLinkDates' */
    @Test
    public void blockDeviceMappingLinkDatesTest() {
        // TODO: test blockDeviceMappingLinkDates
    }

    /** Test the property 'blockDeviceMappingStates' */
    @Test
    public void blockDeviceMappingStatesTest() {
        // TODO: test blockDeviceMappingStates
    }

    /** Test the property 'blockDeviceMappingVolumeIds' */
    @Test
    public void blockDeviceMappingVolumeIdsTest() {
        // TODO: test blockDeviceMappingVolumeIds
    }

    /** Test the property 'clientTokens' */
    @Test
    public void clientTokensTest() {
        // TODO: test clientTokens
    }

    /** Test the property 'creationDates' */
    @Test
    public void creationDatesTest() {
        // TODO: test creationDates
    }

    /** Test the property 'imageIds' */
    @Test
    public void imageIdsTest() {
        // TODO: test imageIds
    }

    /** Test the property 'isSourceDestChecked' */
    @Test
    public void isSourceDestCheckedTest() {
        // TODO: test isSourceDestChecked
    }

    /** Test the property 'keypairNames' */
    @Test
    public void keypairNamesTest() {
        // TODO: test keypairNames
    }

    /** Test the property 'launchNumbers' */
    @Test
    public void launchNumbersTest() {
        // TODO: test launchNumbers
    }

    /** Test the property 'lifecycles' */
    @Test
    public void lifecyclesTest() {
        // TODO: test lifecycles
    }

    /** Test the property 'netIds' */
    @Test
    public void netIdsTest() {
        // TODO: test netIds
    }

    /** Test the property 'nicAccountIds' */
    @Test
    public void nicAccountIdsTest() {
        // TODO: test nicAccountIds
    }

    /** Test the property 'nicDescriptions' */
    @Test
    public void nicDescriptionsTest() {
        // TODO: test nicDescriptions
    }

    /** Test the property 'nicIsSourceDestChecked' */
    @Test
    public void nicIsSourceDestCheckedTest() {
        // TODO: test nicIsSourceDestChecked
    }

    /** Test the property 'nicLinkNicDeleteOnVmDeletion' */
    @Test
    public void nicLinkNicDeleteOnVmDeletionTest() {
        // TODO: test nicLinkNicDeleteOnVmDeletion
    }

    /** Test the property 'nicLinkNicDeviceNumbers' */
    @Test
    public void nicLinkNicDeviceNumbersTest() {
        // TODO: test nicLinkNicDeviceNumbers
    }

    /** Test the property 'nicLinkNicLinkNicDates' */
    @Test
    public void nicLinkNicLinkNicDatesTest() {
        // TODO: test nicLinkNicLinkNicDates
    }

    /** Test the property 'nicLinkNicLinkNicIds' */
    @Test
    public void nicLinkNicLinkNicIdsTest() {
        // TODO: test nicLinkNicLinkNicIds
    }

    /** Test the property 'nicLinkNicStates' */
    @Test
    public void nicLinkNicStatesTest() {
        // TODO: test nicLinkNicStates
    }

    /** Test the property 'nicLinkNicVmAccountIds' */
    @Test
    public void nicLinkNicVmAccountIdsTest() {
        // TODO: test nicLinkNicVmAccountIds
    }

    /** Test the property 'nicLinkNicVmIds' */
    @Test
    public void nicLinkNicVmIdsTest() {
        // TODO: test nicLinkNicVmIds
    }

    /** Test the property 'nicLinkPublicIpAccountIds' */
    @Test
    public void nicLinkPublicIpAccountIdsTest() {
        // TODO: test nicLinkPublicIpAccountIds
    }

    /** Test the property 'nicLinkPublicIpLinkPublicIpIds' */
    @Test
    public void nicLinkPublicIpLinkPublicIpIdsTest() {
        // TODO: test nicLinkPublicIpLinkPublicIpIds
    }

    /** Test the property 'nicLinkPublicIpPublicIpIds' */
    @Test
    public void nicLinkPublicIpPublicIpIdsTest() {
        // TODO: test nicLinkPublicIpPublicIpIds
    }

    /** Test the property 'nicLinkPublicIpPublicIps' */
    @Test
    public void nicLinkPublicIpPublicIpsTest() {
        // TODO: test nicLinkPublicIpPublicIps
    }

    /** Test the property 'nicMacAddresses' */
    @Test
    public void nicMacAddressesTest() {
        // TODO: test nicMacAddresses
    }

    /** Test the property 'nicNetIds' */
    @Test
    public void nicNetIdsTest() {
        // TODO: test nicNetIds
    }

    /** Test the property 'nicNicIds' */
    @Test
    public void nicNicIdsTest() {
        // TODO: test nicNicIds
    }

    /** Test the property 'nicPrivateIpsLinkPublicIpAccountIds' */
    @Test
    public void nicPrivateIpsLinkPublicIpAccountIdsTest() {
        // TODO: test nicPrivateIpsLinkPublicIpAccountIds
    }

    /** Test the property 'nicPrivateIpsLinkPublicIpIds' */
    @Test
    public void nicPrivateIpsLinkPublicIpIdsTest() {
        // TODO: test nicPrivateIpsLinkPublicIpIds
    }

    /** Test the property 'nicPrivateIpsPrimaryIp' */
    @Test
    public void nicPrivateIpsPrimaryIpTest() {
        // TODO: test nicPrivateIpsPrimaryIp
    }

    /** Test the property 'nicPrivateIpsPrivateIps' */
    @Test
    public void nicPrivateIpsPrivateIpsTest() {
        // TODO: test nicPrivateIpsPrivateIps
    }

    /** Test the property 'nicSecurityGroupIds' */
    @Test
    public void nicSecurityGroupIdsTest() {
        // TODO: test nicSecurityGroupIds
    }

    /** Test the property 'nicSecurityGroupNames' */
    @Test
    public void nicSecurityGroupNamesTest() {
        // TODO: test nicSecurityGroupNames
    }

    /** Test the property 'nicStates' */
    @Test
    public void nicStatesTest() {
        // TODO: test nicStates
    }

    /** Test the property 'nicSubnetIds' */
    @Test
    public void nicSubnetIdsTest() {
        // TODO: test nicSubnetIds
    }

    /** Test the property 'nicSubregionNames' */
    @Test
    public void nicSubregionNamesTest() {
        // TODO: test nicSubregionNames
    }

    /** Test the property 'platforms' */
    @Test
    public void platformsTest() {
        // TODO: test platforms
    }

    /** Test the property 'privateIps' */
    @Test
    public void privateIpsTest() {
        // TODO: test privateIps
    }

    /** Test the property 'productCodes' */
    @Test
    public void productCodesTest() {
        // TODO: test productCodes
    }

    /** Test the property 'publicIps' */
    @Test
    public void publicIpsTest() {
        // TODO: test publicIps
    }

    /** Test the property 'reservationIds' */
    @Test
    public void reservationIdsTest() {
        // TODO: test reservationIds
    }

    /** Test the property 'rootDeviceNames' */
    @Test
    public void rootDeviceNamesTest() {
        // TODO: test rootDeviceNames
    }

    /** Test the property 'rootDeviceTypes' */
    @Test
    public void rootDeviceTypesTest() {
        // TODO: test rootDeviceTypes
    }

    /** Test the property 'securityGroupIds' */
    @Test
    public void securityGroupIdsTest() {
        // TODO: test securityGroupIds
    }

    /** Test the property 'securityGroupNames' */
    @Test
    public void securityGroupNamesTest() {
        // TODO: test securityGroupNames
    }

    /** Test the property 'stateReasonCodes' */
    @Test
    public void stateReasonCodesTest() {
        // TODO: test stateReasonCodes
    }

    /** Test the property 'stateReasonMessages' */
    @Test
    public void stateReasonMessagesTest() {
        // TODO: test stateReasonMessages
    }

    /** Test the property 'stateReasons' */
    @Test
    public void stateReasonsTest() {
        // TODO: test stateReasons
    }

    /** Test the property 'subnetIds' */
    @Test
    public void subnetIdsTest() {
        // TODO: test subnetIds
    }

    /** Test the property 'subregionNames' */
    @Test
    public void subregionNamesTest() {
        // TODO: test subregionNames
    }

    /** Test the property 'tagKeys' */
    @Test
    public void tagKeysTest() {
        // TODO: test tagKeys
    }

    /** Test the property 'tagValues' */
    @Test
    public void tagValuesTest() {
        // TODO: test tagValues
    }

    /** Test the property 'tags' */
    @Test
    public void tagsTest() {
        // TODO: test tags
    }

    /** Test the property 'tenancies' */
    @Test
    public void tenanciesTest() {
        // TODO: test tenancies
    }

    /** Test the property 'vmIds' */
    @Test
    public void vmIdsTest() {
        // TODO: test vmIds
    }

    /** Test the property 'vmSecurityGroupIds' */
    @Test
    public void vmSecurityGroupIdsTest() {
        // TODO: test vmSecurityGroupIds
    }

    /** Test the property 'vmSecurityGroupNames' */
    @Test
    public void vmSecurityGroupNamesTest() {
        // TODO: test vmSecurityGroupNames
    }

    /** Test the property 'vmStateCodes' */
    @Test
    public void vmStateCodesTest() {
        // TODO: test vmStateCodes
    }

    /** Test the property 'vmStateNames' */
    @Test
    public void vmStateNamesTest() {
        // TODO: test vmStateNames
    }

    /** Test the property 'vmTypes' */
    @Test
    public void vmTypesTest() {
        // TODO: test vmTypes
    }
}
