/*
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> Throttling: To protect against overloads, the number of identical requests allowed in a given time period is limited.<br /> Brute force: To protect against brute force attacks, the number of failed authentication attempts in a given time period is limited.<br /><br /> You can learn more about errors returned by the API in the dedicated [errors page](api/errors).<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).<br /> # Authentication Schemes ### Access Key/Secret Key The main way to authenticate your requests to the OUTSCALE API is to use an access key and a secret key.<br /> The mechanism behind this is based on AWS Signature Version 4, whose technical implementation details are described in [Signature of API Requests](https://docs.outscale.com/en/userguide/Signature-of-API-Requests.html).<br /><br /> In practice, the way to specify your access key and secret key depends on the tool or SDK you want to use to interact with the API.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify your access key, secret key, and the Region of your account. > 2. You then specify the `--profile` option when executing OSC CLI commands. >  > For more information, see [Installing and Configuring OSC CLI](https://docs.outscale.com/en/userguide/Installing-and-Configuring-OSC-CLI.html).  See the code samples in each section of this documentation for specific examples in different programming languages.<br /> For more information about access keys, see [About Access Keys](https://docs.outscale.com/en/userguide/About-Access-Keys.html). ### Login/Password For certain API actions, you can also use basic authentication with the login (email address) and password of your TINA account.<br /> This is useful only in special circumstances, for example if you do not know your access key/secret key and want to retrieve them programmatically.<br /> In most cases, however, you can use the Cockpit web interface to retrieve them.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify the Region of your account, but you leave the access key value and secret key value empty (`&quot;&quot;`). > 2. You then specify the `--profile`, `--authentication-method`, `--login`, and `--password` options when executing OSC CLI commands.  See the code samples in each section of this documentation for specific examples in different programming languages. ### No Authentication A few API actions do not require any authentication. They are indicated as such in this documentation.<br /> ### Other Security Mechanisms In parallel with the authentication schemes, you can add other security mechanisms to your OUTSCALE account, for example to restrict API requests by IP or other criteria.<br /> For more information, see [Managing Your API Accesses](https://docs.outscale.com/en/userguide/Managing-Your-API-Accesses.html).
 *
 * The version of the OpenAPI document: 1.28.7
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.github.outscale.osc_sdk_java.client.api;

import io.github.outscale.osc_sdk_java.client.ApiException;
import io.github.outscale.osc_sdk_java.client.model.CreateLoadBalancerRequest;
import io.github.outscale.osc_sdk_java.client.model.CreateLoadBalancerResponse;
import io.github.outscale.osc_sdk_java.client.model.CreateLoadBalancerTagsRequest;
import io.github.outscale.osc_sdk_java.client.model.CreateLoadBalancerTagsResponse;
import io.github.outscale.osc_sdk_java.client.model.DeleteLoadBalancerRequest;
import io.github.outscale.osc_sdk_java.client.model.DeleteLoadBalancerResponse;
import io.github.outscale.osc_sdk_java.client.model.DeleteLoadBalancerTagsRequest;
import io.github.outscale.osc_sdk_java.client.model.DeleteLoadBalancerTagsResponse;
import io.github.outscale.osc_sdk_java.client.model.DeregisterVmsInLoadBalancerRequest;
import io.github.outscale.osc_sdk_java.client.model.DeregisterVmsInLoadBalancerResponse;
import io.github.outscale.osc_sdk_java.client.model.LinkLoadBalancerBackendMachinesRequest;
import io.github.outscale.osc_sdk_java.client.model.LinkLoadBalancerBackendMachinesResponse;
import io.github.outscale.osc_sdk_java.client.model.ReadLoadBalancerTagsRequest;
import io.github.outscale.osc_sdk_java.client.model.ReadLoadBalancerTagsResponse;
import io.github.outscale.osc_sdk_java.client.model.ReadLoadBalancersRequest;
import io.github.outscale.osc_sdk_java.client.model.ReadLoadBalancersResponse;
import io.github.outscale.osc_sdk_java.client.model.ReadVmsHealthRequest;
import io.github.outscale.osc_sdk_java.client.model.ReadVmsHealthResponse;
import io.github.outscale.osc_sdk_java.client.model.RegisterVmsInLoadBalancerRequest;
import io.github.outscale.osc_sdk_java.client.model.RegisterVmsInLoadBalancerResponse;
import io.github.outscale.osc_sdk_java.client.model.UnlinkLoadBalancerBackendMachinesRequest;
import io.github.outscale.osc_sdk_java.client.model.UnlinkLoadBalancerBackendMachinesResponse;
import io.github.outscale.osc_sdk_java.client.model.UpdateLoadBalancerRequest;
import io.github.outscale.osc_sdk_java.client.model.UpdateLoadBalancerResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/** API tests for LoadBalancerApi */
@Disabled
public class LoadBalancerApiTest {

    private final LoadBalancerApi api = new LoadBalancerApi();

    /** @throws ApiException if the Api call fails */
    @Test
    public void createLoadBalancerTest() throws ApiException {
        CreateLoadBalancerRequest createLoadBalancerRequest = null;
        CreateLoadBalancerResponse response = api.createLoadBalancer(createLoadBalancerRequest);
        // TODO: test validations
    }

    /** @throws ApiException if the Api call fails */
    @Test
    public void createLoadBalancerTagsTest() throws ApiException {
        CreateLoadBalancerTagsRequest createLoadBalancerTagsRequest = null;
        CreateLoadBalancerTagsResponse response =
                api.createLoadBalancerTags(createLoadBalancerTagsRequest);
        // TODO: test validations
    }

    /** @throws ApiException if the Api call fails */
    @Test
    public void deleteLoadBalancerTest() throws ApiException {
        DeleteLoadBalancerRequest deleteLoadBalancerRequest = null;
        DeleteLoadBalancerResponse response = api.deleteLoadBalancer(deleteLoadBalancerRequest);
        // TODO: test validations
    }

    /** @throws ApiException if the Api call fails */
    @Test
    public void deleteLoadBalancerTagsTest() throws ApiException {
        DeleteLoadBalancerTagsRequest deleteLoadBalancerTagsRequest = null;
        DeleteLoadBalancerTagsResponse response =
                api.deleteLoadBalancerTags(deleteLoadBalancerTagsRequest);
        // TODO: test validations
    }

    /** @throws ApiException if the Api call fails */
    @Test
    public void deregisterVmsInLoadBalancerTest() throws ApiException {
        DeregisterVmsInLoadBalancerRequest deregisterVmsInLoadBalancerRequest = null;
        DeregisterVmsInLoadBalancerResponse response =
                api.deregisterVmsInLoadBalancer(deregisterVmsInLoadBalancerRequest);
        // TODO: test validations
    }

    /** @throws ApiException if the Api call fails */
    @Test
    public void linkLoadBalancerBackendMachinesTest() throws ApiException {
        LinkLoadBalancerBackendMachinesRequest linkLoadBalancerBackendMachinesRequest = null;
        LinkLoadBalancerBackendMachinesResponse response =
                api.linkLoadBalancerBackendMachines(linkLoadBalancerBackendMachinesRequest);
        // TODO: test validations
    }

    /** @throws ApiException if the Api call fails */
    @Test
    public void readLoadBalancerTagsTest() throws ApiException {
        ReadLoadBalancerTagsRequest readLoadBalancerTagsRequest = null;
        ReadLoadBalancerTagsResponse response =
                api.readLoadBalancerTags(readLoadBalancerTagsRequest);
        // TODO: test validations
    }

    /** @throws ApiException if the Api call fails */
    @Test
    public void readLoadBalancersTest() throws ApiException {
        ReadLoadBalancersRequest readLoadBalancersRequest = null;
        ReadLoadBalancersResponse response = api.readLoadBalancers(readLoadBalancersRequest);
        // TODO: test validations
    }

    /** @throws ApiException if the Api call fails */
    @Test
    public void readVmsHealthTest() throws ApiException {
        ReadVmsHealthRequest readVmsHealthRequest = null;
        ReadVmsHealthResponse response = api.readVmsHealth(readVmsHealthRequest);
        // TODO: test validations
    }

    /** @throws ApiException if the Api call fails */
    @Test
    public void registerVmsInLoadBalancerTest() throws ApiException {
        RegisterVmsInLoadBalancerRequest registerVmsInLoadBalancerRequest = null;
        RegisterVmsInLoadBalancerResponse response =
                api.registerVmsInLoadBalancer(registerVmsInLoadBalancerRequest);
        // TODO: test validations
    }

    /** @throws ApiException if the Api call fails */
    @Test
    public void unlinkLoadBalancerBackendMachinesTest() throws ApiException {
        UnlinkLoadBalancerBackendMachinesRequest unlinkLoadBalancerBackendMachinesRequest = null;
        UnlinkLoadBalancerBackendMachinesResponse response =
                api.unlinkLoadBalancerBackendMachines(unlinkLoadBalancerBackendMachinesRequest);
        // TODO: test validations
    }

    /** @throws ApiException if the Api call fails */
    @Test
    public void updateLoadBalancerTest() throws ApiException {
        UpdateLoadBalancerRequest updateLoadBalancerRequest = null;
        UpdateLoadBalancerResponse response = api.updateLoadBalancer(updateLoadBalancerRequest);
        // TODO: test validations
    }
}
