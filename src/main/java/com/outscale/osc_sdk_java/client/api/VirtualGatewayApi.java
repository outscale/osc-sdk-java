/*
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> You can learn more about errors returned by the API in the dedicated [errors page](api/errors).<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).
 *
 * The version of the OpenAPI document: 1.23
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.outscale.osc_sdk_java.client.api;

import com.outscale.osc_sdk_java.client.ApiCallback;
import com.outscale.osc_sdk_java.client.ApiClient;
import com.outscale.osc_sdk_java.client.ApiException;
import com.outscale.osc_sdk_java.client.ApiResponse;
import com.outscale.osc_sdk_java.client.Configuration;
import com.outscale.osc_sdk_java.client.Pair;
import com.outscale.osc_sdk_java.client.ProgressRequestBody;
import com.outscale.osc_sdk_java.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.outscale.osc_sdk_java.client.model.CreateVirtualGatewayRequest;
import com.outscale.osc_sdk_java.client.model.CreateVirtualGatewayResponse;
import com.outscale.osc_sdk_java.client.model.DeleteVirtualGatewayRequest;
import com.outscale.osc_sdk_java.client.model.DeleteVirtualGatewayResponse;
import com.outscale.osc_sdk_java.client.model.LinkVirtualGatewayRequest;
import com.outscale.osc_sdk_java.client.model.LinkVirtualGatewayResponse;
import com.outscale.osc_sdk_java.client.model.ReadVirtualGatewaysRequest;
import com.outscale.osc_sdk_java.client.model.ReadVirtualGatewaysResponse;
import com.outscale.osc_sdk_java.client.model.UnlinkVirtualGatewayRequest;
import com.outscale.osc_sdk_java.client.model.UnlinkVirtualGatewayResponse;
import com.outscale.osc_sdk_java.client.model.UpdateRoutePropagationRequest;
import com.outscale.osc_sdk_java.client.model.UpdateRoutePropagationResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class VirtualGatewayApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VirtualGatewayApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VirtualGatewayApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createVirtualGateway
     * @param createVirtualGatewayRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVirtualGatewayCall(CreateVirtualGatewayRequest createVirtualGatewayRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createVirtualGatewayRequest;

        // create path and map variables
        String localVarPath = "/CreateVirtualGateway";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AWS4Auth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVirtualGatewayValidateBeforeCall(CreateVirtualGatewayRequest createVirtualGatewayRequest, final ApiCallback _callback) throws ApiException {
        return createVirtualGatewayCall(createVirtualGatewayRequest, _callback);

    }

    /**
     * 
     * 
     * @param createVirtualGatewayRequest  (optional)
     * @return CreateVirtualGatewayResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public CreateVirtualGatewayResponse createVirtualGateway(CreateVirtualGatewayRequest createVirtualGatewayRequest) throws ApiException {
        ApiResponse<CreateVirtualGatewayResponse> localVarResp = createVirtualGatewayWithHttpInfo(createVirtualGatewayRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createVirtualGatewayRequest  (optional)
     * @return ApiResponse&lt;CreateVirtualGatewayResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateVirtualGatewayResponse> createVirtualGatewayWithHttpInfo(CreateVirtualGatewayRequest createVirtualGatewayRequest) throws ApiException {
        okhttp3.Call localVarCall = createVirtualGatewayValidateBeforeCall(createVirtualGatewayRequest, null);
        Type localVarReturnType = new TypeToken<CreateVirtualGatewayResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createVirtualGatewayRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVirtualGatewayAsync(CreateVirtualGatewayRequest createVirtualGatewayRequest, final ApiCallback<CreateVirtualGatewayResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVirtualGatewayValidateBeforeCall(createVirtualGatewayRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateVirtualGatewayResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteVirtualGateway
     * @param deleteVirtualGatewayRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVirtualGatewayCall(DeleteVirtualGatewayRequest deleteVirtualGatewayRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteVirtualGatewayRequest;

        // create path and map variables
        String localVarPath = "/DeleteVirtualGateway";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AWS4Auth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVirtualGatewayValidateBeforeCall(DeleteVirtualGatewayRequest deleteVirtualGatewayRequest, final ApiCallback _callback) throws ApiException {
        return deleteVirtualGatewayCall(deleteVirtualGatewayRequest, _callback);

    }

    /**
     * 
     * 
     * @param deleteVirtualGatewayRequest  (optional)
     * @return DeleteVirtualGatewayResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public DeleteVirtualGatewayResponse deleteVirtualGateway(DeleteVirtualGatewayRequest deleteVirtualGatewayRequest) throws ApiException {
        ApiResponse<DeleteVirtualGatewayResponse> localVarResp = deleteVirtualGatewayWithHttpInfo(deleteVirtualGatewayRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param deleteVirtualGatewayRequest  (optional)
     * @return ApiResponse&lt;DeleteVirtualGatewayResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteVirtualGatewayResponse> deleteVirtualGatewayWithHttpInfo(DeleteVirtualGatewayRequest deleteVirtualGatewayRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteVirtualGatewayValidateBeforeCall(deleteVirtualGatewayRequest, null);
        Type localVarReturnType = new TypeToken<DeleteVirtualGatewayResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param deleteVirtualGatewayRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVirtualGatewayAsync(DeleteVirtualGatewayRequest deleteVirtualGatewayRequest, final ApiCallback<DeleteVirtualGatewayResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVirtualGatewayValidateBeforeCall(deleteVirtualGatewayRequest, _callback);
        Type localVarReturnType = new TypeToken<DeleteVirtualGatewayResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for linkVirtualGateway
     * @param linkVirtualGatewayRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call linkVirtualGatewayCall(LinkVirtualGatewayRequest linkVirtualGatewayRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = linkVirtualGatewayRequest;

        // create path and map variables
        String localVarPath = "/LinkVirtualGateway";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AWS4Auth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call linkVirtualGatewayValidateBeforeCall(LinkVirtualGatewayRequest linkVirtualGatewayRequest, final ApiCallback _callback) throws ApiException {
        return linkVirtualGatewayCall(linkVirtualGatewayRequest, _callback);

    }

    /**
     * 
     * 
     * @param linkVirtualGatewayRequest  (optional)
     * @return LinkVirtualGatewayResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public LinkVirtualGatewayResponse linkVirtualGateway(LinkVirtualGatewayRequest linkVirtualGatewayRequest) throws ApiException {
        ApiResponse<LinkVirtualGatewayResponse> localVarResp = linkVirtualGatewayWithHttpInfo(linkVirtualGatewayRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param linkVirtualGatewayRequest  (optional)
     * @return ApiResponse&lt;LinkVirtualGatewayResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LinkVirtualGatewayResponse> linkVirtualGatewayWithHttpInfo(LinkVirtualGatewayRequest linkVirtualGatewayRequest) throws ApiException {
        okhttp3.Call localVarCall = linkVirtualGatewayValidateBeforeCall(linkVirtualGatewayRequest, null);
        Type localVarReturnType = new TypeToken<LinkVirtualGatewayResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param linkVirtualGatewayRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call linkVirtualGatewayAsync(LinkVirtualGatewayRequest linkVirtualGatewayRequest, final ApiCallback<LinkVirtualGatewayResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = linkVirtualGatewayValidateBeforeCall(linkVirtualGatewayRequest, _callback);
        Type localVarReturnType = new TypeToken<LinkVirtualGatewayResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for readVirtualGateways
     * @param readVirtualGatewaysRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readVirtualGatewaysCall(ReadVirtualGatewaysRequest readVirtualGatewaysRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = readVirtualGatewaysRequest;

        // create path and map variables
        String localVarPath = "/ReadVirtualGateways";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AWS4Auth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call readVirtualGatewaysValidateBeforeCall(ReadVirtualGatewaysRequest readVirtualGatewaysRequest, final ApiCallback _callback) throws ApiException {
        return readVirtualGatewaysCall(readVirtualGatewaysRequest, _callback);

    }

    /**
     * 
     * 
     * @param readVirtualGatewaysRequest  (optional)
     * @return ReadVirtualGatewaysResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public ReadVirtualGatewaysResponse readVirtualGateways(ReadVirtualGatewaysRequest readVirtualGatewaysRequest) throws ApiException {
        ApiResponse<ReadVirtualGatewaysResponse> localVarResp = readVirtualGatewaysWithHttpInfo(readVirtualGatewaysRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param readVirtualGatewaysRequest  (optional)
     * @return ApiResponse&lt;ReadVirtualGatewaysResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReadVirtualGatewaysResponse> readVirtualGatewaysWithHttpInfo(ReadVirtualGatewaysRequest readVirtualGatewaysRequest) throws ApiException {
        okhttp3.Call localVarCall = readVirtualGatewaysValidateBeforeCall(readVirtualGatewaysRequest, null);
        Type localVarReturnType = new TypeToken<ReadVirtualGatewaysResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param readVirtualGatewaysRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readVirtualGatewaysAsync(ReadVirtualGatewaysRequest readVirtualGatewaysRequest, final ApiCallback<ReadVirtualGatewaysResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = readVirtualGatewaysValidateBeforeCall(readVirtualGatewaysRequest, _callback);
        Type localVarReturnType = new TypeToken<ReadVirtualGatewaysResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unlinkVirtualGateway
     * @param unlinkVirtualGatewayRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unlinkVirtualGatewayCall(UnlinkVirtualGatewayRequest unlinkVirtualGatewayRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = unlinkVirtualGatewayRequest;

        // create path and map variables
        String localVarPath = "/UnlinkVirtualGateway";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AWS4Auth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unlinkVirtualGatewayValidateBeforeCall(UnlinkVirtualGatewayRequest unlinkVirtualGatewayRequest, final ApiCallback _callback) throws ApiException {
        return unlinkVirtualGatewayCall(unlinkVirtualGatewayRequest, _callback);

    }

    /**
     * 
     * 
     * @param unlinkVirtualGatewayRequest  (optional)
     * @return UnlinkVirtualGatewayResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public UnlinkVirtualGatewayResponse unlinkVirtualGateway(UnlinkVirtualGatewayRequest unlinkVirtualGatewayRequest) throws ApiException {
        ApiResponse<UnlinkVirtualGatewayResponse> localVarResp = unlinkVirtualGatewayWithHttpInfo(unlinkVirtualGatewayRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param unlinkVirtualGatewayRequest  (optional)
     * @return ApiResponse&lt;UnlinkVirtualGatewayResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UnlinkVirtualGatewayResponse> unlinkVirtualGatewayWithHttpInfo(UnlinkVirtualGatewayRequest unlinkVirtualGatewayRequest) throws ApiException {
        okhttp3.Call localVarCall = unlinkVirtualGatewayValidateBeforeCall(unlinkVirtualGatewayRequest, null);
        Type localVarReturnType = new TypeToken<UnlinkVirtualGatewayResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param unlinkVirtualGatewayRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unlinkVirtualGatewayAsync(UnlinkVirtualGatewayRequest unlinkVirtualGatewayRequest, final ApiCallback<UnlinkVirtualGatewayResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = unlinkVirtualGatewayValidateBeforeCall(unlinkVirtualGatewayRequest, _callback);
        Type localVarReturnType = new TypeToken<UnlinkVirtualGatewayResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRoutePropagation
     * @param updateRoutePropagationRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRoutePropagationCall(UpdateRoutePropagationRequest updateRoutePropagationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRoutePropagationRequest;

        // create path and map variables
        String localVarPath = "/UpdateRoutePropagation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AWS4Auth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRoutePropagationValidateBeforeCall(UpdateRoutePropagationRequest updateRoutePropagationRequest, final ApiCallback _callback) throws ApiException {
        return updateRoutePropagationCall(updateRoutePropagationRequest, _callback);

    }

    /**
     * 
     * 
     * @param updateRoutePropagationRequest  (optional)
     * @return UpdateRoutePropagationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRoutePropagationResponse updateRoutePropagation(UpdateRoutePropagationRequest updateRoutePropagationRequest) throws ApiException {
        ApiResponse<UpdateRoutePropagationResponse> localVarResp = updateRoutePropagationWithHttpInfo(updateRoutePropagationRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateRoutePropagationRequest  (optional)
     * @return ApiResponse&lt;UpdateRoutePropagationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateRoutePropagationResponse> updateRoutePropagationWithHttpInfo(UpdateRoutePropagationRequest updateRoutePropagationRequest) throws ApiException {
        okhttp3.Call localVarCall = updateRoutePropagationValidateBeforeCall(updateRoutePropagationRequest, null);
        Type localVarReturnType = new TypeToken<UpdateRoutePropagationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateRoutePropagationRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRoutePropagationAsync(UpdateRoutePropagationRequest updateRoutePropagationRequest, final ApiCallback<UpdateRoutePropagationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRoutePropagationValidateBeforeCall(updateRoutePropagationRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateRoutePropagationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
