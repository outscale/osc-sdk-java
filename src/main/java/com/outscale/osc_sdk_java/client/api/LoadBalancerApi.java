/*
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> You can learn more about errors returned by the API in the dedicated [errors page](api/errors).<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).
 *
 * The version of the OpenAPI document: 1.23
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.outscale.osc_sdk_java.client.api;

import com.outscale.osc_sdk_java.client.ApiCallback;
import com.outscale.osc_sdk_java.client.ApiClient;
import com.outscale.osc_sdk_java.client.ApiException;
import com.outscale.osc_sdk_java.client.ApiResponse;
import com.outscale.osc_sdk_java.client.Configuration;
import com.outscale.osc_sdk_java.client.Pair;
import com.outscale.osc_sdk_java.client.ProgressRequestBody;
import com.outscale.osc_sdk_java.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.outscale.osc_sdk_java.client.model.CreateLoadBalancerRequest;
import com.outscale.osc_sdk_java.client.model.CreateLoadBalancerResponse;
import com.outscale.osc_sdk_java.client.model.CreateLoadBalancerTagsRequest;
import com.outscale.osc_sdk_java.client.model.CreateLoadBalancerTagsResponse;
import com.outscale.osc_sdk_java.client.model.DeleteLoadBalancerRequest;
import com.outscale.osc_sdk_java.client.model.DeleteLoadBalancerResponse;
import com.outscale.osc_sdk_java.client.model.DeleteLoadBalancerTagsRequest;
import com.outscale.osc_sdk_java.client.model.DeleteLoadBalancerTagsResponse;
import com.outscale.osc_sdk_java.client.model.DeregisterVmsInLoadBalancerRequest;
import com.outscale.osc_sdk_java.client.model.DeregisterVmsInLoadBalancerResponse;
import com.outscale.osc_sdk_java.client.model.LinkLoadBalancerBackendMachinesRequest;
import com.outscale.osc_sdk_java.client.model.LinkLoadBalancerBackendMachinesResponse;
import com.outscale.osc_sdk_java.client.model.ReadLoadBalancerTagsRequest;
import com.outscale.osc_sdk_java.client.model.ReadLoadBalancerTagsResponse;
import com.outscale.osc_sdk_java.client.model.ReadLoadBalancersRequest;
import com.outscale.osc_sdk_java.client.model.ReadLoadBalancersResponse;
import com.outscale.osc_sdk_java.client.model.ReadVmsHealthRequest;
import com.outscale.osc_sdk_java.client.model.ReadVmsHealthResponse;
import com.outscale.osc_sdk_java.client.model.RegisterVmsInLoadBalancerRequest;
import com.outscale.osc_sdk_java.client.model.RegisterVmsInLoadBalancerResponse;
import com.outscale.osc_sdk_java.client.model.UnlinkLoadBalancerBackendMachinesRequest;
import com.outscale.osc_sdk_java.client.model.UnlinkLoadBalancerBackendMachinesResponse;
import com.outscale.osc_sdk_java.client.model.UpdateLoadBalancerRequest;
import com.outscale.osc_sdk_java.client.model.UpdateLoadBalancerResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LoadBalancerApi {
    private ApiClient localVarApiClient;

    public LoadBalancerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LoadBalancerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createLoadBalancer
     * @param createLoadBalancerRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLoadBalancerCall(CreateLoadBalancerRequest createLoadBalancerRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createLoadBalancerRequest;

        // create path and map variables
        String localVarPath = "/CreateLoadBalancer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createLoadBalancerValidateBeforeCall(CreateLoadBalancerRequest createLoadBalancerRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = createLoadBalancerCall(createLoadBalancerRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param createLoadBalancerRequest  (optional)
     * @return CreateLoadBalancerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public CreateLoadBalancerResponse createLoadBalancer(CreateLoadBalancerRequest createLoadBalancerRequest) throws ApiException {
        ApiResponse<CreateLoadBalancerResponse> localVarResp = createLoadBalancerWithHttpInfo(createLoadBalancerRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createLoadBalancerRequest  (optional)
     * @return ApiResponse&lt;CreateLoadBalancerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateLoadBalancerResponse> createLoadBalancerWithHttpInfo(CreateLoadBalancerRequest createLoadBalancerRequest) throws ApiException {
        okhttp3.Call localVarCall = createLoadBalancerValidateBeforeCall(createLoadBalancerRequest, null);
        Type localVarReturnType = new TypeToken<CreateLoadBalancerResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createLoadBalancerRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLoadBalancerAsync(CreateLoadBalancerRequest createLoadBalancerRequest, final ApiCallback<CreateLoadBalancerResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createLoadBalancerValidateBeforeCall(createLoadBalancerRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateLoadBalancerResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createLoadBalancerTags
     * @param createLoadBalancerTagsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLoadBalancerTagsCall(CreateLoadBalancerTagsRequest createLoadBalancerTagsRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createLoadBalancerTagsRequest;

        // create path and map variables
        String localVarPath = "/CreateLoadBalancerTags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createLoadBalancerTagsValidateBeforeCall(CreateLoadBalancerTagsRequest createLoadBalancerTagsRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = createLoadBalancerTagsCall(createLoadBalancerTagsRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param createLoadBalancerTagsRequest  (optional)
     * @return CreateLoadBalancerTagsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public CreateLoadBalancerTagsResponse createLoadBalancerTags(CreateLoadBalancerTagsRequest createLoadBalancerTagsRequest) throws ApiException {
        ApiResponse<CreateLoadBalancerTagsResponse> localVarResp = createLoadBalancerTagsWithHttpInfo(createLoadBalancerTagsRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createLoadBalancerTagsRequest  (optional)
     * @return ApiResponse&lt;CreateLoadBalancerTagsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateLoadBalancerTagsResponse> createLoadBalancerTagsWithHttpInfo(CreateLoadBalancerTagsRequest createLoadBalancerTagsRequest) throws ApiException {
        okhttp3.Call localVarCall = createLoadBalancerTagsValidateBeforeCall(createLoadBalancerTagsRequest, null);
        Type localVarReturnType = new TypeToken<CreateLoadBalancerTagsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createLoadBalancerTagsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLoadBalancerTagsAsync(CreateLoadBalancerTagsRequest createLoadBalancerTagsRequest, final ApiCallback<CreateLoadBalancerTagsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createLoadBalancerTagsValidateBeforeCall(createLoadBalancerTagsRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateLoadBalancerTagsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteLoadBalancer
     * @param deleteLoadBalancerRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLoadBalancerCall(DeleteLoadBalancerRequest deleteLoadBalancerRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = deleteLoadBalancerRequest;

        // create path and map variables
        String localVarPath = "/DeleteLoadBalancer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteLoadBalancerValidateBeforeCall(DeleteLoadBalancerRequest deleteLoadBalancerRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = deleteLoadBalancerCall(deleteLoadBalancerRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param deleteLoadBalancerRequest  (optional)
     * @return DeleteLoadBalancerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public DeleteLoadBalancerResponse deleteLoadBalancer(DeleteLoadBalancerRequest deleteLoadBalancerRequest) throws ApiException {
        ApiResponse<DeleteLoadBalancerResponse> localVarResp = deleteLoadBalancerWithHttpInfo(deleteLoadBalancerRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param deleteLoadBalancerRequest  (optional)
     * @return ApiResponse&lt;DeleteLoadBalancerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteLoadBalancerResponse> deleteLoadBalancerWithHttpInfo(DeleteLoadBalancerRequest deleteLoadBalancerRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteLoadBalancerValidateBeforeCall(deleteLoadBalancerRequest, null);
        Type localVarReturnType = new TypeToken<DeleteLoadBalancerResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param deleteLoadBalancerRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLoadBalancerAsync(DeleteLoadBalancerRequest deleteLoadBalancerRequest, final ApiCallback<DeleteLoadBalancerResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteLoadBalancerValidateBeforeCall(deleteLoadBalancerRequest, _callback);
        Type localVarReturnType = new TypeToken<DeleteLoadBalancerResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteLoadBalancerTags
     * @param deleteLoadBalancerTagsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLoadBalancerTagsCall(DeleteLoadBalancerTagsRequest deleteLoadBalancerTagsRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = deleteLoadBalancerTagsRequest;

        // create path and map variables
        String localVarPath = "/DeleteLoadBalancerTags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteLoadBalancerTagsValidateBeforeCall(DeleteLoadBalancerTagsRequest deleteLoadBalancerTagsRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = deleteLoadBalancerTagsCall(deleteLoadBalancerTagsRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param deleteLoadBalancerTagsRequest  (optional)
     * @return DeleteLoadBalancerTagsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public DeleteLoadBalancerTagsResponse deleteLoadBalancerTags(DeleteLoadBalancerTagsRequest deleteLoadBalancerTagsRequest) throws ApiException {
        ApiResponse<DeleteLoadBalancerTagsResponse> localVarResp = deleteLoadBalancerTagsWithHttpInfo(deleteLoadBalancerTagsRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param deleteLoadBalancerTagsRequest  (optional)
     * @return ApiResponse&lt;DeleteLoadBalancerTagsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteLoadBalancerTagsResponse> deleteLoadBalancerTagsWithHttpInfo(DeleteLoadBalancerTagsRequest deleteLoadBalancerTagsRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteLoadBalancerTagsValidateBeforeCall(deleteLoadBalancerTagsRequest, null);
        Type localVarReturnType = new TypeToken<DeleteLoadBalancerTagsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param deleteLoadBalancerTagsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLoadBalancerTagsAsync(DeleteLoadBalancerTagsRequest deleteLoadBalancerTagsRequest, final ApiCallback<DeleteLoadBalancerTagsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteLoadBalancerTagsValidateBeforeCall(deleteLoadBalancerTagsRequest, _callback);
        Type localVarReturnType = new TypeToken<DeleteLoadBalancerTagsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deregisterVmsInLoadBalancer
     * @param deregisterVmsInLoadBalancerRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deregisterVmsInLoadBalancerCall(DeregisterVmsInLoadBalancerRequest deregisterVmsInLoadBalancerRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = deregisterVmsInLoadBalancerRequest;

        // create path and map variables
        String localVarPath = "/DeregisterVmsInLoadBalancer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deregisterVmsInLoadBalancerValidateBeforeCall(DeregisterVmsInLoadBalancerRequest deregisterVmsInLoadBalancerRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = deregisterVmsInLoadBalancerCall(deregisterVmsInLoadBalancerRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param deregisterVmsInLoadBalancerRequest  (optional)
     * @return DeregisterVmsInLoadBalancerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public DeregisterVmsInLoadBalancerResponse deregisterVmsInLoadBalancer(DeregisterVmsInLoadBalancerRequest deregisterVmsInLoadBalancerRequest) throws ApiException {
        ApiResponse<DeregisterVmsInLoadBalancerResponse> localVarResp = deregisterVmsInLoadBalancerWithHttpInfo(deregisterVmsInLoadBalancerRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param deregisterVmsInLoadBalancerRequest  (optional)
     * @return ApiResponse&lt;DeregisterVmsInLoadBalancerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeregisterVmsInLoadBalancerResponse> deregisterVmsInLoadBalancerWithHttpInfo(DeregisterVmsInLoadBalancerRequest deregisterVmsInLoadBalancerRequest) throws ApiException {
        okhttp3.Call localVarCall = deregisterVmsInLoadBalancerValidateBeforeCall(deregisterVmsInLoadBalancerRequest, null);
        Type localVarReturnType = new TypeToken<DeregisterVmsInLoadBalancerResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param deregisterVmsInLoadBalancerRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deregisterVmsInLoadBalancerAsync(DeregisterVmsInLoadBalancerRequest deregisterVmsInLoadBalancerRequest, final ApiCallback<DeregisterVmsInLoadBalancerResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deregisterVmsInLoadBalancerValidateBeforeCall(deregisterVmsInLoadBalancerRequest, _callback);
        Type localVarReturnType = new TypeToken<DeregisterVmsInLoadBalancerResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for linkLoadBalancerBackendMachines
     * @param linkLoadBalancerBackendMachinesRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call linkLoadBalancerBackendMachinesCall(LinkLoadBalancerBackendMachinesRequest linkLoadBalancerBackendMachinesRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = linkLoadBalancerBackendMachinesRequest;

        // create path and map variables
        String localVarPath = "/LinkLoadBalancerBackendMachines";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call linkLoadBalancerBackendMachinesValidateBeforeCall(LinkLoadBalancerBackendMachinesRequest linkLoadBalancerBackendMachinesRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = linkLoadBalancerBackendMachinesCall(linkLoadBalancerBackendMachinesRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param linkLoadBalancerBackendMachinesRequest  (optional)
     * @return LinkLoadBalancerBackendMachinesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public LinkLoadBalancerBackendMachinesResponse linkLoadBalancerBackendMachines(LinkLoadBalancerBackendMachinesRequest linkLoadBalancerBackendMachinesRequest) throws ApiException {
        ApiResponse<LinkLoadBalancerBackendMachinesResponse> localVarResp = linkLoadBalancerBackendMachinesWithHttpInfo(linkLoadBalancerBackendMachinesRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param linkLoadBalancerBackendMachinesRequest  (optional)
     * @return ApiResponse&lt;LinkLoadBalancerBackendMachinesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LinkLoadBalancerBackendMachinesResponse> linkLoadBalancerBackendMachinesWithHttpInfo(LinkLoadBalancerBackendMachinesRequest linkLoadBalancerBackendMachinesRequest) throws ApiException {
        okhttp3.Call localVarCall = linkLoadBalancerBackendMachinesValidateBeforeCall(linkLoadBalancerBackendMachinesRequest, null);
        Type localVarReturnType = new TypeToken<LinkLoadBalancerBackendMachinesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param linkLoadBalancerBackendMachinesRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call linkLoadBalancerBackendMachinesAsync(LinkLoadBalancerBackendMachinesRequest linkLoadBalancerBackendMachinesRequest, final ApiCallback<LinkLoadBalancerBackendMachinesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = linkLoadBalancerBackendMachinesValidateBeforeCall(linkLoadBalancerBackendMachinesRequest, _callback);
        Type localVarReturnType = new TypeToken<LinkLoadBalancerBackendMachinesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for readLoadBalancerTags
     * @param readLoadBalancerTagsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readLoadBalancerTagsCall(ReadLoadBalancerTagsRequest readLoadBalancerTagsRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = readLoadBalancerTagsRequest;

        // create path and map variables
        String localVarPath = "/ReadLoadBalancerTags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call readLoadBalancerTagsValidateBeforeCall(ReadLoadBalancerTagsRequest readLoadBalancerTagsRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = readLoadBalancerTagsCall(readLoadBalancerTagsRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param readLoadBalancerTagsRequest  (optional)
     * @return ReadLoadBalancerTagsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public ReadLoadBalancerTagsResponse readLoadBalancerTags(ReadLoadBalancerTagsRequest readLoadBalancerTagsRequest) throws ApiException {
        ApiResponse<ReadLoadBalancerTagsResponse> localVarResp = readLoadBalancerTagsWithHttpInfo(readLoadBalancerTagsRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param readLoadBalancerTagsRequest  (optional)
     * @return ApiResponse&lt;ReadLoadBalancerTagsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReadLoadBalancerTagsResponse> readLoadBalancerTagsWithHttpInfo(ReadLoadBalancerTagsRequest readLoadBalancerTagsRequest) throws ApiException {
        okhttp3.Call localVarCall = readLoadBalancerTagsValidateBeforeCall(readLoadBalancerTagsRequest, null);
        Type localVarReturnType = new TypeToken<ReadLoadBalancerTagsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param readLoadBalancerTagsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readLoadBalancerTagsAsync(ReadLoadBalancerTagsRequest readLoadBalancerTagsRequest, final ApiCallback<ReadLoadBalancerTagsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = readLoadBalancerTagsValidateBeforeCall(readLoadBalancerTagsRequest, _callback);
        Type localVarReturnType = new TypeToken<ReadLoadBalancerTagsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for readLoadBalancers
     * @param readLoadBalancersRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readLoadBalancersCall(ReadLoadBalancersRequest readLoadBalancersRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = readLoadBalancersRequest;

        // create path and map variables
        String localVarPath = "/ReadLoadBalancers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call readLoadBalancersValidateBeforeCall(ReadLoadBalancersRequest readLoadBalancersRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = readLoadBalancersCall(readLoadBalancersRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param readLoadBalancersRequest  (optional)
     * @return ReadLoadBalancersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public ReadLoadBalancersResponse readLoadBalancers(ReadLoadBalancersRequest readLoadBalancersRequest) throws ApiException {
        ApiResponse<ReadLoadBalancersResponse> localVarResp = readLoadBalancersWithHttpInfo(readLoadBalancersRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param readLoadBalancersRequest  (optional)
     * @return ApiResponse&lt;ReadLoadBalancersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReadLoadBalancersResponse> readLoadBalancersWithHttpInfo(ReadLoadBalancersRequest readLoadBalancersRequest) throws ApiException {
        okhttp3.Call localVarCall = readLoadBalancersValidateBeforeCall(readLoadBalancersRequest, null);
        Type localVarReturnType = new TypeToken<ReadLoadBalancersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param readLoadBalancersRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readLoadBalancersAsync(ReadLoadBalancersRequest readLoadBalancersRequest, final ApiCallback<ReadLoadBalancersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = readLoadBalancersValidateBeforeCall(readLoadBalancersRequest, _callback);
        Type localVarReturnType = new TypeToken<ReadLoadBalancersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for readVmsHealth
     * @param readVmsHealthRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readVmsHealthCall(ReadVmsHealthRequest readVmsHealthRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = readVmsHealthRequest;

        // create path and map variables
        String localVarPath = "/ReadVmsHealth";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call readVmsHealthValidateBeforeCall(ReadVmsHealthRequest readVmsHealthRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = readVmsHealthCall(readVmsHealthRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param readVmsHealthRequest  (optional)
     * @return ReadVmsHealthResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public ReadVmsHealthResponse readVmsHealth(ReadVmsHealthRequest readVmsHealthRequest) throws ApiException {
        ApiResponse<ReadVmsHealthResponse> localVarResp = readVmsHealthWithHttpInfo(readVmsHealthRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param readVmsHealthRequest  (optional)
     * @return ApiResponse&lt;ReadVmsHealthResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReadVmsHealthResponse> readVmsHealthWithHttpInfo(ReadVmsHealthRequest readVmsHealthRequest) throws ApiException {
        okhttp3.Call localVarCall = readVmsHealthValidateBeforeCall(readVmsHealthRequest, null);
        Type localVarReturnType = new TypeToken<ReadVmsHealthResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param readVmsHealthRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readVmsHealthAsync(ReadVmsHealthRequest readVmsHealthRequest, final ApiCallback<ReadVmsHealthResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = readVmsHealthValidateBeforeCall(readVmsHealthRequest, _callback);
        Type localVarReturnType = new TypeToken<ReadVmsHealthResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registerVmsInLoadBalancer
     * @param registerVmsInLoadBalancerRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerVmsInLoadBalancerCall(RegisterVmsInLoadBalancerRequest registerVmsInLoadBalancerRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = registerVmsInLoadBalancerRequest;

        // create path and map variables
        String localVarPath = "/RegisterVmsInLoadBalancer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registerVmsInLoadBalancerValidateBeforeCall(RegisterVmsInLoadBalancerRequest registerVmsInLoadBalancerRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = registerVmsInLoadBalancerCall(registerVmsInLoadBalancerRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param registerVmsInLoadBalancerRequest  (optional)
     * @return RegisterVmsInLoadBalancerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public RegisterVmsInLoadBalancerResponse registerVmsInLoadBalancer(RegisterVmsInLoadBalancerRequest registerVmsInLoadBalancerRequest) throws ApiException {
        ApiResponse<RegisterVmsInLoadBalancerResponse> localVarResp = registerVmsInLoadBalancerWithHttpInfo(registerVmsInLoadBalancerRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param registerVmsInLoadBalancerRequest  (optional)
     * @return ApiResponse&lt;RegisterVmsInLoadBalancerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegisterVmsInLoadBalancerResponse> registerVmsInLoadBalancerWithHttpInfo(RegisterVmsInLoadBalancerRequest registerVmsInLoadBalancerRequest) throws ApiException {
        okhttp3.Call localVarCall = registerVmsInLoadBalancerValidateBeforeCall(registerVmsInLoadBalancerRequest, null);
        Type localVarReturnType = new TypeToken<RegisterVmsInLoadBalancerResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param registerVmsInLoadBalancerRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerVmsInLoadBalancerAsync(RegisterVmsInLoadBalancerRequest registerVmsInLoadBalancerRequest, final ApiCallback<RegisterVmsInLoadBalancerResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = registerVmsInLoadBalancerValidateBeforeCall(registerVmsInLoadBalancerRequest, _callback);
        Type localVarReturnType = new TypeToken<RegisterVmsInLoadBalancerResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unlinkLoadBalancerBackendMachines
     * @param unlinkLoadBalancerBackendMachinesRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unlinkLoadBalancerBackendMachinesCall(UnlinkLoadBalancerBackendMachinesRequest unlinkLoadBalancerBackendMachinesRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = unlinkLoadBalancerBackendMachinesRequest;

        // create path and map variables
        String localVarPath = "/UnlinkLoadBalancerBackendMachines";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unlinkLoadBalancerBackendMachinesValidateBeforeCall(UnlinkLoadBalancerBackendMachinesRequest unlinkLoadBalancerBackendMachinesRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = unlinkLoadBalancerBackendMachinesCall(unlinkLoadBalancerBackendMachinesRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param unlinkLoadBalancerBackendMachinesRequest  (optional)
     * @return UnlinkLoadBalancerBackendMachinesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public UnlinkLoadBalancerBackendMachinesResponse unlinkLoadBalancerBackendMachines(UnlinkLoadBalancerBackendMachinesRequest unlinkLoadBalancerBackendMachinesRequest) throws ApiException {
        ApiResponse<UnlinkLoadBalancerBackendMachinesResponse> localVarResp = unlinkLoadBalancerBackendMachinesWithHttpInfo(unlinkLoadBalancerBackendMachinesRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param unlinkLoadBalancerBackendMachinesRequest  (optional)
     * @return ApiResponse&lt;UnlinkLoadBalancerBackendMachinesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UnlinkLoadBalancerBackendMachinesResponse> unlinkLoadBalancerBackendMachinesWithHttpInfo(UnlinkLoadBalancerBackendMachinesRequest unlinkLoadBalancerBackendMachinesRequest) throws ApiException {
        okhttp3.Call localVarCall = unlinkLoadBalancerBackendMachinesValidateBeforeCall(unlinkLoadBalancerBackendMachinesRequest, null);
        Type localVarReturnType = new TypeToken<UnlinkLoadBalancerBackendMachinesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param unlinkLoadBalancerBackendMachinesRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unlinkLoadBalancerBackendMachinesAsync(UnlinkLoadBalancerBackendMachinesRequest unlinkLoadBalancerBackendMachinesRequest, final ApiCallback<UnlinkLoadBalancerBackendMachinesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = unlinkLoadBalancerBackendMachinesValidateBeforeCall(unlinkLoadBalancerBackendMachinesRequest, _callback);
        Type localVarReturnType = new TypeToken<UnlinkLoadBalancerBackendMachinesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateLoadBalancer
     * @param updateLoadBalancerRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateLoadBalancerCall(UpdateLoadBalancerRequest updateLoadBalancerRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateLoadBalancerRequest;

        // create path and map variables
        String localVarPath = "/UpdateLoadBalancer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLoadBalancerValidateBeforeCall(UpdateLoadBalancerRequest updateLoadBalancerRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = updateLoadBalancerCall(updateLoadBalancerRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param updateLoadBalancerRequest  (optional)
     * @return UpdateLoadBalancerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public UpdateLoadBalancerResponse updateLoadBalancer(UpdateLoadBalancerRequest updateLoadBalancerRequest) throws ApiException {
        ApiResponse<UpdateLoadBalancerResponse> localVarResp = updateLoadBalancerWithHttpInfo(updateLoadBalancerRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateLoadBalancerRequest  (optional)
     * @return ApiResponse&lt;UpdateLoadBalancerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateLoadBalancerResponse> updateLoadBalancerWithHttpInfo(UpdateLoadBalancerRequest updateLoadBalancerRequest) throws ApiException {
        okhttp3.Call localVarCall = updateLoadBalancerValidateBeforeCall(updateLoadBalancerRequest, null);
        Type localVarReturnType = new TypeToken<UpdateLoadBalancerResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateLoadBalancerRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateLoadBalancerAsync(UpdateLoadBalancerRequest updateLoadBalancerRequest, final ApiCallback<UpdateLoadBalancerResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLoadBalancerValidateBeforeCall(updateLoadBalancerRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateLoadBalancerResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
