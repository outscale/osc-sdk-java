/*
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> You can learn more about errors returned by the API in the dedicated [errors page](api/errors).<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).
 *
 * The version of the OpenAPI document: 1.23
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.outscale.osc_sdk_java.client.api;

import com.outscale.osc_sdk_java.client.ApiCallback;
import com.outscale.osc_sdk_java.client.ApiClient;
import com.outscale.osc_sdk_java.client.ApiException;
import com.outscale.osc_sdk_java.client.ApiResponse;
import com.outscale.osc_sdk_java.client.Configuration;
import com.outscale.osc_sdk_java.client.Pair;
import com.outscale.osc_sdk_java.client.ProgressRequestBody;
import com.outscale.osc_sdk_java.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.outscale.osc_sdk_java.client.model.CreateApiAccessRuleRequest;
import com.outscale.osc_sdk_java.client.model.CreateApiAccessRuleResponse;
import com.outscale.osc_sdk_java.client.model.DeleteApiAccessRuleRequest;
import com.outscale.osc_sdk_java.client.model.DeleteApiAccessRuleResponse;
import com.outscale.osc_sdk_java.client.model.ReadApiAccessRulesRequest;
import com.outscale.osc_sdk_java.client.model.ReadApiAccessRulesResponse;
import com.outscale.osc_sdk_java.client.model.UpdateApiAccessRuleRequest;
import com.outscale.osc_sdk_java.client.model.UpdateApiAccessRuleResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ApiAccessRuleApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ApiAccessRuleApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApiAccessRuleApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createApiAccessRule
     * @param createApiAccessRuleRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createApiAccessRuleCall(CreateApiAccessRuleRequest createApiAccessRuleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createApiAccessRuleRequest;

        // create path and map variables
        String localVarPath = "/CreateApiAccessRule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AWS4Auth" ,"ApiKeyAuthSec", "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createApiAccessRuleValidateBeforeCall(CreateApiAccessRuleRequest createApiAccessRuleRequest, final ApiCallback _callback) throws ApiException {
        return createApiAccessRuleCall(createApiAccessRuleRequest, _callback);

    }

    /**
     * 
     * 
     * @param createApiAccessRuleRequest  (optional)
     * @return CreateApiAccessRuleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public CreateApiAccessRuleResponse createApiAccessRule(CreateApiAccessRuleRequest createApiAccessRuleRequest) throws ApiException {
        ApiResponse<CreateApiAccessRuleResponse> localVarResp = createApiAccessRuleWithHttpInfo(createApiAccessRuleRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createApiAccessRuleRequest  (optional)
     * @return ApiResponse&lt;CreateApiAccessRuleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateApiAccessRuleResponse> createApiAccessRuleWithHttpInfo(CreateApiAccessRuleRequest createApiAccessRuleRequest) throws ApiException {
        okhttp3.Call localVarCall = createApiAccessRuleValidateBeforeCall(createApiAccessRuleRequest, null);
        Type localVarReturnType = new TypeToken<CreateApiAccessRuleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createApiAccessRuleRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createApiAccessRuleAsync(CreateApiAccessRuleRequest createApiAccessRuleRequest, final ApiCallback<CreateApiAccessRuleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createApiAccessRuleValidateBeforeCall(createApiAccessRuleRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateApiAccessRuleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteApiAccessRule
     * @param deleteApiAccessRuleRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteApiAccessRuleCall(DeleteApiAccessRuleRequest deleteApiAccessRuleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteApiAccessRuleRequest;

        // create path and map variables
        String localVarPath = "/DeleteApiAccessRule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AWS4Auth" ,"ApiKeyAuthSec", "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteApiAccessRuleValidateBeforeCall(DeleteApiAccessRuleRequest deleteApiAccessRuleRequest, final ApiCallback _callback) throws ApiException {
        return deleteApiAccessRuleCall(deleteApiAccessRuleRequest, _callback);

    }

    /**
     * 
     * 
     * @param deleteApiAccessRuleRequest  (optional)
     * @return DeleteApiAccessRuleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public DeleteApiAccessRuleResponse deleteApiAccessRule(DeleteApiAccessRuleRequest deleteApiAccessRuleRequest) throws ApiException {
        ApiResponse<DeleteApiAccessRuleResponse> localVarResp = deleteApiAccessRuleWithHttpInfo(deleteApiAccessRuleRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param deleteApiAccessRuleRequest  (optional)
     * @return ApiResponse&lt;DeleteApiAccessRuleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteApiAccessRuleResponse> deleteApiAccessRuleWithHttpInfo(DeleteApiAccessRuleRequest deleteApiAccessRuleRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteApiAccessRuleValidateBeforeCall(deleteApiAccessRuleRequest, null);
        Type localVarReturnType = new TypeToken<DeleteApiAccessRuleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param deleteApiAccessRuleRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteApiAccessRuleAsync(DeleteApiAccessRuleRequest deleteApiAccessRuleRequest, final ApiCallback<DeleteApiAccessRuleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteApiAccessRuleValidateBeforeCall(deleteApiAccessRuleRequest, _callback);
        Type localVarReturnType = new TypeToken<DeleteApiAccessRuleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for readApiAccessRules
     * @param readApiAccessRulesRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readApiAccessRulesCall(ReadApiAccessRulesRequest readApiAccessRulesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = readApiAccessRulesRequest;

        // create path and map variables
        String localVarPath = "/ReadApiAccessRules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AWS4Auth" ,"ApiKeyAuthSec", "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call readApiAccessRulesValidateBeforeCall(ReadApiAccessRulesRequest readApiAccessRulesRequest, final ApiCallback _callback) throws ApiException {
        return readApiAccessRulesCall(readApiAccessRulesRequest, _callback);

    }

    /**
     * 
     * 
     * @param readApiAccessRulesRequest  (optional)
     * @return ReadApiAccessRulesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public ReadApiAccessRulesResponse readApiAccessRules(ReadApiAccessRulesRequest readApiAccessRulesRequest) throws ApiException {
        ApiResponse<ReadApiAccessRulesResponse> localVarResp = readApiAccessRulesWithHttpInfo(readApiAccessRulesRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param readApiAccessRulesRequest  (optional)
     * @return ApiResponse&lt;ReadApiAccessRulesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReadApiAccessRulesResponse> readApiAccessRulesWithHttpInfo(ReadApiAccessRulesRequest readApiAccessRulesRequest) throws ApiException {
        okhttp3.Call localVarCall = readApiAccessRulesValidateBeforeCall(readApiAccessRulesRequest, null);
        Type localVarReturnType = new TypeToken<ReadApiAccessRulesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param readApiAccessRulesRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readApiAccessRulesAsync(ReadApiAccessRulesRequest readApiAccessRulesRequest, final ApiCallback<ReadApiAccessRulesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = readApiAccessRulesValidateBeforeCall(readApiAccessRulesRequest, _callback);
        Type localVarReturnType = new TypeToken<ReadApiAccessRulesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateApiAccessRule
     * @param updateApiAccessRuleRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateApiAccessRuleCall(UpdateApiAccessRuleRequest updateApiAccessRuleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateApiAccessRuleRequest;

        // create path and map variables
        String localVarPath = "/UpdateApiAccessRule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AWS4Auth" ,"ApiKeyAuthSec", "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateApiAccessRuleValidateBeforeCall(UpdateApiAccessRuleRequest updateApiAccessRuleRequest, final ApiCallback _callback) throws ApiException {
        return updateApiAccessRuleCall(updateApiAccessRuleRequest, _callback);

    }

    /**
     * 
     * 
     * @param updateApiAccessRuleRequest  (optional)
     * @return UpdateApiAccessRuleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public UpdateApiAccessRuleResponse updateApiAccessRule(UpdateApiAccessRuleRequest updateApiAccessRuleRequest) throws ApiException {
        ApiResponse<UpdateApiAccessRuleResponse> localVarResp = updateApiAccessRuleWithHttpInfo(updateApiAccessRuleRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateApiAccessRuleRequest  (optional)
     * @return ApiResponse&lt;UpdateApiAccessRuleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateApiAccessRuleResponse> updateApiAccessRuleWithHttpInfo(UpdateApiAccessRuleRequest updateApiAccessRuleRequest) throws ApiException {
        okhttp3.Call localVarCall = updateApiAccessRuleValidateBeforeCall(updateApiAccessRuleRequest, null);
        Type localVarReturnType = new TypeToken<UpdateApiAccessRuleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateApiAccessRuleRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateApiAccessRuleAsync(UpdateApiAccessRuleRequest updateApiAccessRuleRequest, final ApiCallback<UpdateApiAccessRuleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateApiAccessRuleValidateBeforeCall(updateApiAccessRuleRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateApiAccessRuleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
