/*
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> You can learn more about errors returned by the API in the dedicated [errors page](api/errors).<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).
 *
 * The version of the OpenAPI document: 1.23
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.outscale.osc_sdk_java.client.api;

import com.outscale.osc_sdk_java.client.ApiCallback;
import com.outscale.osc_sdk_java.client.ApiClient;
import com.outscale.osc_sdk_java.client.ApiException;
import com.outscale.osc_sdk_java.client.ApiResponse;
import com.outscale.osc_sdk_java.client.Configuration;
import com.outscale.osc_sdk_java.client.Pair;
import com.outscale.osc_sdk_java.client.ProgressRequestBody;
import com.outscale.osc_sdk_java.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.outscale.osc_sdk_java.client.model.CreateDhcpOptionsRequest;
import com.outscale.osc_sdk_java.client.model.CreateDhcpOptionsResponse;
import com.outscale.osc_sdk_java.client.model.DeleteDhcpOptionsRequest;
import com.outscale.osc_sdk_java.client.model.DeleteDhcpOptionsResponse;
import com.outscale.osc_sdk_java.client.model.ReadDhcpOptionsRequest;
import com.outscale.osc_sdk_java.client.model.ReadDhcpOptionsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DhcpOptionApi {
    private ApiClient localVarApiClient;

    public DhcpOptionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DhcpOptionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createDhcpOptions
     * @param createDhcpOptionsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDhcpOptionsCall(CreateDhcpOptionsRequest createDhcpOptionsRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createDhcpOptionsRequest;

        // create path and map variables
        String localVarPath = "/CreateDhcpOptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDhcpOptionsValidateBeforeCall(CreateDhcpOptionsRequest createDhcpOptionsRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = createDhcpOptionsCall(createDhcpOptionsRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param createDhcpOptionsRequest  (optional)
     * @return CreateDhcpOptionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public CreateDhcpOptionsResponse createDhcpOptions(CreateDhcpOptionsRequest createDhcpOptionsRequest) throws ApiException {
        ApiResponse<CreateDhcpOptionsResponse> localVarResp = createDhcpOptionsWithHttpInfo(createDhcpOptionsRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createDhcpOptionsRequest  (optional)
     * @return ApiResponse&lt;CreateDhcpOptionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDhcpOptionsResponse> createDhcpOptionsWithHttpInfo(CreateDhcpOptionsRequest createDhcpOptionsRequest) throws ApiException {
        okhttp3.Call localVarCall = createDhcpOptionsValidateBeforeCall(createDhcpOptionsRequest, null);
        Type localVarReturnType = new TypeToken<CreateDhcpOptionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createDhcpOptionsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDhcpOptionsAsync(CreateDhcpOptionsRequest createDhcpOptionsRequest, final ApiCallback<CreateDhcpOptionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDhcpOptionsValidateBeforeCall(createDhcpOptionsRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateDhcpOptionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDhcpOptions
     * @param deleteDhcpOptionsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDhcpOptionsCall(DeleteDhcpOptionsRequest deleteDhcpOptionsRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = deleteDhcpOptionsRequest;

        // create path and map variables
        String localVarPath = "/DeleteDhcpOptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDhcpOptionsValidateBeforeCall(DeleteDhcpOptionsRequest deleteDhcpOptionsRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = deleteDhcpOptionsCall(deleteDhcpOptionsRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param deleteDhcpOptionsRequest  (optional)
     * @return DeleteDhcpOptionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public DeleteDhcpOptionsResponse deleteDhcpOptions(DeleteDhcpOptionsRequest deleteDhcpOptionsRequest) throws ApiException {
        ApiResponse<DeleteDhcpOptionsResponse> localVarResp = deleteDhcpOptionsWithHttpInfo(deleteDhcpOptionsRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param deleteDhcpOptionsRequest  (optional)
     * @return ApiResponse&lt;DeleteDhcpOptionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteDhcpOptionsResponse> deleteDhcpOptionsWithHttpInfo(DeleteDhcpOptionsRequest deleteDhcpOptionsRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteDhcpOptionsValidateBeforeCall(deleteDhcpOptionsRequest, null);
        Type localVarReturnType = new TypeToken<DeleteDhcpOptionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param deleteDhcpOptionsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDhcpOptionsAsync(DeleteDhcpOptionsRequest deleteDhcpOptionsRequest, final ApiCallback<DeleteDhcpOptionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDhcpOptionsValidateBeforeCall(deleteDhcpOptionsRequest, _callback);
        Type localVarReturnType = new TypeToken<DeleteDhcpOptionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for readDhcpOptions
     * @param readDhcpOptionsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readDhcpOptionsCall(ReadDhcpOptionsRequest readDhcpOptionsRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = readDhcpOptionsRequest;

        // create path and map variables
        String localVarPath = "/ReadDhcpOptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call readDhcpOptionsValidateBeforeCall(ReadDhcpOptionsRequest readDhcpOptionsRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = readDhcpOptionsCall(readDhcpOptionsRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param readDhcpOptionsRequest  (optional)
     * @return ReadDhcpOptionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public ReadDhcpOptionsResponse readDhcpOptions(ReadDhcpOptionsRequest readDhcpOptionsRequest) throws ApiException {
        ApiResponse<ReadDhcpOptionsResponse> localVarResp = readDhcpOptionsWithHttpInfo(readDhcpOptionsRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param readDhcpOptionsRequest  (optional)
     * @return ApiResponse&lt;ReadDhcpOptionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReadDhcpOptionsResponse> readDhcpOptionsWithHttpInfo(ReadDhcpOptionsRequest readDhcpOptionsRequest) throws ApiException {
        okhttp3.Call localVarCall = readDhcpOptionsValidateBeforeCall(readDhcpOptionsRequest, null);
        Type localVarReturnType = new TypeToken<ReadDhcpOptionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param readDhcpOptionsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readDhcpOptionsAsync(ReadDhcpOptionsRequest readDhcpOptionsRequest, final ApiCallback<ReadDhcpOptionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = readDhcpOptionsValidateBeforeCall(readDhcpOptionsRequest, _callback);
        Type localVarReturnType = new TypeToken<ReadDhcpOptionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
