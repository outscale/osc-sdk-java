/*
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> You can learn more about errors returned by the API in the dedicated [errors page](api/errors).<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).
 *
 * The version of the OpenAPI document: 1.23
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.outscale.osc_sdk_java.client.api;

import com.outscale.osc_sdk_java.client.ApiCallback;
import com.outscale.osc_sdk_java.client.ApiClient;
import com.outscale.osc_sdk_java.client.ApiException;
import com.outscale.osc_sdk_java.client.ApiResponse;
import com.outscale.osc_sdk_java.client.Configuration;
import com.outscale.osc_sdk_java.client.Pair;
import com.outscale.osc_sdk_java.client.ProgressRequestBody;
import com.outscale.osc_sdk_java.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.outscale.osc_sdk_java.client.model.CreateAccessKeyRequest;
import com.outscale.osc_sdk_java.client.model.CreateAccessKeyResponse;
import com.outscale.osc_sdk_java.client.model.DeleteAccessKeyRequest;
import com.outscale.osc_sdk_java.client.model.DeleteAccessKeyResponse;
import com.outscale.osc_sdk_java.client.model.ReadAccessKeysRequest;
import com.outscale.osc_sdk_java.client.model.ReadAccessKeysResponse;
import com.outscale.osc_sdk_java.client.model.ReadSecretAccessKeyRequest;
import com.outscale.osc_sdk_java.client.model.ReadSecretAccessKeyResponse;
import com.outscale.osc_sdk_java.client.model.UpdateAccessKeyRequest;
import com.outscale.osc_sdk_java.client.model.UpdateAccessKeyResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccessKeyApi {
    private ApiClient localVarApiClient;

    public AccessKeyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccessKeyApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createAccessKey
     * @param createAccessKeyRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAccessKeyCall(CreateAccessKeyRequest createAccessKeyRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createAccessKeyRequest;

        // create path and map variables
        String localVarPath = "/CreateAccessKey";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuthSec", "BasicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAccessKeyValidateBeforeCall(CreateAccessKeyRequest createAccessKeyRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = createAccessKeyCall(createAccessKeyRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param createAccessKeyRequest  (optional)
     * @return CreateAccessKeyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public CreateAccessKeyResponse createAccessKey(CreateAccessKeyRequest createAccessKeyRequest) throws ApiException {
        ApiResponse<CreateAccessKeyResponse> localVarResp = createAccessKeyWithHttpInfo(createAccessKeyRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createAccessKeyRequest  (optional)
     * @return ApiResponse&lt;CreateAccessKeyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAccessKeyResponse> createAccessKeyWithHttpInfo(CreateAccessKeyRequest createAccessKeyRequest) throws ApiException {
        okhttp3.Call localVarCall = createAccessKeyValidateBeforeCall(createAccessKeyRequest, null);
        Type localVarReturnType = new TypeToken<CreateAccessKeyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createAccessKeyRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAccessKeyAsync(CreateAccessKeyRequest createAccessKeyRequest, final ApiCallback<CreateAccessKeyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAccessKeyValidateBeforeCall(createAccessKeyRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateAccessKeyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAccessKey
     * @param deleteAccessKeyRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccessKeyCall(DeleteAccessKeyRequest deleteAccessKeyRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = deleteAccessKeyRequest;

        // create path and map variables
        String localVarPath = "/DeleteAccessKey";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuthSec", "BasicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAccessKeyValidateBeforeCall(DeleteAccessKeyRequest deleteAccessKeyRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = deleteAccessKeyCall(deleteAccessKeyRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param deleteAccessKeyRequest  (optional)
     * @return DeleteAccessKeyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public DeleteAccessKeyResponse deleteAccessKey(DeleteAccessKeyRequest deleteAccessKeyRequest) throws ApiException {
        ApiResponse<DeleteAccessKeyResponse> localVarResp = deleteAccessKeyWithHttpInfo(deleteAccessKeyRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param deleteAccessKeyRequest  (optional)
     * @return ApiResponse&lt;DeleteAccessKeyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteAccessKeyResponse> deleteAccessKeyWithHttpInfo(DeleteAccessKeyRequest deleteAccessKeyRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteAccessKeyValidateBeforeCall(deleteAccessKeyRequest, null);
        Type localVarReturnType = new TypeToken<DeleteAccessKeyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param deleteAccessKeyRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccessKeyAsync(DeleteAccessKeyRequest deleteAccessKeyRequest, final ApiCallback<DeleteAccessKeyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAccessKeyValidateBeforeCall(deleteAccessKeyRequest, _callback);
        Type localVarReturnType = new TypeToken<DeleteAccessKeyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for readAccessKeys
     * @param readAccessKeysRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readAccessKeysCall(ReadAccessKeysRequest readAccessKeysRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = readAccessKeysRequest;

        // create path and map variables
        String localVarPath = "/ReadAccessKeys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuthSec", "BasicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call readAccessKeysValidateBeforeCall(ReadAccessKeysRequest readAccessKeysRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = readAccessKeysCall(readAccessKeysRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param readAccessKeysRequest  (optional)
     * @return ReadAccessKeysResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public ReadAccessKeysResponse readAccessKeys(ReadAccessKeysRequest readAccessKeysRequest) throws ApiException {
        ApiResponse<ReadAccessKeysResponse> localVarResp = readAccessKeysWithHttpInfo(readAccessKeysRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param readAccessKeysRequest  (optional)
     * @return ApiResponse&lt;ReadAccessKeysResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReadAccessKeysResponse> readAccessKeysWithHttpInfo(ReadAccessKeysRequest readAccessKeysRequest) throws ApiException {
        okhttp3.Call localVarCall = readAccessKeysValidateBeforeCall(readAccessKeysRequest, null);
        Type localVarReturnType = new TypeToken<ReadAccessKeysResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param readAccessKeysRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readAccessKeysAsync(ReadAccessKeysRequest readAccessKeysRequest, final ApiCallback<ReadAccessKeysResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = readAccessKeysValidateBeforeCall(readAccessKeysRequest, _callback);
        Type localVarReturnType = new TypeToken<ReadAccessKeysResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for readSecretAccessKey
     * @param readSecretAccessKeyRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readSecretAccessKeyCall(ReadSecretAccessKeyRequest readSecretAccessKeyRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = readSecretAccessKeyRequest;

        // create path and map variables
        String localVarPath = "/ReadSecretAccessKey";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuthSec", "BasicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call readSecretAccessKeyValidateBeforeCall(ReadSecretAccessKeyRequest readSecretAccessKeyRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = readSecretAccessKeyCall(readSecretAccessKeyRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param readSecretAccessKeyRequest  (optional)
     * @return ReadSecretAccessKeyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public ReadSecretAccessKeyResponse readSecretAccessKey(ReadSecretAccessKeyRequest readSecretAccessKeyRequest) throws ApiException {
        ApiResponse<ReadSecretAccessKeyResponse> localVarResp = readSecretAccessKeyWithHttpInfo(readSecretAccessKeyRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param readSecretAccessKeyRequest  (optional)
     * @return ApiResponse&lt;ReadSecretAccessKeyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReadSecretAccessKeyResponse> readSecretAccessKeyWithHttpInfo(ReadSecretAccessKeyRequest readSecretAccessKeyRequest) throws ApiException {
        okhttp3.Call localVarCall = readSecretAccessKeyValidateBeforeCall(readSecretAccessKeyRequest, null);
        Type localVarReturnType = new TypeToken<ReadSecretAccessKeyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param readSecretAccessKeyRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readSecretAccessKeyAsync(ReadSecretAccessKeyRequest readSecretAccessKeyRequest, final ApiCallback<ReadSecretAccessKeyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = readSecretAccessKeyValidateBeforeCall(readSecretAccessKeyRequest, _callback);
        Type localVarReturnType = new TypeToken<ReadSecretAccessKeyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAccessKey
     * @param updateAccessKeyRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccessKeyCall(UpdateAccessKeyRequest updateAccessKeyRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateAccessKeyRequest;

        // create path and map variables
        String localVarPath = "/UpdateAccessKey";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuthSec", "BasicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAccessKeyValidateBeforeCall(UpdateAccessKeyRequest updateAccessKeyRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = updateAccessKeyCall(updateAccessKeyRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param updateAccessKeyRequest  (optional)
     * @return UpdateAccessKeyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public UpdateAccessKeyResponse updateAccessKey(UpdateAccessKeyRequest updateAccessKeyRequest) throws ApiException {
        ApiResponse<UpdateAccessKeyResponse> localVarResp = updateAccessKeyWithHttpInfo(updateAccessKeyRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateAccessKeyRequest  (optional)
     * @return ApiResponse&lt;UpdateAccessKeyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateAccessKeyResponse> updateAccessKeyWithHttpInfo(UpdateAccessKeyRequest updateAccessKeyRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAccessKeyValidateBeforeCall(updateAccessKeyRequest, null);
        Type localVarReturnType = new TypeToken<UpdateAccessKeyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateAccessKeyRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccessKeyAsync(UpdateAccessKeyRequest updateAccessKeyRequest, final ApiCallback<UpdateAccessKeyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAccessKeyValidateBeforeCall(updateAccessKeyRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateAccessKeyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
