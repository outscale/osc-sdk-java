/*
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> You can learn more about errors returned by the API in the dedicated [errors page](api/errors).<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).
 *
 * The version of the OpenAPI document: 1.23
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.outscale.osc_sdk_java.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.LocalDate;

/**
 * One or more filters.
 */
@ApiModel(description = "One or more filters.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-12-01T09:51:28.653202Z[Etc/UTC]")
public class FiltersVolume {
  public static final String SERIALIZED_NAME_CREATION_DATES = "CreationDates";
  @SerializedName(SERIALIZED_NAME_CREATION_DATES)
  private List<LocalDate> creationDates = null;

  public static final String SERIALIZED_NAME_LINK_VOLUME_DELETE_ON_VM_DELETION = "LinkVolumeDeleteOnVmDeletion";
  @SerializedName(SERIALIZED_NAME_LINK_VOLUME_DELETE_ON_VM_DELETION)
  private Boolean linkVolumeDeleteOnVmDeletion;

  public static final String SERIALIZED_NAME_LINK_VOLUME_DEVICE_NAMES = "LinkVolumeDeviceNames";
  @SerializedName(SERIALIZED_NAME_LINK_VOLUME_DEVICE_NAMES)
  private List<String> linkVolumeDeviceNames = null;

  public static final String SERIALIZED_NAME_LINK_VOLUME_LINK_DATES = "LinkVolumeLinkDates";
  @SerializedName(SERIALIZED_NAME_LINK_VOLUME_LINK_DATES)
  private List<LocalDate> linkVolumeLinkDates = null;

  public static final String SERIALIZED_NAME_LINK_VOLUME_LINK_STATES = "LinkVolumeLinkStates";
  @SerializedName(SERIALIZED_NAME_LINK_VOLUME_LINK_STATES)
  private List<String> linkVolumeLinkStates = null;

  public static final String SERIALIZED_NAME_LINK_VOLUME_VM_IDS = "LinkVolumeVmIds";
  @SerializedName(SERIALIZED_NAME_LINK_VOLUME_VM_IDS)
  private List<String> linkVolumeVmIds = null;

  public static final String SERIALIZED_NAME_SNAPSHOT_IDS = "SnapshotIds";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_IDS)
  private List<String> snapshotIds = null;

  public static final String SERIALIZED_NAME_SUBREGION_NAMES = "SubregionNames";
  @SerializedName(SERIALIZED_NAME_SUBREGION_NAMES)
  private List<String> subregionNames = null;

  public static final String SERIALIZED_NAME_TAG_KEYS = "TagKeys";
  @SerializedName(SERIALIZED_NAME_TAG_KEYS)
  private List<String> tagKeys = null;

  public static final String SERIALIZED_NAME_TAG_VALUES = "TagValues";
  @SerializedName(SERIALIZED_NAME_TAG_VALUES)
  private List<String> tagValues = null;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = null;

  public static final String SERIALIZED_NAME_VOLUME_IDS = "VolumeIds";
  @SerializedName(SERIALIZED_NAME_VOLUME_IDS)
  private List<String> volumeIds = null;

  public static final String SERIALIZED_NAME_VOLUME_SIZES = "VolumeSizes";
  @SerializedName(SERIALIZED_NAME_VOLUME_SIZES)
  private List<Integer> volumeSizes = null;

  public static final String SERIALIZED_NAME_VOLUME_STATES = "VolumeStates";
  @SerializedName(SERIALIZED_NAME_VOLUME_STATES)
  private List<String> volumeStates = null;

  public static final String SERIALIZED_NAME_VOLUME_TYPES = "VolumeTypes";
  @SerializedName(SERIALIZED_NAME_VOLUME_TYPES)
  private List<String> volumeTypes = null;


  public FiltersVolume creationDates(List<LocalDate> creationDates) {
    
    this.creationDates = creationDates;
    return this;
  }

  public FiltersVolume addCreationDatesItem(LocalDate creationDatesItem) {
    if (this.creationDates == null) {
      this.creationDates = new ArrayList<LocalDate>();
    }
    this.creationDates.add(creationDatesItem);
    return this;
  }

   /**
   * The dates and times at which the volumes were created.
   * @return creationDates
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The dates and times at which the volumes were created.")

  public List<LocalDate> getCreationDates() {
    return creationDates;
  }


  public void setCreationDates(List<LocalDate> creationDates) {
    this.creationDates = creationDates;
  }


  public FiltersVolume linkVolumeDeleteOnVmDeletion(Boolean linkVolumeDeleteOnVmDeletion) {
    
    this.linkVolumeDeleteOnVmDeletion = linkVolumeDeleteOnVmDeletion;
    return this;
  }

   /**
   * Whether the volumes are deleted or not when terminating the VMs.
   * @return linkVolumeDeleteOnVmDeletion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether the volumes are deleted or not when terminating the VMs.")

  public Boolean getLinkVolumeDeleteOnVmDeletion() {
    return linkVolumeDeleteOnVmDeletion;
  }


  public void setLinkVolumeDeleteOnVmDeletion(Boolean linkVolumeDeleteOnVmDeletion) {
    this.linkVolumeDeleteOnVmDeletion = linkVolumeDeleteOnVmDeletion;
  }


  public FiltersVolume linkVolumeDeviceNames(List<String> linkVolumeDeviceNames) {
    
    this.linkVolumeDeviceNames = linkVolumeDeviceNames;
    return this;
  }

  public FiltersVolume addLinkVolumeDeviceNamesItem(String linkVolumeDeviceNamesItem) {
    if (this.linkVolumeDeviceNames == null) {
      this.linkVolumeDeviceNames = new ArrayList<String>();
    }
    this.linkVolumeDeviceNames.add(linkVolumeDeviceNamesItem);
    return this;
  }

   /**
   * The VM device names.
   * @return linkVolumeDeviceNames
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The VM device names.")

  public List<String> getLinkVolumeDeviceNames() {
    return linkVolumeDeviceNames;
  }


  public void setLinkVolumeDeviceNames(List<String> linkVolumeDeviceNames) {
    this.linkVolumeDeviceNames = linkVolumeDeviceNames;
  }


  public FiltersVolume linkVolumeLinkDates(List<LocalDate> linkVolumeLinkDates) {
    
    this.linkVolumeLinkDates = linkVolumeLinkDates;
    return this;
  }

  public FiltersVolume addLinkVolumeLinkDatesItem(LocalDate linkVolumeLinkDatesItem) {
    if (this.linkVolumeLinkDates == null) {
      this.linkVolumeLinkDates = new ArrayList<LocalDate>();
    }
    this.linkVolumeLinkDates.add(linkVolumeLinkDatesItem);
    return this;
  }

   /**
   * The dates and times at which the volumes were created.
   * @return linkVolumeLinkDates
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The dates and times at which the volumes were created.")

  public List<LocalDate> getLinkVolumeLinkDates() {
    return linkVolumeLinkDates;
  }


  public void setLinkVolumeLinkDates(List<LocalDate> linkVolumeLinkDates) {
    this.linkVolumeLinkDates = linkVolumeLinkDates;
  }


  public FiltersVolume linkVolumeLinkStates(List<String> linkVolumeLinkStates) {
    
    this.linkVolumeLinkStates = linkVolumeLinkStates;
    return this;
  }

  public FiltersVolume addLinkVolumeLinkStatesItem(String linkVolumeLinkStatesItem) {
    if (this.linkVolumeLinkStates == null) {
      this.linkVolumeLinkStates = new ArrayList<String>();
    }
    this.linkVolumeLinkStates.add(linkVolumeLinkStatesItem);
    return this;
  }

   /**
   * The attachment states of the volumes (&#x60;attaching&#x60; \\| &#x60;detaching&#x60; \\| &#x60;attached&#x60; \\| &#x60;detached&#x60;).
   * @return linkVolumeLinkStates
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The attachment states of the volumes (`attaching` \\| `detaching` \\| `attached` \\| `detached`).")

  public List<String> getLinkVolumeLinkStates() {
    return linkVolumeLinkStates;
  }


  public void setLinkVolumeLinkStates(List<String> linkVolumeLinkStates) {
    this.linkVolumeLinkStates = linkVolumeLinkStates;
  }


  public FiltersVolume linkVolumeVmIds(List<String> linkVolumeVmIds) {
    
    this.linkVolumeVmIds = linkVolumeVmIds;
    return this;
  }

  public FiltersVolume addLinkVolumeVmIdsItem(String linkVolumeVmIdsItem) {
    if (this.linkVolumeVmIds == null) {
      this.linkVolumeVmIds = new ArrayList<String>();
    }
    this.linkVolumeVmIds.add(linkVolumeVmIdsItem);
    return this;
  }

   /**
   * One or more IDs of VMs.
   * @return linkVolumeVmIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "One or more IDs of VMs.")

  public List<String> getLinkVolumeVmIds() {
    return linkVolumeVmIds;
  }


  public void setLinkVolumeVmIds(List<String> linkVolumeVmIds) {
    this.linkVolumeVmIds = linkVolumeVmIds;
  }


  public FiltersVolume snapshotIds(List<String> snapshotIds) {
    
    this.snapshotIds = snapshotIds;
    return this;
  }

  public FiltersVolume addSnapshotIdsItem(String snapshotIdsItem) {
    if (this.snapshotIds == null) {
      this.snapshotIds = new ArrayList<String>();
    }
    this.snapshotIds.add(snapshotIdsItem);
    return this;
  }

   /**
   * The snapshots from which the volumes were created.
   * @return snapshotIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The snapshots from which the volumes were created.")

  public List<String> getSnapshotIds() {
    return snapshotIds;
  }


  public void setSnapshotIds(List<String> snapshotIds) {
    this.snapshotIds = snapshotIds;
  }


  public FiltersVolume subregionNames(List<String> subregionNames) {
    
    this.subregionNames = subregionNames;
    return this;
  }

  public FiltersVolume addSubregionNamesItem(String subregionNamesItem) {
    if (this.subregionNames == null) {
      this.subregionNames = new ArrayList<String>();
    }
    this.subregionNames.add(subregionNamesItem);
    return this;
  }

   /**
   * The names of the Subregions in which the volumes were created.
   * @return subregionNames
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The names of the Subregions in which the volumes were created.")

  public List<String> getSubregionNames() {
    return subregionNames;
  }


  public void setSubregionNames(List<String> subregionNames) {
    this.subregionNames = subregionNames;
  }


  public FiltersVolume tagKeys(List<String> tagKeys) {
    
    this.tagKeys = tagKeys;
    return this;
  }

  public FiltersVolume addTagKeysItem(String tagKeysItem) {
    if (this.tagKeys == null) {
      this.tagKeys = new ArrayList<String>();
    }
    this.tagKeys.add(tagKeysItem);
    return this;
  }

   /**
   * The keys of the tags associated with the volumes.
   * @return tagKeys
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The keys of the tags associated with the volumes.")

  public List<String> getTagKeys() {
    return tagKeys;
  }


  public void setTagKeys(List<String> tagKeys) {
    this.tagKeys = tagKeys;
  }


  public FiltersVolume tagValues(List<String> tagValues) {
    
    this.tagValues = tagValues;
    return this;
  }

  public FiltersVolume addTagValuesItem(String tagValuesItem) {
    if (this.tagValues == null) {
      this.tagValues = new ArrayList<String>();
    }
    this.tagValues.add(tagValuesItem);
    return this;
  }

   /**
   * The values of the tags associated with the volumes.
   * @return tagValues
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The values of the tags associated with the volumes.")

  public List<String> getTagValues() {
    return tagValues;
  }


  public void setTagValues(List<String> tagValues) {
    this.tagValues = tagValues;
  }


  public FiltersVolume tags(List<String> tags) {
    
    this.tags = tags;
    return this;
  }

  public FiltersVolume addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<String>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * The key/value combination of the tags associated with the volumes, in the following format: &amp;quot;Filters&amp;quot;:{&amp;quot;Tags&amp;quot;:[&amp;quot;TAGKEY&#x3D;TAGVALUE&amp;quot;]}.
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The key/value combination of the tags associated with the volumes, in the following format: &quot;Filters&quot;:{&quot;Tags&quot;:[&quot;TAGKEY=TAGVALUE&quot;]}.")

  public List<String> getTags() {
    return tags;
  }


  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public FiltersVolume volumeIds(List<String> volumeIds) {
    
    this.volumeIds = volumeIds;
    return this;
  }

  public FiltersVolume addVolumeIdsItem(String volumeIdsItem) {
    if (this.volumeIds == null) {
      this.volumeIds = new ArrayList<String>();
    }
    this.volumeIds.add(volumeIdsItem);
    return this;
  }

   /**
   * The IDs of the volumes.
   * @return volumeIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The IDs of the volumes.")

  public List<String> getVolumeIds() {
    return volumeIds;
  }


  public void setVolumeIds(List<String> volumeIds) {
    this.volumeIds = volumeIds;
  }


  public FiltersVolume volumeSizes(List<Integer> volumeSizes) {
    
    this.volumeSizes = volumeSizes;
    return this;
  }

  public FiltersVolume addVolumeSizesItem(Integer volumeSizesItem) {
    if (this.volumeSizes == null) {
      this.volumeSizes = new ArrayList<Integer>();
    }
    this.volumeSizes.add(volumeSizesItem);
    return this;
  }

   /**
   * The sizes of the volumes, in gibibytes (GiB).
   * @return volumeSizes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The sizes of the volumes, in gibibytes (GiB).")

  public List<Integer> getVolumeSizes() {
    return volumeSizes;
  }


  public void setVolumeSizes(List<Integer> volumeSizes) {
    this.volumeSizes = volumeSizes;
  }


  public FiltersVolume volumeStates(List<String> volumeStates) {
    
    this.volumeStates = volumeStates;
    return this;
  }

  public FiltersVolume addVolumeStatesItem(String volumeStatesItem) {
    if (this.volumeStates == null) {
      this.volumeStates = new ArrayList<String>();
    }
    this.volumeStates.add(volumeStatesItem);
    return this;
  }

   /**
   * The states of the volumes (&#x60;creating&#x60; \\| &#x60;available&#x60; \\| &#x60;in-use&#x60; \\| &#x60;updating&#x60; \\| &#x60;deleting&#x60; \\| &#x60;error&#x60;).
   * @return volumeStates
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The states of the volumes (`creating` \\| `available` \\| `in-use` \\| `updating` \\| `deleting` \\| `error`).")

  public List<String> getVolumeStates() {
    return volumeStates;
  }


  public void setVolumeStates(List<String> volumeStates) {
    this.volumeStates = volumeStates;
  }


  public FiltersVolume volumeTypes(List<String> volumeTypes) {
    
    this.volumeTypes = volumeTypes;
    return this;
  }

  public FiltersVolume addVolumeTypesItem(String volumeTypesItem) {
    if (this.volumeTypes == null) {
      this.volumeTypes = new ArrayList<String>();
    }
    this.volumeTypes.add(volumeTypesItem);
    return this;
  }

   /**
   * The types of the volumes (&#x60;standard&#x60; \\| &#x60;gp2&#x60; \\| &#x60;io1&#x60;).
   * @return volumeTypes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The types of the volumes (`standard` \\| `gp2` \\| `io1`).")

  public List<String> getVolumeTypes() {
    return volumeTypes;
  }


  public void setVolumeTypes(List<String> volumeTypes) {
    this.volumeTypes = volumeTypes;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FiltersVolume filtersVolume = (FiltersVolume) o;
    return Objects.equals(this.creationDates, filtersVolume.creationDates) &&
        Objects.equals(this.linkVolumeDeleteOnVmDeletion, filtersVolume.linkVolumeDeleteOnVmDeletion) &&
        Objects.equals(this.linkVolumeDeviceNames, filtersVolume.linkVolumeDeviceNames) &&
        Objects.equals(this.linkVolumeLinkDates, filtersVolume.linkVolumeLinkDates) &&
        Objects.equals(this.linkVolumeLinkStates, filtersVolume.linkVolumeLinkStates) &&
        Objects.equals(this.linkVolumeVmIds, filtersVolume.linkVolumeVmIds) &&
        Objects.equals(this.snapshotIds, filtersVolume.snapshotIds) &&
        Objects.equals(this.subregionNames, filtersVolume.subregionNames) &&
        Objects.equals(this.tagKeys, filtersVolume.tagKeys) &&
        Objects.equals(this.tagValues, filtersVolume.tagValues) &&
        Objects.equals(this.tags, filtersVolume.tags) &&
        Objects.equals(this.volumeIds, filtersVolume.volumeIds) &&
        Objects.equals(this.volumeSizes, filtersVolume.volumeSizes) &&
        Objects.equals(this.volumeStates, filtersVolume.volumeStates) &&
        Objects.equals(this.volumeTypes, filtersVolume.volumeTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationDates, linkVolumeDeleteOnVmDeletion, linkVolumeDeviceNames, linkVolumeLinkDates, linkVolumeLinkStates, linkVolumeVmIds, snapshotIds, subregionNames, tagKeys, tagValues, tags, volumeIds, volumeSizes, volumeStates, volumeTypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FiltersVolume {\n");
    sb.append("    creationDates: ").append(toIndentedString(creationDates)).append("\n");
    sb.append("    linkVolumeDeleteOnVmDeletion: ").append(toIndentedString(linkVolumeDeleteOnVmDeletion)).append("\n");
    sb.append("    linkVolumeDeviceNames: ").append(toIndentedString(linkVolumeDeviceNames)).append("\n");
    sb.append("    linkVolumeLinkDates: ").append(toIndentedString(linkVolumeLinkDates)).append("\n");
    sb.append("    linkVolumeLinkStates: ").append(toIndentedString(linkVolumeLinkStates)).append("\n");
    sb.append("    linkVolumeVmIds: ").append(toIndentedString(linkVolumeVmIds)).append("\n");
    sb.append("    snapshotIds: ").append(toIndentedString(snapshotIds)).append("\n");
    sb.append("    subregionNames: ").append(toIndentedString(subregionNames)).append("\n");
    sb.append("    tagKeys: ").append(toIndentedString(tagKeys)).append("\n");
    sb.append("    tagValues: ").append(toIndentedString(tagValues)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    volumeIds: ").append(toIndentedString(volumeIds)).append("\n");
    sb.append("    volumeSizes: ").append(toIndentedString(volumeSizes)).append("\n");
    sb.append("    volumeStates: ").append(toIndentedString(volumeStates)).append("\n");
    sb.append("    volumeTypes: ").append(toIndentedString(volumeTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

