/*
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> You can learn more about errors returned by the API in the dedicated [errors page](api/errors).<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).
 *
 * The version of the OpenAPI document: 1.23
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.outscale.osc_sdk_java.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.outscale.osc_sdk_java.client.model.LinkNicLight;
import com.outscale.osc_sdk_java.client.model.LinkPublicIpLightForVm;
import com.outscale.osc_sdk_java.client.model.PrivateIpLightForVm;
import com.outscale.osc_sdk_java.client.model.SecurityGroupLight;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.outscale.osc_sdk_java.client.JSON;

/**
 * Information about the network interface card (NIC).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-12-02T08:39:48.703371583Z[GMT]")
public class NicLight {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "AccountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_IS_SOURCE_DEST_CHECKED = "IsSourceDestChecked";
  @SerializedName(SERIALIZED_NAME_IS_SOURCE_DEST_CHECKED)
  private Boolean isSourceDestChecked;

  public static final String SERIALIZED_NAME_LINK_NIC = "LinkNic";
  @SerializedName(SERIALIZED_NAME_LINK_NIC)
  private LinkNicLight linkNic;

  public static final String SERIALIZED_NAME_LINK_PUBLIC_IP = "LinkPublicIp";
  @SerializedName(SERIALIZED_NAME_LINK_PUBLIC_IP)
  private LinkPublicIpLightForVm linkPublicIp;

  public static final String SERIALIZED_NAME_MAC_ADDRESS = "MacAddress";
  @SerializedName(SERIALIZED_NAME_MAC_ADDRESS)
  private String macAddress;

  public static final String SERIALIZED_NAME_NET_ID = "NetId";
  @SerializedName(SERIALIZED_NAME_NET_ID)
  private String netId;

  public static final String SERIALIZED_NAME_NIC_ID = "NicId";
  @SerializedName(SERIALIZED_NAME_NIC_ID)
  private String nicId;

  public static final String SERIALIZED_NAME_PRIVATE_DNS_NAME = "PrivateDnsName";
  @SerializedName(SERIALIZED_NAME_PRIVATE_DNS_NAME)
  private String privateDnsName;

  public static final String SERIALIZED_NAME_PRIVATE_IPS = "PrivateIps";
  @SerializedName(SERIALIZED_NAME_PRIVATE_IPS)
  private List<PrivateIpLightForVm> privateIps = null;

  public static final String SERIALIZED_NAME_SECURITY_GROUPS = "SecurityGroups";
  @SerializedName(SERIALIZED_NAME_SECURITY_GROUPS)
  private List<SecurityGroupLight> securityGroups = null;

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_SUBNET_ID = "SubnetId";
  @SerializedName(SERIALIZED_NAME_SUBNET_ID)
  private String subnetId;

  public NicLight() {
  }

  public NicLight accountId(String accountId) {
    
    this.accountId = accountId;
    return this;
  }

   /**
   * The account ID of the owner of the NIC.
   * @return accountId
  **/
  @javax.annotation.Nullable

  public String getAccountId() {
    return accountId;
  }


  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public NicLight description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * The description of the NIC.
   * @return description
  **/
  @javax.annotation.Nullable

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public NicLight isSourceDestChecked(Boolean isSourceDestChecked) {
    
    this.isSourceDestChecked = isSourceDestChecked;
    return this;
  }

   /**
   * (Net only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Net.
   * @return isSourceDestChecked
  **/
  @javax.annotation.Nullable

  public Boolean getIsSourceDestChecked() {
    return isSourceDestChecked;
  }


  public void setIsSourceDestChecked(Boolean isSourceDestChecked) {
    this.isSourceDestChecked = isSourceDestChecked;
  }


  public NicLight linkNic(LinkNicLight linkNic) {
    
    this.linkNic = linkNic;
    return this;
  }

   /**
   * Get linkNic
   * @return linkNic
  **/
  @javax.annotation.Nullable

  public LinkNicLight getLinkNic() {
    return linkNic;
  }


  public void setLinkNic(LinkNicLight linkNic) {
    this.linkNic = linkNic;
  }


  public NicLight linkPublicIp(LinkPublicIpLightForVm linkPublicIp) {
    
    this.linkPublicIp = linkPublicIp;
    return this;
  }

   /**
   * Get linkPublicIp
   * @return linkPublicIp
  **/
  @javax.annotation.Nullable

  public LinkPublicIpLightForVm getLinkPublicIp() {
    return linkPublicIp;
  }


  public void setLinkPublicIp(LinkPublicIpLightForVm linkPublicIp) {
    this.linkPublicIp = linkPublicIp;
  }


  public NicLight macAddress(String macAddress) {
    
    this.macAddress = macAddress;
    return this;
  }

   /**
   * The Media Access Control (MAC) address of the NIC.
   * @return macAddress
  **/
  @javax.annotation.Nullable

  public String getMacAddress() {
    return macAddress;
  }


  public void setMacAddress(String macAddress) {
    this.macAddress = macAddress;
  }


  public NicLight netId(String netId) {
    
    this.netId = netId;
    return this;
  }

   /**
   * The ID of the Net for the NIC.
   * @return netId
  **/
  @javax.annotation.Nullable

  public String getNetId() {
    return netId;
  }


  public void setNetId(String netId) {
    this.netId = netId;
  }


  public NicLight nicId(String nicId) {
    
    this.nicId = nicId;
    return this;
  }

   /**
   * The ID of the NIC.
   * @return nicId
  **/
  @javax.annotation.Nullable

  public String getNicId() {
    return nicId;
  }


  public void setNicId(String nicId) {
    this.nicId = nicId;
  }


  public NicLight privateDnsName(String privateDnsName) {
    
    this.privateDnsName = privateDnsName;
    return this;
  }

   /**
   * The name of the private DNS.
   * @return privateDnsName
  **/
  @javax.annotation.Nullable

  public String getPrivateDnsName() {
    return privateDnsName;
  }


  public void setPrivateDnsName(String privateDnsName) {
    this.privateDnsName = privateDnsName;
  }


  public NicLight privateIps(List<PrivateIpLightForVm> privateIps) {
    
    this.privateIps = privateIps;
    return this;
  }

  public NicLight addPrivateIpsItem(PrivateIpLightForVm privateIpsItem) {
    if (this.privateIps == null) {
      this.privateIps = new ArrayList<>();
    }
    this.privateIps.add(privateIpsItem);
    return this;
  }

   /**
   * The private IP or IPs of the NIC.
   * @return privateIps
  **/
  @javax.annotation.Nullable

  public List<PrivateIpLightForVm> getPrivateIps() {
    return privateIps;
  }


  public void setPrivateIps(List<PrivateIpLightForVm> privateIps) {
    this.privateIps = privateIps;
  }


  public NicLight securityGroups(List<SecurityGroupLight> securityGroups) {
    
    this.securityGroups = securityGroups;
    return this;
  }

  public NicLight addSecurityGroupsItem(SecurityGroupLight securityGroupsItem) {
    if (this.securityGroups == null) {
      this.securityGroups = new ArrayList<>();
    }
    this.securityGroups.add(securityGroupsItem);
    return this;
  }

   /**
   * One or more IDs of security groups for the NIC.
   * @return securityGroups
  **/
  @javax.annotation.Nullable

  public List<SecurityGroupLight> getSecurityGroups() {
    return securityGroups;
  }


  public void setSecurityGroups(List<SecurityGroupLight> securityGroups) {
    this.securityGroups = securityGroups;
  }


  public NicLight state(String state) {
    
    this.state = state;
    return this;
  }

   /**
   * The state of the NIC (&#x60;available&#x60; \\| &#x60;attaching&#x60; \\| &#x60;in-use&#x60; \\| &#x60;detaching&#x60;).
   * @return state
  **/
  @javax.annotation.Nullable

  public String getState() {
    return state;
  }


  public void setState(String state) {
    this.state = state;
  }


  public NicLight subnetId(String subnetId) {
    
    this.subnetId = subnetId;
    return this;
  }

   /**
   * The ID of the Subnet for the NIC.
   * @return subnetId
  **/
  @javax.annotation.Nullable

  public String getSubnetId() {
    return subnetId;
  }


  public void setSubnetId(String subnetId) {
    this.subnetId = subnetId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NicLight nicLight = (NicLight) o;
    return Objects.equals(this.accountId, nicLight.accountId) &&
        Objects.equals(this.description, nicLight.description) &&
        Objects.equals(this.isSourceDestChecked, nicLight.isSourceDestChecked) &&
        Objects.equals(this.linkNic, nicLight.linkNic) &&
        Objects.equals(this.linkPublicIp, nicLight.linkPublicIp) &&
        Objects.equals(this.macAddress, nicLight.macAddress) &&
        Objects.equals(this.netId, nicLight.netId) &&
        Objects.equals(this.nicId, nicLight.nicId) &&
        Objects.equals(this.privateDnsName, nicLight.privateDnsName) &&
        Objects.equals(this.privateIps, nicLight.privateIps) &&
        Objects.equals(this.securityGroups, nicLight.securityGroups) &&
        Objects.equals(this.state, nicLight.state) &&
        Objects.equals(this.subnetId, nicLight.subnetId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, description, isSourceDestChecked, linkNic, linkPublicIp, macAddress, netId, nicId, privateDnsName, privateIps, securityGroups, state, subnetId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NicLight {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    isSourceDestChecked: ").append(toIndentedString(isSourceDestChecked)).append("\n");
    sb.append("    linkNic: ").append(toIndentedString(linkNic)).append("\n");
    sb.append("    linkPublicIp: ").append(toIndentedString(linkPublicIp)).append("\n");
    sb.append("    macAddress: ").append(toIndentedString(macAddress)).append("\n");
    sb.append("    netId: ").append(toIndentedString(netId)).append("\n");
    sb.append("    nicId: ").append(toIndentedString(nicId)).append("\n");
    sb.append("    privateDnsName: ").append(toIndentedString(privateDnsName)).append("\n");
    sb.append("    privateIps: ").append(toIndentedString(privateIps)).append("\n");
    sb.append("    securityGroups: ").append(toIndentedString(securityGroups)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    subnetId: ").append(toIndentedString(subnetId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AccountId");
    openapiFields.add("Description");
    openapiFields.add("IsSourceDestChecked");
    openapiFields.add("LinkNic");
    openapiFields.add("LinkPublicIp");
    openapiFields.add("MacAddress");
    openapiFields.add("NetId");
    openapiFields.add("NicId");
    openapiFields.add("PrivateDnsName");
    openapiFields.add("PrivateIps");
    openapiFields.add("SecurityGroups");
    openapiFields.add("State");
    openapiFields.add("SubnetId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to NicLight
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!NicLight.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NicLight is not found in the empty JSON string", NicLight.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!NicLight.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NicLight` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("AccountId") != null && !jsonObj.get("AccountId").isJsonNull()) && !jsonObj.get("AccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AccountId").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      // validate the optional field `LinkNic`
      if (jsonObj.get("LinkNic") != null && !jsonObj.get("LinkNic").isJsonNull()) {
        LinkNicLight.validateJsonObject(jsonObj.getAsJsonObject("LinkNic"));
      }
      // validate the optional field `LinkPublicIp`
      if (jsonObj.get("LinkPublicIp") != null && !jsonObj.get("LinkPublicIp").isJsonNull()) {
        LinkPublicIpLightForVm.validateJsonObject(jsonObj.getAsJsonObject("LinkPublicIp"));
      }
      if ((jsonObj.get("MacAddress") != null && !jsonObj.get("MacAddress").isJsonNull()) && !jsonObj.get("MacAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MacAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MacAddress").toString()));
      }
      if ((jsonObj.get("NetId") != null && !jsonObj.get("NetId").isJsonNull()) && !jsonObj.get("NetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NetId").toString()));
      }
      if ((jsonObj.get("NicId") != null && !jsonObj.get("NicId").isJsonNull()) && !jsonObj.get("NicId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NicId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NicId").toString()));
      }
      if ((jsonObj.get("PrivateDnsName") != null && !jsonObj.get("PrivateDnsName").isJsonNull()) && !jsonObj.get("PrivateDnsName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PrivateDnsName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PrivateDnsName").toString()));
      }
      if (jsonObj.get("PrivateIps") != null && !jsonObj.get("PrivateIps").isJsonNull()) {
        JsonArray jsonArrayprivateIps = jsonObj.getAsJsonArray("PrivateIps");
        if (jsonArrayprivateIps != null) {
          // ensure the json data is an array
          if (!jsonObj.get("PrivateIps").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `PrivateIps` to be an array in the JSON string but got `%s`", jsonObj.get("PrivateIps").toString()));
          }

          // validate the optional field `PrivateIps` (array)
          for (int i = 0; i < jsonArrayprivateIps.size(); i++) {
            PrivateIpLightForVm.validateJsonObject(jsonArrayprivateIps.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("SecurityGroups") != null && !jsonObj.get("SecurityGroups").isJsonNull()) {
        JsonArray jsonArraysecurityGroups = jsonObj.getAsJsonArray("SecurityGroups");
        if (jsonArraysecurityGroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("SecurityGroups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `SecurityGroups` to be an array in the JSON string but got `%s`", jsonObj.get("SecurityGroups").toString()));
          }

          // validate the optional field `SecurityGroups` (array)
          for (int i = 0; i < jsonArraysecurityGroups.size(); i++) {
            SecurityGroupLight.validateJsonObject(jsonArraysecurityGroups.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("State") != null && !jsonObj.get("State").isJsonNull()) && !jsonObj.get("State").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `State` to be a primitive type in the JSON string but got `%s`", jsonObj.get("State").toString()));
      }
      if ((jsonObj.get("SubnetId") != null && !jsonObj.get("SubnetId").isJsonNull()) && !jsonObj.get("SubnetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SubnetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SubnetId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NicLight.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NicLight' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NicLight> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NicLight.class));

       return (TypeAdapter<T>) new TypeAdapter<NicLight>() {
           @Override
           public void write(JsonWriter out, NicLight value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NicLight read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of NicLight given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of NicLight
  * @throws IOException if the JSON string is invalid with respect to NicLight
  */
  public static NicLight fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NicLight.class);
  }

 /**
  * Convert an instance of NicLight to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

