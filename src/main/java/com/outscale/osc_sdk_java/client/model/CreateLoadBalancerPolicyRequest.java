/*
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> You can learn more about errors returned by the API in the dedicated [errors page](api/errors).<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).
 *
 * The version of the OpenAPI document: 1.23
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.outscale.osc_sdk_java.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * CreateLoadBalancerPolicyRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-12-01T09:51:28.653202Z[Etc/UTC]")
public class CreateLoadBalancerPolicyRequest {
  public static final String SERIALIZED_NAME_COOKIE_EXPIRATION_PERIOD = "CookieExpirationPeriod";
  @SerializedName(SERIALIZED_NAME_COOKIE_EXPIRATION_PERIOD)
  private Integer cookieExpirationPeriod;

  public static final String SERIALIZED_NAME_COOKIE_NAME = "CookieName";
  @SerializedName(SERIALIZED_NAME_COOKIE_NAME)
  private String cookieName;

  public static final String SERIALIZED_NAME_DRY_RUN = "DryRun";
  @SerializedName(SERIALIZED_NAME_DRY_RUN)
  private Boolean dryRun;

  public static final String SERIALIZED_NAME_LOAD_BALANCER_NAME = "LoadBalancerName";
  @SerializedName(SERIALIZED_NAME_LOAD_BALANCER_NAME)
  private String loadBalancerName;

  public static final String SERIALIZED_NAME_POLICY_NAME = "PolicyName";
  @SerializedName(SERIALIZED_NAME_POLICY_NAME)
  private String policyName;

  public static final String SERIALIZED_NAME_POLICY_TYPE = "PolicyType";
  @SerializedName(SERIALIZED_NAME_POLICY_TYPE)
  private String policyType;


  public CreateLoadBalancerPolicyRequest cookieExpirationPeriod(Integer cookieExpirationPeriod) {
    
    this.cookieExpirationPeriod = cookieExpirationPeriod;
    return this;
  }

   /**
   * The lifetime of the cookie, in seconds. If not specified, the default value of this parameter is &#x60;1&#x60;, which means that the sticky session lasts for the duration of the browser session.
   * @return cookieExpirationPeriod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The lifetime of the cookie, in seconds. If not specified, the default value of this parameter is `1`, which means that the sticky session lasts for the duration of the browser session.")

  public Integer getCookieExpirationPeriod() {
    return cookieExpirationPeriod;
  }


  public void setCookieExpirationPeriod(Integer cookieExpirationPeriod) {
    this.cookieExpirationPeriod = cookieExpirationPeriod;
  }


  public CreateLoadBalancerPolicyRequest cookieName(String cookieName) {
    
    this.cookieName = cookieName;
    return this;
  }

   /**
   * The name of the application cookie used for stickiness. This parameter is required if you create a stickiness policy based on an application-generated cookie.
   * @return cookieName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the application cookie used for stickiness. This parameter is required if you create a stickiness policy based on an application-generated cookie.")

  public String getCookieName() {
    return cookieName;
  }


  public void setCookieName(String cookieName) {
    this.cookieName = cookieName;
  }


  public CreateLoadBalancerPolicyRequest dryRun(Boolean dryRun) {
    
    this.dryRun = dryRun;
    return this;
  }

   /**
   * If true, checks whether you have the required permissions to perform the action.
   * @return dryRun
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If true, checks whether you have the required permissions to perform the action.")

  public Boolean getDryRun() {
    return dryRun;
  }


  public void setDryRun(Boolean dryRun) {
    this.dryRun = dryRun;
  }


  public CreateLoadBalancerPolicyRequest loadBalancerName(String loadBalancerName) {
    
    this.loadBalancerName = loadBalancerName;
    return this;
  }

   /**
   * The name of the load balancer for which you want to create a policy.
   * @return loadBalancerName
  **/
  @ApiModelProperty(required = true, value = "The name of the load balancer for which you want to create a policy.")

  public String getLoadBalancerName() {
    return loadBalancerName;
  }


  public void setLoadBalancerName(String loadBalancerName) {
    this.loadBalancerName = loadBalancerName;
  }


  public CreateLoadBalancerPolicyRequest policyName(String policyName) {
    
    this.policyName = policyName;
    return this;
  }

   /**
   * The name of the policy. This name must be unique and consist of alphanumeric characters and dashes (-).
   * @return policyName
  **/
  @ApiModelProperty(required = true, value = "The name of the policy. This name must be unique and consist of alphanumeric characters and dashes (-).")

  public String getPolicyName() {
    return policyName;
  }


  public void setPolicyName(String policyName) {
    this.policyName = policyName;
  }


  public CreateLoadBalancerPolicyRequest policyType(String policyType) {
    
    this.policyType = policyType;
    return this;
  }

   /**
   * The type of stickiness policy you want to create: &#x60;app&#x60; or &#x60;load_balancer&#x60;.
   * @return policyType
  **/
  @ApiModelProperty(required = true, value = "The type of stickiness policy you want to create: `app` or `load_balancer`.")

  public String getPolicyType() {
    return policyType;
  }


  public void setPolicyType(String policyType) {
    this.policyType = policyType;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateLoadBalancerPolicyRequest createLoadBalancerPolicyRequest = (CreateLoadBalancerPolicyRequest) o;
    return Objects.equals(this.cookieExpirationPeriod, createLoadBalancerPolicyRequest.cookieExpirationPeriod) &&
        Objects.equals(this.cookieName, createLoadBalancerPolicyRequest.cookieName) &&
        Objects.equals(this.dryRun, createLoadBalancerPolicyRequest.dryRun) &&
        Objects.equals(this.loadBalancerName, createLoadBalancerPolicyRequest.loadBalancerName) &&
        Objects.equals(this.policyName, createLoadBalancerPolicyRequest.policyName) &&
        Objects.equals(this.policyType, createLoadBalancerPolicyRequest.policyType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cookieExpirationPeriod, cookieName, dryRun, loadBalancerName, policyName, policyType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateLoadBalancerPolicyRequest {\n");
    sb.append("    cookieExpirationPeriod: ").append(toIndentedString(cookieExpirationPeriod)).append("\n");
    sb.append("    cookieName: ").append(toIndentedString(cookieName)).append("\n");
    sb.append("    dryRun: ").append(toIndentedString(dryRun)).append("\n");
    sb.append("    loadBalancerName: ").append(toIndentedString(loadBalancerName)).append("\n");
    sb.append("    policyName: ").append(toIndentedString(policyName)).append("\n");
    sb.append("    policyType: ").append(toIndentedString(policyType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

