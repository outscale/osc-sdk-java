/*
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> You can learn more about errors returned by the API in the dedicated [errors page](api/errors).<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).
 *
 * The version of the OpenAPI document: 1.23
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.outscale.osc_sdk_java.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.outscale.osc_sdk_java.client.model.AccessLog;
import com.outscale.osc_sdk_java.client.model.HealthCheck;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.outscale.osc_sdk_java.client.JSON;

/**
 * UpdateLoadBalancerRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class UpdateLoadBalancerRequest {
  public static final String SERIALIZED_NAME_ACCESS_LOG = "AccessLog";
  @SerializedName(SERIALIZED_NAME_ACCESS_LOG)
  private AccessLog accessLog;

  public static final String SERIALIZED_NAME_DRY_RUN = "DryRun";
  @SerializedName(SERIALIZED_NAME_DRY_RUN)
  private Boolean dryRun;

  public static final String SERIALIZED_NAME_HEALTH_CHECK = "HealthCheck";
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECK)
  private HealthCheck healthCheck;

  public static final String SERIALIZED_NAME_LOAD_BALANCER_NAME = "LoadBalancerName";
  @SerializedName(SERIALIZED_NAME_LOAD_BALANCER_NAME)
  private String loadBalancerName;

  public static final String SERIALIZED_NAME_LOAD_BALANCER_PORT = "LoadBalancerPort";
  @SerializedName(SERIALIZED_NAME_LOAD_BALANCER_PORT)
  private Integer loadBalancerPort;

  public static final String SERIALIZED_NAME_POLICY_NAMES = "PolicyNames";
  @SerializedName(SERIALIZED_NAME_POLICY_NAMES)
  private List<String> policyNames = null;

  public static final String SERIALIZED_NAME_PUBLIC_IP = "PublicIp";
  @SerializedName(SERIALIZED_NAME_PUBLIC_IP)
  private String publicIp;

  public static final String SERIALIZED_NAME_SECURED_COOKIES = "SecuredCookies";
  @SerializedName(SERIALIZED_NAME_SECURED_COOKIES)
  private Boolean securedCookies;

  public static final String SERIALIZED_NAME_SECURITY_GROUPS = "SecurityGroups";
  @SerializedName(SERIALIZED_NAME_SECURITY_GROUPS)
  private List<String> securityGroups = null;

  public static final String SERIALIZED_NAME_SERVER_CERTIFICATE_ID = "ServerCertificateId";
  @SerializedName(SERIALIZED_NAME_SERVER_CERTIFICATE_ID)
  private String serverCertificateId;

  public UpdateLoadBalancerRequest() {
  }

  public UpdateLoadBalancerRequest accessLog(AccessLog accessLog) {
    
    this.accessLog = accessLog;
    return this;
  }

   /**
   * Get accessLog
   * @return accessLog
  **/
  @javax.annotation.Nullable

  public AccessLog getAccessLog() {
    return accessLog;
  }


  public void setAccessLog(AccessLog accessLog) {
    this.accessLog = accessLog;
  }


  public UpdateLoadBalancerRequest dryRun(Boolean dryRun) {
    
    this.dryRun = dryRun;
    return this;
  }

   /**
   * If true, checks whether you have the required permissions to perform the action.
   * @return dryRun
  **/
  @javax.annotation.Nullable

  public Boolean getDryRun() {
    return dryRun;
  }


  public void setDryRun(Boolean dryRun) {
    this.dryRun = dryRun;
  }


  public UpdateLoadBalancerRequest healthCheck(HealthCheck healthCheck) {
    
    this.healthCheck = healthCheck;
    return this;
  }

   /**
   * Get healthCheck
   * @return healthCheck
  **/
  @javax.annotation.Nullable

  public HealthCheck getHealthCheck() {
    return healthCheck;
  }


  public void setHealthCheck(HealthCheck healthCheck) {
    this.healthCheck = healthCheck;
  }


  public UpdateLoadBalancerRequest loadBalancerName(String loadBalancerName) {
    
    this.loadBalancerName = loadBalancerName;
    return this;
  }

   /**
   * The name of the load balancer.
   * @return loadBalancerName
  **/
  @javax.annotation.Nonnull

  public String getLoadBalancerName() {
    return loadBalancerName;
  }


  public void setLoadBalancerName(String loadBalancerName) {
    this.loadBalancerName = loadBalancerName;
  }


  public UpdateLoadBalancerRequest loadBalancerPort(Integer loadBalancerPort) {
    
    this.loadBalancerPort = loadBalancerPort;
    return this;
  }

   /**
   * The port on which the load balancer is listening (between &#x60;1&#x60; and &#x60;65535&#x60;, both included). This parameter is required if you want to update the server certificate.
   * @return loadBalancerPort
  **/
  @javax.annotation.Nullable

  public Integer getLoadBalancerPort() {
    return loadBalancerPort;
  }


  public void setLoadBalancerPort(Integer loadBalancerPort) {
    this.loadBalancerPort = loadBalancerPort;
  }


  public UpdateLoadBalancerRequest policyNames(List<String> policyNames) {
    
    this.policyNames = policyNames;
    return this;
  }

  public UpdateLoadBalancerRequest addPolicyNamesItem(String policyNamesItem) {
    if (this.policyNames == null) {
      this.policyNames = new ArrayList<>();
    }
    this.policyNames.add(policyNamesItem);
    return this;
  }

   /**
   * The name of the policy you want to enable for the listener.
   * @return policyNames
  **/
  @javax.annotation.Nullable

  public List<String> getPolicyNames() {
    return policyNames;
  }


  public void setPolicyNames(List<String> policyNames) {
    this.policyNames = policyNames;
  }


  public UpdateLoadBalancerRequest publicIp(String publicIp) {
    
    this.publicIp = publicIp;
    return this;
  }

   /**
   * (internet-facing only) The public IP you want to associate with the load balancer. The former public IP of the load balancer is then disassociated. If you specify an empty string and the former public IP belonged to you, it is disassociated and replaced by a public IP owned by 3DS OUTSCALE.
   * @return publicIp
  **/
  @javax.annotation.Nullable

  public String getPublicIp() {
    return publicIp;
  }


  public void setPublicIp(String publicIp) {
    this.publicIp = publicIp;
  }


  public UpdateLoadBalancerRequest securedCookies(Boolean securedCookies) {
    
    this.securedCookies = securedCookies;
    return this;
  }

   /**
   * If true, secure cookies are enabled for the load balancer.
   * @return securedCookies
  **/
  @javax.annotation.Nullable

  public Boolean getSecuredCookies() {
    return securedCookies;
  }


  public void setSecuredCookies(Boolean securedCookies) {
    this.securedCookies = securedCookies;
  }


  public UpdateLoadBalancerRequest securityGroups(List<String> securityGroups) {
    
    this.securityGroups = securityGroups;
    return this;
  }

  public UpdateLoadBalancerRequest addSecurityGroupsItem(String securityGroupsItem) {
    if (this.securityGroups == null) {
      this.securityGroups = new ArrayList<>();
    }
    this.securityGroups.add(securityGroupsItem);
    return this;
  }

   /**
   * (Net only) One or more IDs of security groups you want to assign to the load balancer. You need to specify the already assigned security groups that you want to keep along with the new ones you are assigning. If the list is empty, the default security group of the Net is assigned to the load balancer.
   * @return securityGroups
  **/
  @javax.annotation.Nullable

  public List<String> getSecurityGroups() {
    return securityGroups;
  }


  public void setSecurityGroups(List<String> securityGroups) {
    this.securityGroups = securityGroups;
  }


  public UpdateLoadBalancerRequest serverCertificateId(String serverCertificateId) {
    
    this.serverCertificateId = serverCertificateId;
    return this;
  }

   /**
   * The Outscale Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers &gt; Outscale Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns). If this parameter is specified, you must also specify the &#x60;LoadBalancerPort&#x60; parameter.
   * @return serverCertificateId
  **/
  @javax.annotation.Nullable

  public String getServerCertificateId() {
    return serverCertificateId;
  }


  public void setServerCertificateId(String serverCertificateId) {
    this.serverCertificateId = serverCertificateId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateLoadBalancerRequest updateLoadBalancerRequest = (UpdateLoadBalancerRequest) o;
    return Objects.equals(this.accessLog, updateLoadBalancerRequest.accessLog) &&
        Objects.equals(this.dryRun, updateLoadBalancerRequest.dryRun) &&
        Objects.equals(this.healthCheck, updateLoadBalancerRequest.healthCheck) &&
        Objects.equals(this.loadBalancerName, updateLoadBalancerRequest.loadBalancerName) &&
        Objects.equals(this.loadBalancerPort, updateLoadBalancerRequest.loadBalancerPort) &&
        Objects.equals(this.policyNames, updateLoadBalancerRequest.policyNames) &&
        Objects.equals(this.publicIp, updateLoadBalancerRequest.publicIp) &&
        Objects.equals(this.securedCookies, updateLoadBalancerRequest.securedCookies) &&
        Objects.equals(this.securityGroups, updateLoadBalancerRequest.securityGroups) &&
        Objects.equals(this.serverCertificateId, updateLoadBalancerRequest.serverCertificateId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessLog, dryRun, healthCheck, loadBalancerName, loadBalancerPort, policyNames, publicIp, securedCookies, securityGroups, serverCertificateId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateLoadBalancerRequest {\n");
    sb.append("    accessLog: ").append(toIndentedString(accessLog)).append("\n");
    sb.append("    dryRun: ").append(toIndentedString(dryRun)).append("\n");
    sb.append("    healthCheck: ").append(toIndentedString(healthCheck)).append("\n");
    sb.append("    loadBalancerName: ").append(toIndentedString(loadBalancerName)).append("\n");
    sb.append("    loadBalancerPort: ").append(toIndentedString(loadBalancerPort)).append("\n");
    sb.append("    policyNames: ").append(toIndentedString(policyNames)).append("\n");
    sb.append("    publicIp: ").append(toIndentedString(publicIp)).append("\n");
    sb.append("    securedCookies: ").append(toIndentedString(securedCookies)).append("\n");
    sb.append("    securityGroups: ").append(toIndentedString(securityGroups)).append("\n");
    sb.append("    serverCertificateId: ").append(toIndentedString(serverCertificateId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AccessLog");
    openapiFields.add("DryRun");
    openapiFields.add("HealthCheck");
    openapiFields.add("LoadBalancerName");
    openapiFields.add("LoadBalancerPort");
    openapiFields.add("PolicyNames");
    openapiFields.add("PublicIp");
    openapiFields.add("SecuredCookies");
    openapiFields.add("SecurityGroups");
    openapiFields.add("ServerCertificateId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("LoadBalancerName");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UpdateLoadBalancerRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UpdateLoadBalancerRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateLoadBalancerRequest is not found in the empty JSON string", UpdateLoadBalancerRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!UpdateLoadBalancerRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateLoadBalancerRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateLoadBalancerRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the optional field `AccessLog`
      if (jsonObj.get("AccessLog") != null && !jsonObj.get("AccessLog").isJsonNull()) {
        AccessLog.validateJsonObject(jsonObj.getAsJsonObject("AccessLog"));
      }
      // validate the optional field `HealthCheck`
      if (jsonObj.get("HealthCheck") != null && !jsonObj.get("HealthCheck").isJsonNull()) {
        HealthCheck.validateJsonObject(jsonObj.getAsJsonObject("HealthCheck"));
      }
      if (!jsonObj.get("LoadBalancerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LoadBalancerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LoadBalancerName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("PolicyNames") != null && !jsonObj.get("PolicyNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `PolicyNames` to be an array in the JSON string but got `%s`", jsonObj.get("PolicyNames").toString()));
      }
      if ((jsonObj.get("PublicIp") != null && !jsonObj.get("PublicIp").isJsonNull()) && !jsonObj.get("PublicIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PublicIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PublicIp").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("SecurityGroups") != null && !jsonObj.get("SecurityGroups").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `SecurityGroups` to be an array in the JSON string but got `%s`", jsonObj.get("SecurityGroups").toString()));
      }
      if ((jsonObj.get("ServerCertificateId") != null && !jsonObj.get("ServerCertificateId").isJsonNull()) && !jsonObj.get("ServerCertificateId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServerCertificateId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ServerCertificateId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateLoadBalancerRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateLoadBalancerRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateLoadBalancerRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateLoadBalancerRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateLoadBalancerRequest>() {
           @Override
           public void write(JsonWriter out, UpdateLoadBalancerRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateLoadBalancerRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UpdateLoadBalancerRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UpdateLoadBalancerRequest
  * @throws IOException if the JSON string is invalid with respect to UpdateLoadBalancerRequest
  */
  public static UpdateLoadBalancerRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateLoadBalancerRequest.class);
  }

 /**
  * Convert an instance of UpdateLoadBalancerRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

