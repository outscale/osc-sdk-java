/*
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> You can learn more about errors returned by the API in the dedicated [errors page](api/errors).<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).
 *
 * The version of the OpenAPI document: 1.23
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.outscale.osc_sdk_java.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Information about the health check configuration.
 */
@ApiModel(description = "Information about the health check configuration.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-12-01T09:51:28.653202Z[Etc/UTC]")
public class HealthCheck {
  public static final String SERIALIZED_NAME_CHECK_INTERVAL = "CheckInterval";
  @SerializedName(SERIALIZED_NAME_CHECK_INTERVAL)
  private Integer checkInterval;

  public static final String SERIALIZED_NAME_HEALTHY_THRESHOLD = "HealthyThreshold";
  @SerializedName(SERIALIZED_NAME_HEALTHY_THRESHOLD)
  private Integer healthyThreshold;

  public static final String SERIALIZED_NAME_PATH = "Path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_PORT = "Port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_PROTOCOL = "Protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private String protocol;

  public static final String SERIALIZED_NAME_TIMEOUT = "Timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  private Integer timeout;

  public static final String SERIALIZED_NAME_UNHEALTHY_THRESHOLD = "UnhealthyThreshold";
  @SerializedName(SERIALIZED_NAME_UNHEALTHY_THRESHOLD)
  private Integer unhealthyThreshold;


  public HealthCheck checkInterval(Integer checkInterval) {
    
    this.checkInterval = checkInterval;
    return this;
  }

   /**
   * The number of seconds between two pings (between &#x60;5&#x60; and &#x60;600&#x60; both included).
   * @return checkInterval
  **/
  @ApiModelProperty(required = true, value = "The number of seconds between two pings (between `5` and `600` both included).")

  public Integer getCheckInterval() {
    return checkInterval;
  }


  public void setCheckInterval(Integer checkInterval) {
    this.checkInterval = checkInterval;
  }


  public HealthCheck healthyThreshold(Integer healthyThreshold) {
    
    this.healthyThreshold = healthyThreshold;
    return this;
  }

   /**
   * The number of consecutive successful pings before considering the VM as healthy (between &#x60;2&#x60; and &#x60;10&#x60; both included).
   * @return healthyThreshold
  **/
  @ApiModelProperty(required = true, value = "The number of consecutive successful pings before considering the VM as healthy (between `2` and `10` both included).")

  public Integer getHealthyThreshold() {
    return healthyThreshold;
  }


  public void setHealthyThreshold(Integer healthyThreshold) {
    this.healthyThreshold = healthyThreshold;
  }


  public HealthCheck path(String path) {
    
    this.path = path;
    return this;
  }

   /**
   * If you use the HTTP or HTTPS protocols, the ping path.
   * @return path
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If you use the HTTP or HTTPS protocols, the ping path.")

  public String getPath() {
    return path;
  }


  public void setPath(String path) {
    this.path = path;
  }


  public HealthCheck port(Integer port) {
    
    this.port = port;
    return this;
  }

   /**
   * The port number (between &#x60;1&#x60; and &#x60;65535&#x60;, both included).
   * @return port
  **/
  @ApiModelProperty(required = true, value = "The port number (between `1` and `65535`, both included).")

  public Integer getPort() {
    return port;
  }


  public void setPort(Integer port) {
    this.port = port;
  }


  public HealthCheck protocol(String protocol) {
    
    this.protocol = protocol;
    return this;
  }

   /**
   * The protocol for the URL of the VM (&#x60;HTTP&#x60; \\| &#x60;HTTPS&#x60; \\| &#x60;TCP&#x60; \\| &#x60;SSL&#x60;).
   * @return protocol
  **/
  @ApiModelProperty(required = true, value = "The protocol for the URL of the VM (`HTTP` \\| `HTTPS` \\| `TCP` \\| `SSL`).")

  public String getProtocol() {
    return protocol;
  }


  public void setProtocol(String protocol) {
    this.protocol = protocol;
  }


  public HealthCheck timeout(Integer timeout) {
    
    this.timeout = timeout;
    return this;
  }

   /**
   * The maximum waiting time for a response before considering the VM as unhealthy, in seconds (between &#x60;2&#x60; and &#x60;60&#x60; both included).
   * @return timeout
  **/
  @ApiModelProperty(required = true, value = "The maximum waiting time for a response before considering the VM as unhealthy, in seconds (between `2` and `60` both included).")

  public Integer getTimeout() {
    return timeout;
  }


  public void setTimeout(Integer timeout) {
    this.timeout = timeout;
  }


  public HealthCheck unhealthyThreshold(Integer unhealthyThreshold) {
    
    this.unhealthyThreshold = unhealthyThreshold;
    return this;
  }

   /**
   * The number of consecutive failed pings before considering the VM as unhealthy (between &#x60;2&#x60; and &#x60;10&#x60; both included).
   * @return unhealthyThreshold
  **/
  @ApiModelProperty(required = true, value = "The number of consecutive failed pings before considering the VM as unhealthy (between `2` and `10` both included).")

  public Integer getUnhealthyThreshold() {
    return unhealthyThreshold;
  }


  public void setUnhealthyThreshold(Integer unhealthyThreshold) {
    this.unhealthyThreshold = unhealthyThreshold;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HealthCheck healthCheck = (HealthCheck) o;
    return Objects.equals(this.checkInterval, healthCheck.checkInterval) &&
        Objects.equals(this.healthyThreshold, healthCheck.healthyThreshold) &&
        Objects.equals(this.path, healthCheck.path) &&
        Objects.equals(this.port, healthCheck.port) &&
        Objects.equals(this.protocol, healthCheck.protocol) &&
        Objects.equals(this.timeout, healthCheck.timeout) &&
        Objects.equals(this.unhealthyThreshold, healthCheck.unhealthyThreshold);
  }

  @Override
  public int hashCode() {
    return Objects.hash(checkInterval, healthyThreshold, path, port, protocol, timeout, unhealthyThreshold);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HealthCheck {\n");
    sb.append("    checkInterval: ").append(toIndentedString(checkInterval)).append("\n");
    sb.append("    healthyThreshold: ").append(toIndentedString(healthyThreshold)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("    unhealthyThreshold: ").append(toIndentedString(unhealthyThreshold)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

