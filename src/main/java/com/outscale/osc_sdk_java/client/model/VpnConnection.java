/*
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> You can learn more about errors returned by the API in the dedicated [errors page](api/errors).<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).
 *
 * The version of the OpenAPI document: 1.23
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.outscale.osc_sdk_java.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.outscale.osc_sdk_java.client.model.ResourceTag;
import com.outscale.osc_sdk_java.client.model.RouteLight;
import com.outscale.osc_sdk_java.client.model.VgwTelemetry;
import com.outscale.osc_sdk_java.client.model.VpnOptions;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Information about a VPN connection.
 */
@ApiModel(description = "Information about a VPN connection.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-12-01T09:51:28.653202Z[Etc/UTC]")
public class VpnConnection {
  public static final String SERIALIZED_NAME_CLIENT_GATEWAY_CONFIGURATION = "ClientGatewayConfiguration";
  @SerializedName(SERIALIZED_NAME_CLIENT_GATEWAY_CONFIGURATION)
  private String clientGatewayConfiguration;

  public static final String SERIALIZED_NAME_CLIENT_GATEWAY_ID = "ClientGatewayId";
  @SerializedName(SERIALIZED_NAME_CLIENT_GATEWAY_ID)
  private String clientGatewayId;

  public static final String SERIALIZED_NAME_CONNECTION_TYPE = "ConnectionType";
  @SerializedName(SERIALIZED_NAME_CONNECTION_TYPE)
  private String connectionType;

  public static final String SERIALIZED_NAME_ROUTES = "Routes";
  @SerializedName(SERIALIZED_NAME_ROUTES)
  private List<RouteLight> routes = null;

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_STATIC_ROUTES_ONLY = "StaticRoutesOnly";
  @SerializedName(SERIALIZED_NAME_STATIC_ROUTES_ONLY)
  private Boolean staticRoutesOnly;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<ResourceTag> tags = null;

  public static final String SERIALIZED_NAME_VGW_TELEMETRIES = "VgwTelemetries";
  @SerializedName(SERIALIZED_NAME_VGW_TELEMETRIES)
  private List<VgwTelemetry> vgwTelemetries = null;

  public static final String SERIALIZED_NAME_VIRTUAL_GATEWAY_ID = "VirtualGatewayId";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_GATEWAY_ID)
  private String virtualGatewayId;

  public static final String SERIALIZED_NAME_VPN_CONNECTION_ID = "VpnConnectionId";
  @SerializedName(SERIALIZED_NAME_VPN_CONNECTION_ID)
  private String vpnConnectionId;

  public static final String SERIALIZED_NAME_VPN_OPTIONS = "VpnOptions";
  @SerializedName(SERIALIZED_NAME_VPN_OPTIONS)
  private VpnOptions vpnOptions;


  public VpnConnection clientGatewayConfiguration(String clientGatewayConfiguration) {
    
    this.clientGatewayConfiguration = clientGatewayConfiguration;
    return this;
  }

   /**
   * Example configuration for the client gateway.
   * @return clientGatewayConfiguration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Example configuration for the client gateway.")

  public String getClientGatewayConfiguration() {
    return clientGatewayConfiguration;
  }


  public void setClientGatewayConfiguration(String clientGatewayConfiguration) {
    this.clientGatewayConfiguration = clientGatewayConfiguration;
  }


  public VpnConnection clientGatewayId(String clientGatewayId) {
    
    this.clientGatewayId = clientGatewayId;
    return this;
  }

   /**
   * The ID of the client gateway used on the client end of the connection.
   * @return clientGatewayId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the client gateway used on the client end of the connection.")

  public String getClientGatewayId() {
    return clientGatewayId;
  }


  public void setClientGatewayId(String clientGatewayId) {
    this.clientGatewayId = clientGatewayId;
  }


  public VpnConnection connectionType(String connectionType) {
    
    this.connectionType = connectionType;
    return this;
  }

   /**
   * The type of VPN connection (always &#x60;ipsec.1&#x60;).
   * @return connectionType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of VPN connection (always `ipsec.1`).")

  public String getConnectionType() {
    return connectionType;
  }


  public void setConnectionType(String connectionType) {
    this.connectionType = connectionType;
  }


  public VpnConnection routes(List<RouteLight> routes) {
    
    this.routes = routes;
    return this;
  }

  public VpnConnection addRoutesItem(RouteLight routesItem) {
    if (this.routes == null) {
      this.routes = new ArrayList<RouteLight>();
    }
    this.routes.add(routesItem);
    return this;
  }

   /**
   * Information about one or more static routes associated with the VPN connection, if any.
   * @return routes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Information about one or more static routes associated with the VPN connection, if any.")

  public List<RouteLight> getRoutes() {
    return routes;
  }


  public void setRoutes(List<RouteLight> routes) {
    this.routes = routes;
  }


  public VpnConnection state(String state) {
    
    this.state = state;
    return this;
  }

   /**
   * The state of the VPN connection (&#x60;pending&#x60; \\| &#x60;available&#x60; \\| &#x60;deleting&#x60; \\| &#x60;deleted&#x60;).
   * @return state
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The state of the VPN connection (`pending` \\| `available` \\| `deleting` \\| `deleted`).")

  public String getState() {
    return state;
  }


  public void setState(String state) {
    this.state = state;
  }


  public VpnConnection staticRoutesOnly(Boolean staticRoutesOnly) {
    
    this.staticRoutesOnly = staticRoutesOnly;
    return this;
  }

   /**
   * If false, the VPN connection uses dynamic routing with Border Gateway Protocol (BGP). If true, routing is controlled using static routes. For more information about how to create and delete static routes, see [CreateVpnConnectionRoute](#createvpnconnectionroute) and [DeleteVpnConnectionRoute](#deletevpnconnectionroute).
   * @return staticRoutesOnly
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If false, the VPN connection uses dynamic routing with Border Gateway Protocol (BGP). If true, routing is controlled using static routes. For more information about how to create and delete static routes, see [CreateVpnConnectionRoute](#createvpnconnectionroute) and [DeleteVpnConnectionRoute](#deletevpnconnectionroute).")

  public Boolean getStaticRoutesOnly() {
    return staticRoutesOnly;
  }


  public void setStaticRoutesOnly(Boolean staticRoutesOnly) {
    this.staticRoutesOnly = staticRoutesOnly;
  }


  public VpnConnection tags(List<ResourceTag> tags) {
    
    this.tags = tags;
    return this;
  }

  public VpnConnection addTagsItem(ResourceTag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<ResourceTag>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * One or more tags associated with the VPN connection.
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "One or more tags associated with the VPN connection.")

  public List<ResourceTag> getTags() {
    return tags;
  }


  public void setTags(List<ResourceTag> tags) {
    this.tags = tags;
  }


  public VpnConnection vgwTelemetries(List<VgwTelemetry> vgwTelemetries) {
    
    this.vgwTelemetries = vgwTelemetries;
    return this;
  }

  public VpnConnection addVgwTelemetriesItem(VgwTelemetry vgwTelemetriesItem) {
    if (this.vgwTelemetries == null) {
      this.vgwTelemetries = new ArrayList<VgwTelemetry>();
    }
    this.vgwTelemetries.add(vgwTelemetriesItem);
    return this;
  }

   /**
   * Information about the current state of one or more of the VPN tunnels.
   * @return vgwTelemetries
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Information about the current state of one or more of the VPN tunnels.")

  public List<VgwTelemetry> getVgwTelemetries() {
    return vgwTelemetries;
  }


  public void setVgwTelemetries(List<VgwTelemetry> vgwTelemetries) {
    this.vgwTelemetries = vgwTelemetries;
  }


  public VpnConnection virtualGatewayId(String virtualGatewayId) {
    
    this.virtualGatewayId = virtualGatewayId;
    return this;
  }

   /**
   * The ID of the virtual gateway used on the OUTSCALE end of the connection.
   * @return virtualGatewayId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the virtual gateway used on the OUTSCALE end of the connection.")

  public String getVirtualGatewayId() {
    return virtualGatewayId;
  }


  public void setVirtualGatewayId(String virtualGatewayId) {
    this.virtualGatewayId = virtualGatewayId;
  }


  public VpnConnection vpnConnectionId(String vpnConnectionId) {
    
    this.vpnConnectionId = vpnConnectionId;
    return this;
  }

   /**
   * The ID of the VPN connection.
   * @return vpnConnectionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the VPN connection.")

  public String getVpnConnectionId() {
    return vpnConnectionId;
  }


  public void setVpnConnectionId(String vpnConnectionId) {
    this.vpnConnectionId = vpnConnectionId;
  }


  public VpnConnection vpnOptions(VpnOptions vpnOptions) {
    
    this.vpnOptions = vpnOptions;
    return this;
  }

   /**
   * Get vpnOptions
   * @return vpnOptions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public VpnOptions getVpnOptions() {
    return vpnOptions;
  }


  public void setVpnOptions(VpnOptions vpnOptions) {
    this.vpnOptions = vpnOptions;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VpnConnection vpnConnection = (VpnConnection) o;
    return Objects.equals(this.clientGatewayConfiguration, vpnConnection.clientGatewayConfiguration) &&
        Objects.equals(this.clientGatewayId, vpnConnection.clientGatewayId) &&
        Objects.equals(this.connectionType, vpnConnection.connectionType) &&
        Objects.equals(this.routes, vpnConnection.routes) &&
        Objects.equals(this.state, vpnConnection.state) &&
        Objects.equals(this.staticRoutesOnly, vpnConnection.staticRoutesOnly) &&
        Objects.equals(this.tags, vpnConnection.tags) &&
        Objects.equals(this.vgwTelemetries, vpnConnection.vgwTelemetries) &&
        Objects.equals(this.virtualGatewayId, vpnConnection.virtualGatewayId) &&
        Objects.equals(this.vpnConnectionId, vpnConnection.vpnConnectionId) &&
        Objects.equals(this.vpnOptions, vpnConnection.vpnOptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientGatewayConfiguration, clientGatewayId, connectionType, routes, state, staticRoutesOnly, tags, vgwTelemetries, virtualGatewayId, vpnConnectionId, vpnOptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VpnConnection {\n");
    sb.append("    clientGatewayConfiguration: ").append(toIndentedString(clientGatewayConfiguration)).append("\n");
    sb.append("    clientGatewayId: ").append(toIndentedString(clientGatewayId)).append("\n");
    sb.append("    connectionType: ").append(toIndentedString(connectionType)).append("\n");
    sb.append("    routes: ").append(toIndentedString(routes)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    staticRoutesOnly: ").append(toIndentedString(staticRoutesOnly)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    vgwTelemetries: ").append(toIndentedString(vgwTelemetries)).append("\n");
    sb.append("    virtualGatewayId: ").append(toIndentedString(virtualGatewayId)).append("\n");
    sb.append("    vpnConnectionId: ").append(toIndentedString(vpnConnectionId)).append("\n");
    sb.append("    vpnOptions: ").append(toIndentedString(vpnOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

