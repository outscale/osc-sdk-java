/*
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> You can learn more about errors returned by the API in the dedicated [errors page](api/errors).<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).
 *
 * The version of the OpenAPI document: 1.23
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.outscale.osc_sdk_java.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Information about the listener.
 */
@ApiModel(description = "Information about the listener.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-12-01T09:51:28.653202Z[Etc/UTC]")
public class Listener {
  public static final String SERIALIZED_NAME_BACKEND_PORT = "BackendPort";
  @SerializedName(SERIALIZED_NAME_BACKEND_PORT)
  private Integer backendPort;

  public static final String SERIALIZED_NAME_BACKEND_PROTOCOL = "BackendProtocol";
  @SerializedName(SERIALIZED_NAME_BACKEND_PROTOCOL)
  private String backendProtocol;

  public static final String SERIALIZED_NAME_LOAD_BALANCER_PORT = "LoadBalancerPort";
  @SerializedName(SERIALIZED_NAME_LOAD_BALANCER_PORT)
  private Integer loadBalancerPort;

  public static final String SERIALIZED_NAME_LOAD_BALANCER_PROTOCOL = "LoadBalancerProtocol";
  @SerializedName(SERIALIZED_NAME_LOAD_BALANCER_PROTOCOL)
  private String loadBalancerProtocol;

  public static final String SERIALIZED_NAME_POLICY_NAMES = "PolicyNames";
  @SerializedName(SERIALIZED_NAME_POLICY_NAMES)
  private List<String> policyNames = null;

  public static final String SERIALIZED_NAME_SERVER_CERTIFICATE_ID = "ServerCertificateId";
  @SerializedName(SERIALIZED_NAME_SERVER_CERTIFICATE_ID)
  private String serverCertificateId;


  public Listener backendPort(Integer backendPort) {
    
    this.backendPort = backendPort;
    return this;
  }

   /**
   * The port on which the back-end VM is listening (between &#x60;1&#x60; and &#x60;65535&#x60;, both included).
   * @return backendPort
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The port on which the back-end VM is listening (between `1` and `65535`, both included).")

  public Integer getBackendPort() {
    return backendPort;
  }


  public void setBackendPort(Integer backendPort) {
    this.backendPort = backendPort;
  }


  public Listener backendProtocol(String backendProtocol) {
    
    this.backendProtocol = backendProtocol;
    return this;
  }

   /**
   * The protocol for routing traffic to back-end VMs (&#x60;HTTP&#x60; \\| &#x60;HTTPS&#x60; \\| &#x60;TCP&#x60; \\| &#x60;SSL&#x60;).
   * @return backendProtocol
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The protocol for routing traffic to back-end VMs (`HTTP` \\| `HTTPS` \\| `TCP` \\| `SSL`).")

  public String getBackendProtocol() {
    return backendProtocol;
  }


  public void setBackendProtocol(String backendProtocol) {
    this.backendProtocol = backendProtocol;
  }


  public Listener loadBalancerPort(Integer loadBalancerPort) {
    
    this.loadBalancerPort = loadBalancerPort;
    return this;
  }

   /**
   * The port on which the load balancer is listening (between &#x60;1&#x60; and &#x60;65535&#x60;, both included).
   * @return loadBalancerPort
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The port on which the load balancer is listening (between `1` and `65535`, both included).")

  public Integer getLoadBalancerPort() {
    return loadBalancerPort;
  }


  public void setLoadBalancerPort(Integer loadBalancerPort) {
    this.loadBalancerPort = loadBalancerPort;
  }


  public Listener loadBalancerProtocol(String loadBalancerProtocol) {
    
    this.loadBalancerProtocol = loadBalancerProtocol;
    return this;
  }

   /**
   * The routing protocol (&#x60;HTTP&#x60; \\| &#x60;HTTPS&#x60; \\| &#x60;TCP&#x60; \\| &#x60;SSL&#x60;).
   * @return loadBalancerProtocol
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The routing protocol (`HTTP` \\| `HTTPS` \\| `TCP` \\| `SSL`).")

  public String getLoadBalancerProtocol() {
    return loadBalancerProtocol;
  }


  public void setLoadBalancerProtocol(String loadBalancerProtocol) {
    this.loadBalancerProtocol = loadBalancerProtocol;
  }


  public Listener policyNames(List<String> policyNames) {
    
    this.policyNames = policyNames;
    return this;
  }

  public Listener addPolicyNamesItem(String policyNamesItem) {
    if (this.policyNames == null) {
      this.policyNames = new ArrayList<String>();
    }
    this.policyNames.add(policyNamesItem);
    return this;
  }

   /**
   * The names of the policies. If there are no policies enabled, the list is empty.
   * @return policyNames
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The names of the policies. If there are no policies enabled, the list is empty.")

  public List<String> getPolicyNames() {
    return policyNames;
  }


  public void setPolicyNames(List<String> policyNames) {
    this.policyNames = policyNames;
  }


  public Listener serverCertificateId(String serverCertificateId) {
    
    this.serverCertificateId = serverCertificateId;
    return this;
  }

   /**
   * The OUTSCALE Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers &gt; OUTSCALE Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns).
   * @return serverCertificateId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The OUTSCALE Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers > OUTSCALE Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns).")

  public String getServerCertificateId() {
    return serverCertificateId;
  }


  public void setServerCertificateId(String serverCertificateId) {
    this.serverCertificateId = serverCertificateId;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Listener listener = (Listener) o;
    return Objects.equals(this.backendPort, listener.backendPort) &&
        Objects.equals(this.backendProtocol, listener.backendProtocol) &&
        Objects.equals(this.loadBalancerPort, listener.loadBalancerPort) &&
        Objects.equals(this.loadBalancerProtocol, listener.loadBalancerProtocol) &&
        Objects.equals(this.policyNames, listener.policyNames) &&
        Objects.equals(this.serverCertificateId, listener.serverCertificateId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backendPort, backendProtocol, loadBalancerPort, loadBalancerProtocol, policyNames, serverCertificateId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Listener {\n");
    sb.append("    backendPort: ").append(toIndentedString(backendPort)).append("\n");
    sb.append("    backendProtocol: ").append(toIndentedString(backendProtocol)).append("\n");
    sb.append("    loadBalancerPort: ").append(toIndentedString(loadBalancerPort)).append("\n");
    sb.append("    loadBalancerProtocol: ").append(toIndentedString(loadBalancerProtocol)).append("\n");
    sb.append("    policyNames: ").append(toIndentedString(policyNames)).append("\n");
    sb.append("    serverCertificateId: ").append(toIndentedString(serverCertificateId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

