/*
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> You can learn more about errors returned by the API in the dedicated [errors page](api/errors).<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).
 *
 * The version of the OpenAPI document: 1.23
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.outscale.osc_sdk_java.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * One or more filters.
 */
@ApiModel(description = "One or more filters.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-12-01T09:51:28.653202Z[Etc/UTC]")
public class FiltersVmType {
  public static final String SERIALIZED_NAME_BSU_OPTIMIZED = "BsuOptimized";
  @SerializedName(SERIALIZED_NAME_BSU_OPTIMIZED)
  private Boolean bsuOptimized;

  public static final String SERIALIZED_NAME_MEMORY_SIZES = "MemorySizes";
  @SerializedName(SERIALIZED_NAME_MEMORY_SIZES)
  private List<Float> memorySizes = null;

  public static final String SERIALIZED_NAME_VCORE_COUNTS = "VcoreCounts";
  @SerializedName(SERIALIZED_NAME_VCORE_COUNTS)
  private List<Integer> vcoreCounts = null;

  public static final String SERIALIZED_NAME_VM_TYPE_NAMES = "VmTypeNames";
  @SerializedName(SERIALIZED_NAME_VM_TYPE_NAMES)
  private List<String> vmTypeNames = null;

  public static final String SERIALIZED_NAME_VOLUME_COUNTS = "VolumeCounts";
  @SerializedName(SERIALIZED_NAME_VOLUME_COUNTS)
  private List<Integer> volumeCounts = null;

  public static final String SERIALIZED_NAME_VOLUME_SIZES = "VolumeSizes";
  @SerializedName(SERIALIZED_NAME_VOLUME_SIZES)
  private List<Integer> volumeSizes = null;


  public FiltersVmType bsuOptimized(Boolean bsuOptimized) {
    
    this.bsuOptimized = bsuOptimized;
    return this;
  }

   /**
   * This parameter is not available. It is present in our API for the sake of historical compatibility with AWS.
   * @return bsuOptimized
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This parameter is not available. It is present in our API for the sake of historical compatibility with AWS.")

  public Boolean getBsuOptimized() {
    return bsuOptimized;
  }


  public void setBsuOptimized(Boolean bsuOptimized) {
    this.bsuOptimized = bsuOptimized;
  }


  public FiltersVmType memorySizes(List<Float> memorySizes) {
    
    this.memorySizes = memorySizes;
    return this;
  }

  public FiltersVmType addMemorySizesItem(Float memorySizesItem) {
    if (this.memorySizes == null) {
      this.memorySizes = new ArrayList<Float>();
    }
    this.memorySizes.add(memorySizesItem);
    return this;
  }

   /**
   * The amounts of memory, in gibibytes (GiB).
   * @return memorySizes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The amounts of memory, in gibibytes (GiB).")

  public List<Float> getMemorySizes() {
    return memorySizes;
  }


  public void setMemorySizes(List<Float> memorySizes) {
    this.memorySizes = memorySizes;
  }


  public FiltersVmType vcoreCounts(List<Integer> vcoreCounts) {
    
    this.vcoreCounts = vcoreCounts;
    return this;
  }

  public FiltersVmType addVcoreCountsItem(Integer vcoreCountsItem) {
    if (this.vcoreCounts == null) {
      this.vcoreCounts = new ArrayList<Integer>();
    }
    this.vcoreCounts.add(vcoreCountsItem);
    return this;
  }

   /**
   * The numbers of vCores.
   * @return vcoreCounts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The numbers of vCores.")

  public List<Integer> getVcoreCounts() {
    return vcoreCounts;
  }


  public void setVcoreCounts(List<Integer> vcoreCounts) {
    this.vcoreCounts = vcoreCounts;
  }


  public FiltersVmType vmTypeNames(List<String> vmTypeNames) {
    
    this.vmTypeNames = vmTypeNames;
    return this;
  }

  public FiltersVmType addVmTypeNamesItem(String vmTypeNamesItem) {
    if (this.vmTypeNames == null) {
      this.vmTypeNames = new ArrayList<String>();
    }
    this.vmTypeNames.add(vmTypeNamesItem);
    return this;
  }

   /**
   * The names of the VM types. For more information, see [Instance Types](https://docs.outscale.com/en/userguide/Instance-Types.html).
   * @return vmTypeNames
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The names of the VM types. For more information, see [Instance Types](https://docs.outscale.com/en/userguide/Instance-Types.html).")

  public List<String> getVmTypeNames() {
    return vmTypeNames;
  }


  public void setVmTypeNames(List<String> vmTypeNames) {
    this.vmTypeNames = vmTypeNames;
  }


  public FiltersVmType volumeCounts(List<Integer> volumeCounts) {
    
    this.volumeCounts = volumeCounts;
    return this;
  }

  public FiltersVmType addVolumeCountsItem(Integer volumeCountsItem) {
    if (this.volumeCounts == null) {
      this.volumeCounts = new ArrayList<Integer>();
    }
    this.volumeCounts.add(volumeCountsItem);
    return this;
  }

   /**
   * The maximum number of ephemeral storage disks.
   * @return volumeCounts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The maximum number of ephemeral storage disks.")

  public List<Integer> getVolumeCounts() {
    return volumeCounts;
  }


  public void setVolumeCounts(List<Integer> volumeCounts) {
    this.volumeCounts = volumeCounts;
  }


  public FiltersVmType volumeSizes(List<Integer> volumeSizes) {
    
    this.volumeSizes = volumeSizes;
    return this;
  }

  public FiltersVmType addVolumeSizesItem(Integer volumeSizesItem) {
    if (this.volumeSizes == null) {
      this.volumeSizes = new ArrayList<Integer>();
    }
    this.volumeSizes.add(volumeSizesItem);
    return this;
  }

   /**
   * The size of one ephemeral storage disk, in gibibytes (GiB).
   * @return volumeSizes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The size of one ephemeral storage disk, in gibibytes (GiB).")

  public List<Integer> getVolumeSizes() {
    return volumeSizes;
  }


  public void setVolumeSizes(List<Integer> volumeSizes) {
    this.volumeSizes = volumeSizes;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FiltersVmType filtersVmType = (FiltersVmType) o;
    return Objects.equals(this.bsuOptimized, filtersVmType.bsuOptimized) &&
        Objects.equals(this.memorySizes, filtersVmType.memorySizes) &&
        Objects.equals(this.vcoreCounts, filtersVmType.vcoreCounts) &&
        Objects.equals(this.vmTypeNames, filtersVmType.vmTypeNames) &&
        Objects.equals(this.volumeCounts, filtersVmType.volumeCounts) &&
        Objects.equals(this.volumeSizes, filtersVmType.volumeSizes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bsuOptimized, memorySizes, vcoreCounts, vmTypeNames, volumeCounts, volumeSizes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FiltersVmType {\n");
    sb.append("    bsuOptimized: ").append(toIndentedString(bsuOptimized)).append("\n");
    sb.append("    memorySizes: ").append(toIndentedString(memorySizes)).append("\n");
    sb.append("    vcoreCounts: ").append(toIndentedString(vcoreCounts)).append("\n");
    sb.append("    vmTypeNames: ").append(toIndentedString(vmTypeNames)).append("\n");
    sb.append("    volumeCounts: ").append(toIndentedString(volumeCounts)).append("\n");
    sb.append("    volumeSizes: ").append(toIndentedString(volumeSizes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

