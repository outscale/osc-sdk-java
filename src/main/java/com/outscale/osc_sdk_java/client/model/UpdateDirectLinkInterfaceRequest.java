/*
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> You can learn more about errors returned by the API in the dedicated [errors page](api/errors).<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).
 *
 * The version of the OpenAPI document: 1.23
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.outscale.osc_sdk_java.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.outscale.osc_sdk_java.client.JSON;

/**
 * UpdateDirectLinkInterfaceRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-12-02T08:39:48.703371583Z[GMT]")
public class UpdateDirectLinkInterfaceRequest {
  public static final String SERIALIZED_NAME_DIRECT_LINK_INTERFACE_ID = "DirectLinkInterfaceId";
  @SerializedName(SERIALIZED_NAME_DIRECT_LINK_INTERFACE_ID)
  private String directLinkInterfaceId;

  public static final String SERIALIZED_NAME_DRY_RUN = "DryRun";
  @SerializedName(SERIALIZED_NAME_DRY_RUN)
  private Boolean dryRun;

  /**
   * The maximum transmission unit (MTU) of the DirectLink interface, in bytes (either &#x60;1500&#x60; or &#x60;9000&#x60;).
   */
  @JsonAdapter(MtuEnum.Adapter.class)
  public enum MtuEnum {
    NUMBER_1500(1500),
    
    NUMBER_9000(9000);

    private Integer value;

    MtuEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MtuEnum fromValue(Integer value) {
      for (MtuEnum b : MtuEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MtuEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MtuEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MtuEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return MtuEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MTU = "Mtu";
  @SerializedName(SERIALIZED_NAME_MTU)
  private MtuEnum mtu;

  public UpdateDirectLinkInterfaceRequest() {
  }

  public UpdateDirectLinkInterfaceRequest directLinkInterfaceId(String directLinkInterfaceId) {
    
    this.directLinkInterfaceId = directLinkInterfaceId;
    return this;
  }

   /**
   * The ID of the DirectLink interface you want to update.
   * @return directLinkInterfaceId
  **/
  @javax.annotation.Nonnull

  public String getDirectLinkInterfaceId() {
    return directLinkInterfaceId;
  }


  public void setDirectLinkInterfaceId(String directLinkInterfaceId) {
    this.directLinkInterfaceId = directLinkInterfaceId;
  }


  public UpdateDirectLinkInterfaceRequest dryRun(Boolean dryRun) {
    
    this.dryRun = dryRun;
    return this;
  }

   /**
   * If true, checks whether you have the required permissions to perform the action.
   * @return dryRun
  **/
  @javax.annotation.Nullable

  public Boolean getDryRun() {
    return dryRun;
  }


  public void setDryRun(Boolean dryRun) {
    this.dryRun = dryRun;
  }


  public UpdateDirectLinkInterfaceRequest mtu(MtuEnum mtu) {
    
    this.mtu = mtu;
    return this;
  }

   /**
   * The maximum transmission unit (MTU) of the DirectLink interface, in bytes (either &#x60;1500&#x60; or &#x60;9000&#x60;).
   * @return mtu
  **/
  @javax.annotation.Nonnull

  public MtuEnum getMtu() {
    return mtu;
  }


  public void setMtu(MtuEnum mtu) {
    this.mtu = mtu;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateDirectLinkInterfaceRequest updateDirectLinkInterfaceRequest = (UpdateDirectLinkInterfaceRequest) o;
    return Objects.equals(this.directLinkInterfaceId, updateDirectLinkInterfaceRequest.directLinkInterfaceId) &&
        Objects.equals(this.dryRun, updateDirectLinkInterfaceRequest.dryRun) &&
        Objects.equals(this.mtu, updateDirectLinkInterfaceRequest.mtu);
  }

  @Override
  public int hashCode() {
    return Objects.hash(directLinkInterfaceId, dryRun, mtu);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateDirectLinkInterfaceRequest {\n");
    sb.append("    directLinkInterfaceId: ").append(toIndentedString(directLinkInterfaceId)).append("\n");
    sb.append("    dryRun: ").append(toIndentedString(dryRun)).append("\n");
    sb.append("    mtu: ").append(toIndentedString(mtu)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DirectLinkInterfaceId");
    openapiFields.add("DryRun");
    openapiFields.add("Mtu");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DirectLinkInterfaceId");
    openapiRequiredFields.add("Mtu");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UpdateDirectLinkInterfaceRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UpdateDirectLinkInterfaceRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateDirectLinkInterfaceRequest is not found in the empty JSON string", UpdateDirectLinkInterfaceRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!UpdateDirectLinkInterfaceRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateDirectLinkInterfaceRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateDirectLinkInterfaceRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("DirectLinkInterfaceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DirectLinkInterfaceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DirectLinkInterfaceId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateDirectLinkInterfaceRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateDirectLinkInterfaceRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateDirectLinkInterfaceRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateDirectLinkInterfaceRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateDirectLinkInterfaceRequest>() {
           @Override
           public void write(JsonWriter out, UpdateDirectLinkInterfaceRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateDirectLinkInterfaceRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UpdateDirectLinkInterfaceRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UpdateDirectLinkInterfaceRequest
  * @throws IOException if the JSON string is invalid with respect to UpdateDirectLinkInterfaceRequest
  */
  public static UpdateDirectLinkInterfaceRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateDirectLinkInterfaceRequest.class);
  }

 /**
  * Convert an instance of UpdateDirectLinkInterfaceRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

