/*
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> Throttling: To protect against overloads, the number of identical requests allowed in a given time period is limited.<br /> Brute force: To protect against brute force attacks, the number of failed authentication attempts in a given time period is limited.<br /><br /> You can learn more about errors returned by the API in the dedicated [errors page](api/errors).<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).<br /> # Authentication Schemes ### Access Key/Secret Key The main way to authenticate your requests to the OUTSCALE API is to use an access key and a secret key.<br /> The mechanism behind this is based on AWS Signature Version 4, whose technical implementation details are described in [Signature of API Requests](https://docs.outscale.com/en/userguide/Signature-of-API-Requests.html).<br /><br /> In practice, the way to specify your access key and secret key depends on the tool or SDK you want to use to interact with the API.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify your access key, secret key, and the Region of your account. > 2. You then specify the `--profile` option when executing OSC CLI commands. >  > For more information, see [Installing and Configuring OSC CLI](https://docs.outscale.com/en/userguide/Installing-and-Configuring-OSC-CLI.html).  See the code samples in each section of this documentation for specific examples in different programming languages.<br /> For more information about access keys, see [About Access Keys](https://docs.outscale.com/en/userguide/About-Access-Keys.html). ### Login/Password For certain API actions, you can also use basic authentication with the login (email address) and password of your TINA account.<br /> This is useful only in special circumstances, for example if you do not know your access key/secret key and want to retrieve them programmatically.<br /> In most cases, however, you can use the Cockpit web interface to retrieve them.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify the Region of your account, but you leave the access key value and secret key value empty (`&quot;&quot;`). > 2. You then specify the `--profile`, `--authentication-method`, `--login`, and `--password` options when executing OSC CLI commands.  See the code samples in each section of this documentation for specific examples in different programming languages. ### No Authentication A few API actions do not require any authentication. They are indicated as such in this documentation.<br /> ### Other Security Mechanisms In parallel with the authentication schemes, you can add other security mechanisms to your OUTSCALE account, for example to restrict API requests by IP or other criteria.<br /> For more information, see [Managing Your API Accesses](https://docs.outscale.com/en/userguide/Managing-Your-API-Accesses.html).
 *
 * The version of the OpenAPI document: 1.28.7
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.github.outscale.osc_sdk_java.client.api;

import com.google.gson.reflect.TypeToken;
import io.github.outscale.osc_sdk_java.client.ApiCallback;
import io.github.outscale.osc_sdk_java.client.ApiClient;
import io.github.outscale.osc_sdk_java.client.ApiException;
import io.github.outscale.osc_sdk_java.client.ApiResponse;
import io.github.outscale.osc_sdk_java.client.Configuration;
import io.github.outscale.osc_sdk_java.client.Pair;
import io.github.outscale.osc_sdk_java.client.model.CreatePolicyRequest;
import io.github.outscale.osc_sdk_java.client.model.CreatePolicyResponse;
import io.github.outscale.osc_sdk_java.client.model.CreatePolicyVersionRequest;
import io.github.outscale.osc_sdk_java.client.model.CreatePolicyVersionResponse;
import io.github.outscale.osc_sdk_java.client.model.DeletePolicyRequest;
import io.github.outscale.osc_sdk_java.client.model.DeletePolicyResponse;
import io.github.outscale.osc_sdk_java.client.model.DeletePolicyVersionRequest;
import io.github.outscale.osc_sdk_java.client.model.DeletePolicyVersionResponse;
import io.github.outscale.osc_sdk_java.client.model.LinkPolicyRequest;
import io.github.outscale.osc_sdk_java.client.model.LinkPolicyResponse;
import io.github.outscale.osc_sdk_java.client.model.ReadLinkedPoliciesRequest;
import io.github.outscale.osc_sdk_java.client.model.ReadLinkedPoliciesResponse;
import io.github.outscale.osc_sdk_java.client.model.ReadPoliciesRequest;
import io.github.outscale.osc_sdk_java.client.model.ReadPoliciesResponse;
import io.github.outscale.osc_sdk_java.client.model.ReadPolicyRequest;
import io.github.outscale.osc_sdk_java.client.model.ReadPolicyResponse;
import io.github.outscale.osc_sdk_java.client.model.ReadPolicyVersionRequest;
import io.github.outscale.osc_sdk_java.client.model.ReadPolicyVersionResponse;
import io.github.outscale.osc_sdk_java.client.model.ReadPolicyVersionsRequest;
import io.github.outscale.osc_sdk_java.client.model.ReadPolicyVersionsResponse;
import io.github.outscale.osc_sdk_java.client.model.SetDefaultPolicyVersionRequest;
import io.github.outscale.osc_sdk_java.client.model.SetDefaultPolicyVersionResponse;
import io.github.outscale.osc_sdk_java.client.model.UnlinkPolicyRequest;
import io.github.outscale.osc_sdk_java.client.model.UnlinkPolicyResponse;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PolicyApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PolicyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PolicyApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createPolicy
     *
     * @param createPolicyRequest (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createPolicyCall(
            CreatePolicyRequest createPolicyRequest, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createPolicyRequest;

        // create path and map variables
        String localVarPath = "/CreatePolicy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"AWS4Auth", "ApiKeyAuth"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPolicyValidateBeforeCall(
            CreatePolicyRequest createPolicyRequest, final ApiCallback _callback)
            throws ApiException {
        return createPolicyCall(createPolicyRequest, _callback);
    }

    /**
     * @param createPolicyRequest (optional)
     * @return CreatePolicyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     * </table>
     */
    public CreatePolicyResponse createPolicy(CreatePolicyRequest createPolicyRequest)
            throws ApiException {
        ApiResponse<CreatePolicyResponse> localVarResp =
                createPolicyWithHttpInfo(createPolicyRequest);
        return localVarResp.getData();
    }

    /**
     * @param createPolicyRequest (optional)
     * @return ApiResponse&lt;CreatePolicyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<CreatePolicyResponse> createPolicyWithHttpInfo(
            CreatePolicyRequest createPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = createPolicyValidateBeforeCall(createPolicyRequest, null);
        Type localVarReturnType = new TypeToken<CreatePolicyResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (asynchronously)
     *
     * @param createPolicyRequest (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createPolicyAsync(
            CreatePolicyRequest createPolicyRequest,
            final ApiCallback<CreatePolicyResponse> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = createPolicyValidateBeforeCall(createPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<CreatePolicyResponse>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPolicyVersion
     *
     * @param createPolicyVersionRequest (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createPolicyVersionCall(
            CreatePolicyVersionRequest createPolicyVersionRequest, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createPolicyVersionRequest;

        // create path and map variables
        String localVarPath = "/CreatePolicyVersion";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"AWS4Auth", "ApiKeyAuth"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPolicyVersionValidateBeforeCall(
            CreatePolicyVersionRequest createPolicyVersionRequest, final ApiCallback _callback)
            throws ApiException {
        return createPolicyVersionCall(createPolicyVersionRequest, _callback);
    }

    /**
     * @param createPolicyVersionRequest (optional)
     * @return CreatePolicyVersionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     * </table>
     */
    public CreatePolicyVersionResponse createPolicyVersion(
            CreatePolicyVersionRequest createPolicyVersionRequest) throws ApiException {
        ApiResponse<CreatePolicyVersionResponse> localVarResp =
                createPolicyVersionWithHttpInfo(createPolicyVersionRequest);
        return localVarResp.getData();
    }

    /**
     * @param createPolicyVersionRequest (optional)
     * @return ApiResponse&lt;CreatePolicyVersionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<CreatePolicyVersionResponse> createPolicyVersionWithHttpInfo(
            CreatePolicyVersionRequest createPolicyVersionRequest) throws ApiException {
        okhttp3.Call localVarCall =
                createPolicyVersionValidateBeforeCall(createPolicyVersionRequest, null);
        Type localVarReturnType = new TypeToken<CreatePolicyVersionResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (asynchronously)
     *
     * @param createPolicyVersionRequest (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createPolicyVersionAsync(
            CreatePolicyVersionRequest createPolicyVersionRequest,
            final ApiCallback<CreatePolicyVersionResponse> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                createPolicyVersionValidateBeforeCall(createPolicyVersionRequest, _callback);
        Type localVarReturnType = new TypeToken<CreatePolicyVersionResponse>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePolicy
     *
     * @param deletePolicyRequest (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deletePolicyCall(
            DeletePolicyRequest deletePolicyRequest, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deletePolicyRequest;

        // create path and map variables
        String localVarPath = "/DeletePolicy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"AWS4Auth", "ApiKeyAuth"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePolicyValidateBeforeCall(
            DeletePolicyRequest deletePolicyRequest, final ApiCallback _callback)
            throws ApiException {
        return deletePolicyCall(deletePolicyRequest, _callback);
    }

    /**
     * @param deletePolicyRequest (optional)
     * @return DeletePolicyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     * </table>
     */
    public DeletePolicyResponse deletePolicy(DeletePolicyRequest deletePolicyRequest)
            throws ApiException {
        ApiResponse<DeletePolicyResponse> localVarResp =
                deletePolicyWithHttpInfo(deletePolicyRequest);
        return localVarResp.getData();
    }

    /**
     * @param deletePolicyRequest (optional)
     * @return ApiResponse&lt;DeletePolicyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<DeletePolicyResponse> deletePolicyWithHttpInfo(
            DeletePolicyRequest deletePolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = deletePolicyValidateBeforeCall(deletePolicyRequest, null);
        Type localVarReturnType = new TypeToken<DeletePolicyResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (asynchronously)
     *
     * @param deletePolicyRequest (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deletePolicyAsync(
            DeletePolicyRequest deletePolicyRequest,
            final ApiCallback<DeletePolicyResponse> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = deletePolicyValidateBeforeCall(deletePolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<DeletePolicyResponse>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePolicyVersion
     *
     * @param deletePolicyVersionRequest (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deletePolicyVersionCall(
            DeletePolicyVersionRequest deletePolicyVersionRequest, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deletePolicyVersionRequest;

        // create path and map variables
        String localVarPath = "/DeletePolicyVersion";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"AWS4Auth", "ApiKeyAuth"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePolicyVersionValidateBeforeCall(
            DeletePolicyVersionRequest deletePolicyVersionRequest, final ApiCallback _callback)
            throws ApiException {
        return deletePolicyVersionCall(deletePolicyVersionRequest, _callback);
    }

    /**
     * @param deletePolicyVersionRequest (optional)
     * @return DeletePolicyVersionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     * </table>
     */
    public DeletePolicyVersionResponse deletePolicyVersion(
            DeletePolicyVersionRequest deletePolicyVersionRequest) throws ApiException {
        ApiResponse<DeletePolicyVersionResponse> localVarResp =
                deletePolicyVersionWithHttpInfo(deletePolicyVersionRequest);
        return localVarResp.getData();
    }

    /**
     * @param deletePolicyVersionRequest (optional)
     * @return ApiResponse&lt;DeletePolicyVersionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<DeletePolicyVersionResponse> deletePolicyVersionWithHttpInfo(
            DeletePolicyVersionRequest deletePolicyVersionRequest) throws ApiException {
        okhttp3.Call localVarCall =
                deletePolicyVersionValidateBeforeCall(deletePolicyVersionRequest, null);
        Type localVarReturnType = new TypeToken<DeletePolicyVersionResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (asynchronously)
     *
     * @param deletePolicyVersionRequest (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deletePolicyVersionAsync(
            DeletePolicyVersionRequest deletePolicyVersionRequest,
            final ApiCallback<DeletePolicyVersionResponse> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                deletePolicyVersionValidateBeforeCall(deletePolicyVersionRequest, _callback);
        Type localVarReturnType = new TypeToken<DeletePolicyVersionResponse>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for linkPolicy
     *
     * @param linkPolicyRequest (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call linkPolicyCall(
            LinkPolicyRequest linkPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = linkPolicyRequest;

        // create path and map variables
        String localVarPath = "/LinkPolicy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"AWS4Auth", "ApiKeyAuth"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call linkPolicyValidateBeforeCall(
            LinkPolicyRequest linkPolicyRequest, final ApiCallback _callback) throws ApiException {
        return linkPolicyCall(linkPolicyRequest, _callback);
    }

    /**
     * @param linkPolicyRequest (optional)
     * @return LinkPolicyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     * </table>
     */
    public LinkPolicyResponse linkPolicy(LinkPolicyRequest linkPolicyRequest) throws ApiException {
        ApiResponse<LinkPolicyResponse> localVarResp = linkPolicyWithHttpInfo(linkPolicyRequest);
        return localVarResp.getData();
    }

    /**
     * @param linkPolicyRequest (optional)
     * @return ApiResponse&lt;LinkPolicyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<LinkPolicyResponse> linkPolicyWithHttpInfo(
            LinkPolicyRequest linkPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = linkPolicyValidateBeforeCall(linkPolicyRequest, null);
        Type localVarReturnType = new TypeToken<LinkPolicyResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (asynchronously)
     *
     * @param linkPolicyRequest (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call linkPolicyAsync(
            LinkPolicyRequest linkPolicyRequest, final ApiCallback<LinkPolicyResponse> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = linkPolicyValidateBeforeCall(linkPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<LinkPolicyResponse>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for readLinkedPolicies
     *
     * @param readLinkedPoliciesRequest (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call readLinkedPoliciesCall(
            ReadLinkedPoliciesRequest readLinkedPoliciesRequest, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = readLinkedPoliciesRequest;

        // create path and map variables
        String localVarPath = "/ReadLinkedPolicies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"AWS4Auth", "ApiKeyAuth"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call readLinkedPoliciesValidateBeforeCall(
            ReadLinkedPoliciesRequest readLinkedPoliciesRequest, final ApiCallback _callback)
            throws ApiException {
        return readLinkedPoliciesCall(readLinkedPoliciesRequest, _callback);
    }

    /**
     * @param readLinkedPoliciesRequest (optional)
     * @return ReadLinkedPoliciesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     * </table>
     */
    public ReadLinkedPoliciesResponse readLinkedPolicies(
            ReadLinkedPoliciesRequest readLinkedPoliciesRequest) throws ApiException {
        ApiResponse<ReadLinkedPoliciesResponse> localVarResp =
                readLinkedPoliciesWithHttpInfo(readLinkedPoliciesRequest);
        return localVarResp.getData();
    }

    /**
     * @param readLinkedPoliciesRequest (optional)
     * @return ApiResponse&lt;ReadLinkedPoliciesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ReadLinkedPoliciesResponse> readLinkedPoliciesWithHttpInfo(
            ReadLinkedPoliciesRequest readLinkedPoliciesRequest) throws ApiException {
        okhttp3.Call localVarCall =
                readLinkedPoliciesValidateBeforeCall(readLinkedPoliciesRequest, null);
        Type localVarReturnType = new TypeToken<ReadLinkedPoliciesResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (asynchronously)
     *
     * @param readLinkedPoliciesRequest (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call readLinkedPoliciesAsync(
            ReadLinkedPoliciesRequest readLinkedPoliciesRequest,
            final ApiCallback<ReadLinkedPoliciesResponse> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                readLinkedPoliciesValidateBeforeCall(readLinkedPoliciesRequest, _callback);
        Type localVarReturnType = new TypeToken<ReadLinkedPoliciesResponse>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for readPolicies
     *
     * @param readPoliciesRequest (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call readPoliciesCall(
            ReadPoliciesRequest readPoliciesRequest, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = readPoliciesRequest;

        // create path and map variables
        String localVarPath = "/ReadPolicies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"AWS4Auth", "ApiKeyAuth"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call readPoliciesValidateBeforeCall(
            ReadPoliciesRequest readPoliciesRequest, final ApiCallback _callback)
            throws ApiException {
        return readPoliciesCall(readPoliciesRequest, _callback);
    }

    /**
     * @param readPoliciesRequest (optional)
     * @return ReadPoliciesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     * </table>
     */
    public ReadPoliciesResponse readPolicies(ReadPoliciesRequest readPoliciesRequest)
            throws ApiException {
        ApiResponse<ReadPoliciesResponse> localVarResp =
                readPoliciesWithHttpInfo(readPoliciesRequest);
        return localVarResp.getData();
    }

    /**
     * @param readPoliciesRequest (optional)
     * @return ApiResponse&lt;ReadPoliciesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ReadPoliciesResponse> readPoliciesWithHttpInfo(
            ReadPoliciesRequest readPoliciesRequest) throws ApiException {
        okhttp3.Call localVarCall = readPoliciesValidateBeforeCall(readPoliciesRequest, null);
        Type localVarReturnType = new TypeToken<ReadPoliciesResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (asynchronously)
     *
     * @param readPoliciesRequest (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call readPoliciesAsync(
            ReadPoliciesRequest readPoliciesRequest,
            final ApiCallback<ReadPoliciesResponse> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = readPoliciesValidateBeforeCall(readPoliciesRequest, _callback);
        Type localVarReturnType = new TypeToken<ReadPoliciesResponse>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for readPolicy
     *
     * @param readPolicyRequest (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call readPolicyCall(
            ReadPolicyRequest readPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = readPolicyRequest;

        // create path and map variables
        String localVarPath = "/ReadPolicy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"AWS4Auth", "ApiKeyAuth"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call readPolicyValidateBeforeCall(
            ReadPolicyRequest readPolicyRequest, final ApiCallback _callback) throws ApiException {
        return readPolicyCall(readPolicyRequest, _callback);
    }

    /**
     * @param readPolicyRequest (optional)
     * @return ReadPolicyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     * </table>
     */
    public ReadPolicyResponse readPolicy(ReadPolicyRequest readPolicyRequest) throws ApiException {
        ApiResponse<ReadPolicyResponse> localVarResp = readPolicyWithHttpInfo(readPolicyRequest);
        return localVarResp.getData();
    }

    /**
     * @param readPolicyRequest (optional)
     * @return ApiResponse&lt;ReadPolicyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ReadPolicyResponse> readPolicyWithHttpInfo(
            ReadPolicyRequest readPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = readPolicyValidateBeforeCall(readPolicyRequest, null);
        Type localVarReturnType = new TypeToken<ReadPolicyResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (asynchronously)
     *
     * @param readPolicyRequest (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call readPolicyAsync(
            ReadPolicyRequest readPolicyRequest, final ApiCallback<ReadPolicyResponse> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = readPolicyValidateBeforeCall(readPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<ReadPolicyResponse>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for readPolicyVersion
     *
     * @param readPolicyVersionRequest (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call readPolicyVersionCall(
            ReadPolicyVersionRequest readPolicyVersionRequest, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = readPolicyVersionRequest;

        // create path and map variables
        String localVarPath = "/ReadPolicyVersion";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"AWS4Auth", "ApiKeyAuth"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call readPolicyVersionValidateBeforeCall(
            ReadPolicyVersionRequest readPolicyVersionRequest, final ApiCallback _callback)
            throws ApiException {
        return readPolicyVersionCall(readPolicyVersionRequest, _callback);
    }

    /**
     * @param readPolicyVersionRequest (optional)
     * @return ReadPolicyVersionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     * </table>
     */
    public ReadPolicyVersionResponse readPolicyVersion(
            ReadPolicyVersionRequest readPolicyVersionRequest) throws ApiException {
        ApiResponse<ReadPolicyVersionResponse> localVarResp =
                readPolicyVersionWithHttpInfo(readPolicyVersionRequest);
        return localVarResp.getData();
    }

    /**
     * @param readPolicyVersionRequest (optional)
     * @return ApiResponse&lt;ReadPolicyVersionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ReadPolicyVersionResponse> readPolicyVersionWithHttpInfo(
            ReadPolicyVersionRequest readPolicyVersionRequest) throws ApiException {
        okhttp3.Call localVarCall =
                readPolicyVersionValidateBeforeCall(readPolicyVersionRequest, null);
        Type localVarReturnType = new TypeToken<ReadPolicyVersionResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (asynchronously)
     *
     * @param readPolicyVersionRequest (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call readPolicyVersionAsync(
            ReadPolicyVersionRequest readPolicyVersionRequest,
            final ApiCallback<ReadPolicyVersionResponse> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                readPolicyVersionValidateBeforeCall(readPolicyVersionRequest, _callback);
        Type localVarReturnType = new TypeToken<ReadPolicyVersionResponse>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for readPolicyVersions
     *
     * @param readPolicyVersionsRequest (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call readPolicyVersionsCall(
            ReadPolicyVersionsRequest readPolicyVersionsRequest, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = readPolicyVersionsRequest;

        // create path and map variables
        String localVarPath = "/ReadPolicyVersions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"AWS4Auth", "ApiKeyAuth"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call readPolicyVersionsValidateBeforeCall(
            ReadPolicyVersionsRequest readPolicyVersionsRequest, final ApiCallback _callback)
            throws ApiException {
        return readPolicyVersionsCall(readPolicyVersionsRequest, _callback);
    }

    /**
     * @param readPolicyVersionsRequest (optional)
     * @return ReadPolicyVersionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     * </table>
     */
    public ReadPolicyVersionsResponse readPolicyVersions(
            ReadPolicyVersionsRequest readPolicyVersionsRequest) throws ApiException {
        ApiResponse<ReadPolicyVersionsResponse> localVarResp =
                readPolicyVersionsWithHttpInfo(readPolicyVersionsRequest);
        return localVarResp.getData();
    }

    /**
     * @param readPolicyVersionsRequest (optional)
     * @return ApiResponse&lt;ReadPolicyVersionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ReadPolicyVersionsResponse> readPolicyVersionsWithHttpInfo(
            ReadPolicyVersionsRequest readPolicyVersionsRequest) throws ApiException {
        okhttp3.Call localVarCall =
                readPolicyVersionsValidateBeforeCall(readPolicyVersionsRequest, null);
        Type localVarReturnType = new TypeToken<ReadPolicyVersionsResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (asynchronously)
     *
     * @param readPolicyVersionsRequest (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call readPolicyVersionsAsync(
            ReadPolicyVersionsRequest readPolicyVersionsRequest,
            final ApiCallback<ReadPolicyVersionsResponse> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                readPolicyVersionsValidateBeforeCall(readPolicyVersionsRequest, _callback);
        Type localVarReturnType = new TypeToken<ReadPolicyVersionsResponse>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setDefaultPolicyVersion
     *
     * @param setDefaultPolicyVersionRequest (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call setDefaultPolicyVersionCall(
            SetDefaultPolicyVersionRequest setDefaultPolicyVersionRequest,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setDefaultPolicyVersionRequest;

        // create path and map variables
        String localVarPath = "/SetDefaultPolicyVersion";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"AWS4Auth", "ApiKeyAuth"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setDefaultPolicyVersionValidateBeforeCall(
            SetDefaultPolicyVersionRequest setDefaultPolicyVersionRequest,
            final ApiCallback _callback)
            throws ApiException {
        return setDefaultPolicyVersionCall(setDefaultPolicyVersionRequest, _callback);
    }

    /**
     * @param setDefaultPolicyVersionRequest (optional)
     * @return SetDefaultPolicyVersionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     * </table>
     */
    public SetDefaultPolicyVersionResponse setDefaultPolicyVersion(
            SetDefaultPolicyVersionRequest setDefaultPolicyVersionRequest) throws ApiException {
        ApiResponse<SetDefaultPolicyVersionResponse> localVarResp =
                setDefaultPolicyVersionWithHttpInfo(setDefaultPolicyVersionRequest);
        return localVarResp.getData();
    }

    /**
     * @param setDefaultPolicyVersionRequest (optional)
     * @return ApiResponse&lt;SetDefaultPolicyVersionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<SetDefaultPolicyVersionResponse> setDefaultPolicyVersionWithHttpInfo(
            SetDefaultPolicyVersionRequest setDefaultPolicyVersionRequest) throws ApiException {
        okhttp3.Call localVarCall =
                setDefaultPolicyVersionValidateBeforeCall(setDefaultPolicyVersionRequest, null);
        Type localVarReturnType = new TypeToken<SetDefaultPolicyVersionResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (asynchronously)
     *
     * @param setDefaultPolicyVersionRequest (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call setDefaultPolicyVersionAsync(
            SetDefaultPolicyVersionRequest setDefaultPolicyVersionRequest,
            final ApiCallback<SetDefaultPolicyVersionResponse> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                setDefaultPolicyVersionValidateBeforeCall(
                        setDefaultPolicyVersionRequest, _callback);
        Type localVarReturnType = new TypeToken<SetDefaultPolicyVersionResponse>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unlinkPolicy
     *
     * @param unlinkPolicyRequest (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call unlinkPolicyCall(
            UnlinkPolicyRequest unlinkPolicyRequest, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = unlinkPolicyRequest;

        // create path and map variables
        String localVarPath = "/UnlinkPolicy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"AWS4Auth", "ApiKeyAuth"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unlinkPolicyValidateBeforeCall(
            UnlinkPolicyRequest unlinkPolicyRequest, final ApiCallback _callback)
            throws ApiException {
        return unlinkPolicyCall(unlinkPolicyRequest, _callback);
    }

    /**
     * @param unlinkPolicyRequest (optional)
     * @return UnlinkPolicyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     * </table>
     */
    public UnlinkPolicyResponse unlinkPolicy(UnlinkPolicyRequest unlinkPolicyRequest)
            throws ApiException {
        ApiResponse<UnlinkPolicyResponse> localVarResp =
                unlinkPolicyWithHttpInfo(unlinkPolicyRequest);
        return localVarResp.getData();
    }

    /**
     * @param unlinkPolicyRequest (optional)
     * @return ApiResponse&lt;UnlinkPolicyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<UnlinkPolicyResponse> unlinkPolicyWithHttpInfo(
            UnlinkPolicyRequest unlinkPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = unlinkPolicyValidateBeforeCall(unlinkPolicyRequest, null);
        Type localVarReturnType = new TypeToken<UnlinkPolicyResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (asynchronously)
     *
     * @param unlinkPolicyRequest (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call unlinkPolicyAsync(
            UnlinkPolicyRequest unlinkPolicyRequest,
            final ApiCallback<UnlinkPolicyResponse> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = unlinkPolicyValidateBeforeCall(unlinkPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<UnlinkPolicyResponse>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
