/*
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> Throttling: To protect against overloads, the number of identical requests allowed in a given time period is limited.<br /> Brute force: To protect against brute force attacks, the number of failed authentication attempts in a given time period is limited.<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).<br /> # Authentication Schemes ### Access Key/Secret Key The main way to authenticate your requests to the OUTSCALE API is to use an access key and a secret key.<br /> The mechanism behind this is based on AWS Signature Version 4, whose technical implementation details are described in [Signature of API Requests](https://docs.outscale.com/en/userguide/Signature-of-API-Requests.html).<br /><br /> In practice, the way to specify your access key and secret key depends on the tool or SDK you want to use to interact with the API.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify your access key, secret key, and the Region of your account. > 2. You then specify the `--profile` option when executing OSC CLI commands. >  > For more information, see [Installing and Configuring OSC CLI](https://docs.outscale.com/en/userguide/Installing-and-Configuring-OSC-CLI.html).  See the code samples in each section of this documentation for specific examples in different programming languages.<br /> For more information about access keys, see [About Access Keys](https://docs.outscale.com/en/userguide/About-Access-Keys.html).  > If you try to sign requests with an invalid access key four times in a row, further authentication attempts will be prevented for 1 minute. This lockout time increases 1 minute every four failed attempts, for up to 10 minutes.  ### Login/Password For certain API actions, you can also use basic authentication with the login (email address) and password of your TINA account.<br /> This is useful only in special circumstances, for example if you do not know your access key/secret key and want to retrieve them programmatically.<br /> In most cases, however, you can use the Cockpit web interface to retrieve them.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify the Region of your account, but you leave the access key value and secret key value empty (`&quot;&quot;`). > 2. You then specify the `--profile`, `--authentication-method`, `--login`, and `--password` options when executing OSC CLI commands.  See the code samples in each section of this documentation for specific examples in different programming languages.  > If you try to sign requests with an invalid password four times in a row, further authentication attempts will be prevented for 1 minute. This lockout time increases 1 minute every four failed attempts, for up to 10 minutes.  ### No Authentication A few API actions do not require any authentication. They are indicated as such in this documentation.<br /> ### Other Security Mechanisms In parallel with the authentication schemes, you can add other security mechanisms to your OUTSCALE account, for example to restrict API requests by IP or other criteria.<br /> For more information, see [Managing Your API Accesses](https://docs.outscale.com/en/userguide/Managing-Your-API-Accesses.html).<br /> # Error Codes Reference You can learn more about errors returned by the API in the dedicated [errors page](api-errors.html).
 *
 * The version of the OpenAPI document: 1.29.3
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.github.outscale.osc_sdk_java.client.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.outscale.osc_sdk_java.client.JSON;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/** One or more filters. */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FiltersSnapshot {
    public static final String SERIALIZED_NAME_ACCOUNT_ALIASES = "AccountAliases";

    @SerializedName(SERIALIZED_NAME_ACCOUNT_ALIASES)
    private List<String> accountAliases = null;

    public static final String SERIALIZED_NAME_ACCOUNT_IDS = "AccountIds";

    @SerializedName(SERIALIZED_NAME_ACCOUNT_IDS)
    private List<String> accountIds = null;

    public static final String SERIALIZED_NAME_DESCRIPTIONS = "Descriptions";

    @SerializedName(SERIALIZED_NAME_DESCRIPTIONS)
    private List<String> descriptions = null;

    public static final String SERIALIZED_NAME_FROM_CREATION_DATE = "FromCreationDate";

    @SerializedName(SERIALIZED_NAME_FROM_CREATION_DATE)
    private OffsetDateTime fromCreationDate;

    public static final String SERIALIZED_NAME_PERMISSIONS_TO_CREATE_VOLUME_ACCOUNT_IDS =
            "PermissionsToCreateVolumeAccountIds";

    @SerializedName(SERIALIZED_NAME_PERMISSIONS_TO_CREATE_VOLUME_ACCOUNT_IDS)
    private List<String> permissionsToCreateVolumeAccountIds = null;

    public static final String SERIALIZED_NAME_PERMISSIONS_TO_CREATE_VOLUME_GLOBAL_PERMISSION =
            "PermissionsToCreateVolumeGlobalPermission";

    @SerializedName(SERIALIZED_NAME_PERMISSIONS_TO_CREATE_VOLUME_GLOBAL_PERMISSION)
    private Boolean permissionsToCreateVolumeGlobalPermission;

    public static final String SERIALIZED_NAME_PROGRESSES = "Progresses";

    @SerializedName(SERIALIZED_NAME_PROGRESSES)
    private List<Integer> progresses = null;

    public static final String SERIALIZED_NAME_SNAPSHOT_IDS = "SnapshotIds";

    @SerializedName(SERIALIZED_NAME_SNAPSHOT_IDS)
    private List<String> snapshotIds = null;

    public static final String SERIALIZED_NAME_STATES = "States";

    @SerializedName(SERIALIZED_NAME_STATES)
    private List<String> states = null;

    public static final String SERIALIZED_NAME_TAG_KEYS = "TagKeys";

    @SerializedName(SERIALIZED_NAME_TAG_KEYS)
    private List<String> tagKeys = null;

    public static final String SERIALIZED_NAME_TAG_VALUES = "TagValues";

    @SerializedName(SERIALIZED_NAME_TAG_VALUES)
    private List<String> tagValues = null;

    public static final String SERIALIZED_NAME_TAGS = "Tags";

    @SerializedName(SERIALIZED_NAME_TAGS)
    private List<String> tags = null;

    public static final String SERIALIZED_NAME_TO_CREATION_DATE = "ToCreationDate";

    @SerializedName(SERIALIZED_NAME_TO_CREATION_DATE)
    private OffsetDateTime toCreationDate;

    public static final String SERIALIZED_NAME_VOLUME_IDS = "VolumeIds";

    @SerializedName(SERIALIZED_NAME_VOLUME_IDS)
    private List<String> volumeIds = null;

    public static final String SERIALIZED_NAME_VOLUME_SIZES = "VolumeSizes";

    @SerializedName(SERIALIZED_NAME_VOLUME_SIZES)
    private List<Integer> volumeSizes = null;

    public FiltersSnapshot() {}

    public FiltersSnapshot accountAliases(List<String> accountAliases) {

        this.accountAliases = accountAliases;
        return this;
    }

    public FiltersSnapshot addAccountAliasesItem(String accountAliasesItem) {
        if (this.accountAliases == null) {
            this.accountAliases = new ArrayList<>();
        }
        this.accountAliases.add(accountAliasesItem);
        return this;
    }

    /**
     * The account aliases of the owners of the snapshots.
     *
     * @return accountAliases
     */
    @javax.annotation.Nullable
    public List<String> getAccountAliases() {
        return accountAliases;
    }

    public void setAccountAliases(List<String> accountAliases) {
        this.accountAliases = accountAliases;
    }

    public FiltersSnapshot accountIds(List<String> accountIds) {

        this.accountIds = accountIds;
        return this;
    }

    public FiltersSnapshot addAccountIdsItem(String accountIdsItem) {
        if (this.accountIds == null) {
            this.accountIds = new ArrayList<>();
        }
        this.accountIds.add(accountIdsItem);
        return this;
    }

    /**
     * The account IDs of the owners of the snapshots.
     *
     * @return accountIds
     */
    @javax.annotation.Nullable
    public List<String> getAccountIds() {
        return accountIds;
    }

    public void setAccountIds(List<String> accountIds) {
        this.accountIds = accountIds;
    }

    public FiltersSnapshot descriptions(List<String> descriptions) {

        this.descriptions = descriptions;
        return this;
    }

    public FiltersSnapshot addDescriptionsItem(String descriptionsItem) {
        if (this.descriptions == null) {
            this.descriptions = new ArrayList<>();
        }
        this.descriptions.add(descriptionsItem);
        return this;
    }

    /**
     * The descriptions of the snapshots.
     *
     * @return descriptions
     */
    @javax.annotation.Nullable
    public List<String> getDescriptions() {
        return descriptions;
    }

    public void setDescriptions(List<String> descriptions) {
        this.descriptions = descriptions;
    }

    public FiltersSnapshot fromCreationDate(OffsetDateTime fromCreationDate) {

        this.fromCreationDate = fromCreationDate;
        return this;
    }

    /**
     * The beginning of the time period, in ISO 8601 date-time format (for example,
     * &#x60;2020-06-14T00:00:00.000Z&#x60;).
     *
     * @return fromCreationDate
     */
    @javax.annotation.Nullable
    public OffsetDateTime getFromCreationDate() {
        return fromCreationDate;
    }

    public void setFromCreationDate(OffsetDateTime fromCreationDate) {
        this.fromCreationDate = fromCreationDate;
    }

    public FiltersSnapshot permissionsToCreateVolumeAccountIds(
            List<String> permissionsToCreateVolumeAccountIds) {

        this.permissionsToCreateVolumeAccountIds = permissionsToCreateVolumeAccountIds;
        return this;
    }

    public FiltersSnapshot addPermissionsToCreateVolumeAccountIdsItem(
            String permissionsToCreateVolumeAccountIdsItem) {
        if (this.permissionsToCreateVolumeAccountIds == null) {
            this.permissionsToCreateVolumeAccountIds = new ArrayList<>();
        }
        this.permissionsToCreateVolumeAccountIds.add(permissionsToCreateVolumeAccountIdsItem);
        return this;
    }

    /**
     * The account IDs which have permissions to create volumes.
     *
     * @return permissionsToCreateVolumeAccountIds
     */
    @javax.annotation.Nullable
    public List<String> getPermissionsToCreateVolumeAccountIds() {
        return permissionsToCreateVolumeAccountIds;
    }

    public void setPermissionsToCreateVolumeAccountIds(
            List<String> permissionsToCreateVolumeAccountIds) {
        this.permissionsToCreateVolumeAccountIds = permissionsToCreateVolumeAccountIds;
    }

    public FiltersSnapshot permissionsToCreateVolumeGlobalPermission(
            Boolean permissionsToCreateVolumeGlobalPermission) {

        this.permissionsToCreateVolumeGlobalPermission = permissionsToCreateVolumeGlobalPermission;
        return this;
    }

    /**
     * If true, lists all public volumes. If false, lists all private volumes.
     *
     * @return permissionsToCreateVolumeGlobalPermission
     */
    @javax.annotation.Nullable
    public Boolean getPermissionsToCreateVolumeGlobalPermission() {
        return permissionsToCreateVolumeGlobalPermission;
    }

    public void setPermissionsToCreateVolumeGlobalPermission(
            Boolean permissionsToCreateVolumeGlobalPermission) {
        this.permissionsToCreateVolumeGlobalPermission = permissionsToCreateVolumeGlobalPermission;
    }

    public FiltersSnapshot progresses(List<Integer> progresses) {

        this.progresses = progresses;
        return this;
    }

    public FiltersSnapshot addProgressesItem(Integer progressesItem) {
        if (this.progresses == null) {
            this.progresses = new ArrayList<>();
        }
        this.progresses.add(progressesItem);
        return this;
    }

    /**
     * The progresses of the snapshots, as a percentage.
     *
     * @return progresses
     */
    @javax.annotation.Nullable
    public List<Integer> getProgresses() {
        return progresses;
    }

    public void setProgresses(List<Integer> progresses) {
        this.progresses = progresses;
    }

    public FiltersSnapshot snapshotIds(List<String> snapshotIds) {

        this.snapshotIds = snapshotIds;
        return this;
    }

    public FiltersSnapshot addSnapshotIdsItem(String snapshotIdsItem) {
        if (this.snapshotIds == null) {
            this.snapshotIds = new ArrayList<>();
        }
        this.snapshotIds.add(snapshotIdsItem);
        return this;
    }

    /**
     * The IDs of the snapshots.
     *
     * @return snapshotIds
     */
    @javax.annotation.Nullable
    public List<String> getSnapshotIds() {
        return snapshotIds;
    }

    public void setSnapshotIds(List<String> snapshotIds) {
        this.snapshotIds = snapshotIds;
    }

    public FiltersSnapshot states(List<String> states) {

        this.states = states;
        return this;
    }

    public FiltersSnapshot addStatesItem(String statesItem) {
        if (this.states == null) {
            this.states = new ArrayList<>();
        }
        this.states.add(statesItem);
        return this;
    }

    /**
     * The states of the snapshots (&#x60;in-queue&#x60; \\| &#x60;pending&#x60; \\|
     * &#x60;completed&#x60; \\| &#x60;error&#x60; \\| &#x60;deleting&#x60;).
     *
     * @return states
     */
    @javax.annotation.Nullable
    public List<String> getStates() {
        return states;
    }

    public void setStates(List<String> states) {
        this.states = states;
    }

    public FiltersSnapshot tagKeys(List<String> tagKeys) {

        this.tagKeys = tagKeys;
        return this;
    }

    public FiltersSnapshot addTagKeysItem(String tagKeysItem) {
        if (this.tagKeys == null) {
            this.tagKeys = new ArrayList<>();
        }
        this.tagKeys.add(tagKeysItem);
        return this;
    }

    /**
     * The keys of the tags associated with the snapshots.
     *
     * @return tagKeys
     */
    @javax.annotation.Nullable
    public List<String> getTagKeys() {
        return tagKeys;
    }

    public void setTagKeys(List<String> tagKeys) {
        this.tagKeys = tagKeys;
    }

    public FiltersSnapshot tagValues(List<String> tagValues) {

        this.tagValues = tagValues;
        return this;
    }

    public FiltersSnapshot addTagValuesItem(String tagValuesItem) {
        if (this.tagValues == null) {
            this.tagValues = new ArrayList<>();
        }
        this.tagValues.add(tagValuesItem);
        return this;
    }

    /**
     * The values of the tags associated with the snapshots.
     *
     * @return tagValues
     */
    @javax.annotation.Nullable
    public List<String> getTagValues() {
        return tagValues;
    }

    public void setTagValues(List<String> tagValues) {
        this.tagValues = tagValues;
    }

    public FiltersSnapshot tags(List<String> tags) {

        this.tags = tags;
        return this;
    }

    public FiltersSnapshot addTagsItem(String tagsItem) {
        if (this.tags == null) {
            this.tags = new ArrayList<>();
        }
        this.tags.add(tagsItem);
        return this;
    }

    /**
     * The key/value combination of the tags associated with the snapshots, in the following format:
     * &amp;quot;Filters&amp;quot;:{&amp;quot;Tags&amp;quot;:[&amp;quot;TAGKEY&#x3D;TAGVALUE&amp;quot;]}.
     *
     * @return tags
     */
    @javax.annotation.Nullable
    public List<String> getTags() {
        return tags;
    }

    public void setTags(List<String> tags) {
        this.tags = tags;
    }

    public FiltersSnapshot toCreationDate(OffsetDateTime toCreationDate) {

        this.toCreationDate = toCreationDate;
        return this;
    }

    /**
     * The end of the time period, in ISO 8601 date-time format (for example,
     * &#x60;2020-06-30T00:00:00.000Z&#x60;).
     *
     * @return toCreationDate
     */
    @javax.annotation.Nullable
    public OffsetDateTime getToCreationDate() {
        return toCreationDate;
    }

    public void setToCreationDate(OffsetDateTime toCreationDate) {
        this.toCreationDate = toCreationDate;
    }

    public FiltersSnapshot volumeIds(List<String> volumeIds) {

        this.volumeIds = volumeIds;
        return this;
    }

    public FiltersSnapshot addVolumeIdsItem(String volumeIdsItem) {
        if (this.volumeIds == null) {
            this.volumeIds = new ArrayList<>();
        }
        this.volumeIds.add(volumeIdsItem);
        return this;
    }

    /**
     * The IDs of the volumes used to create the snapshots.
     *
     * @return volumeIds
     */
    @javax.annotation.Nullable
    public List<String> getVolumeIds() {
        return volumeIds;
    }

    public void setVolumeIds(List<String> volumeIds) {
        this.volumeIds = volumeIds;
    }

    public FiltersSnapshot volumeSizes(List<Integer> volumeSizes) {

        this.volumeSizes = volumeSizes;
        return this;
    }

    public FiltersSnapshot addVolumeSizesItem(Integer volumeSizesItem) {
        if (this.volumeSizes == null) {
            this.volumeSizes = new ArrayList<>();
        }
        this.volumeSizes.add(volumeSizesItem);
        return this;
    }

    /**
     * The sizes of the volumes used to create the snapshots, in gibibytes (GiB).
     *
     * @return volumeSizes
     */
    @javax.annotation.Nullable
    public List<Integer> getVolumeSizes() {
        return volumeSizes;
    }

    public void setVolumeSizes(List<Integer> volumeSizes) {
        this.volumeSizes = volumeSizes;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FiltersSnapshot filtersSnapshot = (FiltersSnapshot) o;
        return Objects.equals(this.accountAliases, filtersSnapshot.accountAliases)
                && Objects.equals(this.accountIds, filtersSnapshot.accountIds)
                && Objects.equals(this.descriptions, filtersSnapshot.descriptions)
                && Objects.equals(this.fromCreationDate, filtersSnapshot.fromCreationDate)
                && Objects.equals(
                        this.permissionsToCreateVolumeAccountIds,
                        filtersSnapshot.permissionsToCreateVolumeAccountIds)
                && Objects.equals(
                        this.permissionsToCreateVolumeGlobalPermission,
                        filtersSnapshot.permissionsToCreateVolumeGlobalPermission)
                && Objects.equals(this.progresses, filtersSnapshot.progresses)
                && Objects.equals(this.snapshotIds, filtersSnapshot.snapshotIds)
                && Objects.equals(this.states, filtersSnapshot.states)
                && Objects.equals(this.tagKeys, filtersSnapshot.tagKeys)
                && Objects.equals(this.tagValues, filtersSnapshot.tagValues)
                && Objects.equals(this.tags, filtersSnapshot.tags)
                && Objects.equals(this.toCreationDate, filtersSnapshot.toCreationDate)
                && Objects.equals(this.volumeIds, filtersSnapshot.volumeIds)
                && Objects.equals(this.volumeSizes, filtersSnapshot.volumeSizes);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                accountAliases,
                accountIds,
                descriptions,
                fromCreationDate,
                permissionsToCreateVolumeAccountIds,
                permissionsToCreateVolumeGlobalPermission,
                progresses,
                snapshotIds,
                states,
                tagKeys,
                tagValues,
                tags,
                toCreationDate,
                volumeIds,
                volumeSizes);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class FiltersSnapshot {\n");
        sb.append("    accountAliases: ").append(toIndentedString(accountAliases)).append("\n");
        sb.append("    accountIds: ").append(toIndentedString(accountIds)).append("\n");
        sb.append("    descriptions: ").append(toIndentedString(descriptions)).append("\n");
        sb.append("    fromCreationDate: ").append(toIndentedString(fromCreationDate)).append("\n");
        sb.append("    permissionsToCreateVolumeAccountIds: ")
                .append(toIndentedString(permissionsToCreateVolumeAccountIds))
                .append("\n");
        sb.append("    permissionsToCreateVolumeGlobalPermission: ")
                .append(toIndentedString(permissionsToCreateVolumeGlobalPermission))
                .append("\n");
        sb.append("    progresses: ").append(toIndentedString(progresses)).append("\n");
        sb.append("    snapshotIds: ").append(toIndentedString(snapshotIds)).append("\n");
        sb.append("    states: ").append(toIndentedString(states)).append("\n");
        sb.append("    tagKeys: ").append(toIndentedString(tagKeys)).append("\n");
        sb.append("    tagValues: ").append(toIndentedString(tagValues)).append("\n");
        sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
        sb.append("    toCreationDate: ").append(toIndentedString(toCreationDate)).append("\n");
        sb.append("    volumeIds: ").append(toIndentedString(volumeIds)).append("\n");
        sb.append("    volumeSizes: ").append(toIndentedString(volumeSizes)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("AccountAliases");
        openapiFields.add("AccountIds");
        openapiFields.add("Descriptions");
        openapiFields.add("FromCreationDate");
        openapiFields.add("PermissionsToCreateVolumeAccountIds");
        openapiFields.add("PermissionsToCreateVolumeGlobalPermission");
        openapiFields.add("Progresses");
        openapiFields.add("SnapshotIds");
        openapiFields.add("States");
        openapiFields.add("TagKeys");
        openapiFields.add("TagValues");
        openapiFields.add("Tags");
        openapiFields.add("ToCreationDate");
        openapiFields.add("VolumeIds");
        openapiFields.add("VolumeSizes");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to FiltersSnapshot
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!FiltersSnapshot.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in FiltersSnapshot is not found in the"
                                        + " empty JSON string",
                                FiltersSnapshot.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!FiltersSnapshot.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `FiltersSnapshot` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("AccountAliases") != null && !jsonObj.get("AccountAliases").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `AccountAliases` to be an array in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("AccountAliases").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("AccountIds") != null && !jsonObj.get("AccountIds").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `AccountIds` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("AccountIds").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("Descriptions") != null && !jsonObj.get("Descriptions").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `Descriptions` to be an array in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("Descriptions").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("PermissionsToCreateVolumeAccountIds") != null
                && !jsonObj.get("PermissionsToCreateVolumeAccountIds").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `PermissionsToCreateVolumeAccountIds` to be an"
                                    + " array in the JSON string but got `%s`",
                            jsonObj.get("PermissionsToCreateVolumeAccountIds").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("Progresses") != null && !jsonObj.get("Progresses").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `Progresses` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("Progresses").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("SnapshotIds") != null && !jsonObj.get("SnapshotIds").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `SnapshotIds` to be an array in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("SnapshotIds").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("States") != null && !jsonObj.get("States").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `States` to be an array in the JSON string but got"
                                    + " `%s`",
                            jsonObj.get("States").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("TagKeys") != null && !jsonObj.get("TagKeys").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `TagKeys` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("TagKeys").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("TagValues") != null && !jsonObj.get("TagValues").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `TagValues` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("TagValues").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `Tags` to be an array in the JSON string but got"
                                    + " `%s`",
                            jsonObj.get("Tags").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("VolumeIds") != null && !jsonObj.get("VolumeIds").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `VolumeIds` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("VolumeIds").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("VolumeSizes") != null && !jsonObj.get("VolumeSizes").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `VolumeSizes` to be an array in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("VolumeSizes").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!FiltersSnapshot.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'FiltersSnapshot' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<FiltersSnapshot> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(FiltersSnapshot.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<FiltersSnapshot>() {
                        @Override
                        public void write(JsonWriter out, FiltersSnapshot value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public FiltersSnapshot read(JsonReader in) throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of FiltersSnapshot given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of FiltersSnapshot
     * @throws IOException if the JSON string is invalid with respect to FiltersSnapshot
     */
    public static FiltersSnapshot fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, FiltersSnapshot.class);
    }

    /**
     * Convert an instance of FiltersSnapshot to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
