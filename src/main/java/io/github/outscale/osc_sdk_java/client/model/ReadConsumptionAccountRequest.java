/*
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> You can learn more about errors returned by the API in the dedicated [errors page](api/errors).<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).
 *
 * The version of the OpenAPI document: 1.23
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.outscale.osc_sdk_java.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.github.outscale.osc_sdk_java.client.JSON;

/**
 * ReadConsumptionAccountRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ReadConsumptionAccountRequest {
  public static final String SERIALIZED_NAME_DRY_RUN = "DryRun";
  @SerializedName(SERIALIZED_NAME_DRY_RUN)
  private Boolean dryRun;

  public static final String SERIALIZED_NAME_FROM_DATE = "FromDate";
  @SerializedName(SERIALIZED_NAME_FROM_DATE)
  private OffsetDateTime fromDate;

  public static final String SERIALIZED_NAME_OVERALL = "Overall";
  @SerializedName(SERIALIZED_NAME_OVERALL)
  private Boolean overall = false;

  public static final String SERIALIZED_NAME_TO_DATE = "ToDate";
  @SerializedName(SERIALIZED_NAME_TO_DATE)
  private OffsetDateTime toDate;

  public ReadConsumptionAccountRequest() {
  }

  public ReadConsumptionAccountRequest dryRun(Boolean dryRun) {
    
    this.dryRun = dryRun;
    return this;
  }

   /**
   * If true, checks whether you have the required permissions to perform the action.
   * @return dryRun
  **/
  @javax.annotation.Nullable

  public Boolean getDryRun() {
    return dryRun;
  }


  public void setDryRun(Boolean dryRun) {
    this.dryRun = dryRun;
  }


  public ReadConsumptionAccountRequest fromDate(OffsetDateTime fromDate) {
    
    this.fromDate = fromDate;
    return this;
  }

   /**
   * The beginning of the time period, in ISO 8601 date-time format (for example, &#x60;2017-06-14&#x60; or &#x60;2017-06-14T00:00:00Z&#x60;).
   * @return fromDate
  **/
  @javax.annotation.Nonnull

  public OffsetDateTime getFromDate() {
    return fromDate;
  }


  public void setFromDate(OffsetDateTime fromDate) {
    this.fromDate = fromDate;
  }


  public ReadConsumptionAccountRequest overall(Boolean overall) {
    
    this.overall = overall;
    return this;
  }

   /**
   * By default or if false, returns only the consumption of the specific account that sends this request. If true, returns either the overall consumption of your paying account and all linked accounts (if the account that sends this request is a paying account) or returns nothing (if the account that sends this request is a linked account).
   * @return overall
  **/
  @javax.annotation.Nullable

  public Boolean getOverall() {
    return overall;
  }


  public void setOverall(Boolean overall) {
    this.overall = overall;
  }


  public ReadConsumptionAccountRequest toDate(OffsetDateTime toDate) {
    
    this.toDate = toDate;
    return this;
  }

   /**
   * The end of the time period, in ISO 8601 date-time format (for example, &#x60;2017-06-30&#x60; or &#x60;2017-06-30T00:00:00Z&#x60;).
   * @return toDate
  **/
  @javax.annotation.Nonnull

  public OffsetDateTime getToDate() {
    return toDate;
  }


  public void setToDate(OffsetDateTime toDate) {
    this.toDate = toDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReadConsumptionAccountRequest readConsumptionAccountRequest = (ReadConsumptionAccountRequest) o;
    return Objects.equals(this.dryRun, readConsumptionAccountRequest.dryRun) &&
        Objects.equals(this.fromDate, readConsumptionAccountRequest.fromDate) &&
        Objects.equals(this.overall, readConsumptionAccountRequest.overall) &&
        Objects.equals(this.toDate, readConsumptionAccountRequest.toDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dryRun, fromDate, overall, toDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReadConsumptionAccountRequest {\n");
    sb.append("    dryRun: ").append(toIndentedString(dryRun)).append("\n");
    sb.append("    fromDate: ").append(toIndentedString(fromDate)).append("\n");
    sb.append("    overall: ").append(toIndentedString(overall)).append("\n");
    sb.append("    toDate: ").append(toIndentedString(toDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DryRun");
    openapiFields.add("FromDate");
    openapiFields.add("Overall");
    openapiFields.add("ToDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("FromDate");
    openapiRequiredFields.add("ToDate");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ReadConsumptionAccountRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ReadConsumptionAccountRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReadConsumptionAccountRequest is not found in the empty JSON string", ReadConsumptionAccountRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ReadConsumptionAccountRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReadConsumptionAccountRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ReadConsumptionAccountRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReadConsumptionAccountRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReadConsumptionAccountRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReadConsumptionAccountRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReadConsumptionAccountRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ReadConsumptionAccountRequest>() {
           @Override
           public void write(JsonWriter out, ReadConsumptionAccountRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReadConsumptionAccountRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReadConsumptionAccountRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReadConsumptionAccountRequest
  * @throws IOException if the JSON string is invalid with respect to ReadConsumptionAccountRequest
  */
  public static ReadConsumptionAccountRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReadConsumptionAccountRequest.class);
  }

 /**
  * Convert an instance of ReadConsumptionAccountRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

