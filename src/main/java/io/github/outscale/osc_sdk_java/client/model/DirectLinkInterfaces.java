/*
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> Throttling: To protect against overloads, the number of identical requests allowed in a given time period is limited.<br /> Brute force: To protect against brute force attacks, the number of failed authentication attempts in a given time period is limited.<br /><br /> You can learn more about errors returned by the API in the dedicated [errors page](api/errors).<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).<br /> # Authentication Schemes ### Access Key/Secret Key The main way to authenticate your requests to the OUTSCALE API is to use an access key and a secret key.<br /> The mechanism behind this is based on AWS Signature Version 4, whose technical implementation details are described in [Signature of API Requests](https://docs.outscale.com/en/userguide/Signature-of-API-Requests.html).<br /><br /> In practice, the way to specify your access key and secret key depends on the tool or SDK you want to use to interact with the API.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify your access key, secret key, and the Region of your account. > 2. You then specify the `--profile` option when executing OSC CLI commands. >  > For more information, see [Installing and Configuring OSC CLI](https://docs.outscale.com/en/userguide/Installing-and-Configuring-OSC-CLI.html).  See the code samples in each section of this documentation for specific examples in different programming languages.<br /> For more information about access keys, see [About Access Keys](https://docs.outscale.com/en/userguide/About-Access-Keys.html). ### Login/Password For certain API actions, you can also use basic authentication with the login (email address) and password of your TINA account.<br /> This is useful only in special circumstances, for example if you do not know your access key/secret key and want to retrieve them programmatically.<br /> In most cases, however, you can use the Cockpit web interface to retrieve them.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify the Region of your account, but you leave the access key value and secret key value empty (`&quot;&quot;`). > 2. You then specify the `--profile`, `--authentication-method`, `--login`, and `--password` options when executing OSC CLI commands.  See the code samples in each section of this documentation for specific examples in different programming languages. ### No Authentication A few API actions do not require any authentication. They are indicated as such in this documentation.<br /> ### Other Security Mechanisms In parallel with the authentication schemes, you can add other security mechanisms to your OUTSCALE account, for example to restrict API requests by IP or other criteria.<br /> For more information, see [Managing Your API Accesses](https://docs.outscale.com/en/userguide/Managing-Your-API-Accesses.html).
 *
 * The version of the OpenAPI document: 1.28.7
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.github.outscale.osc_sdk_java.client.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.outscale.osc_sdk_java.client.JSON;
import java.io.IOException;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/** Information about the DirectLink interfaces. */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class DirectLinkInterfaces {
    public static final String SERIALIZED_NAME_ACCOUNT_ID = "AccountId";

    @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
    private String accountId;

    public static final String SERIALIZED_NAME_BGP_ASN = "BgpAsn";

    @SerializedName(SERIALIZED_NAME_BGP_ASN)
    private Integer bgpAsn;

    public static final String SERIALIZED_NAME_BGP_KEY = "BgpKey";

    @SerializedName(SERIALIZED_NAME_BGP_KEY)
    private String bgpKey;

    public static final String SERIALIZED_NAME_CLIENT_PRIVATE_IP = "ClientPrivateIp";

    @SerializedName(SERIALIZED_NAME_CLIENT_PRIVATE_IP)
    private String clientPrivateIp;

    public static final String SERIALIZED_NAME_DIRECT_LINK_ID = "DirectLinkId";

    @SerializedName(SERIALIZED_NAME_DIRECT_LINK_ID)
    private String directLinkId;

    public static final String SERIALIZED_NAME_DIRECT_LINK_INTERFACE_ID = "DirectLinkInterfaceId";

    @SerializedName(SERIALIZED_NAME_DIRECT_LINK_INTERFACE_ID)
    private String directLinkInterfaceId;

    public static final String SERIALIZED_NAME_DIRECT_LINK_INTERFACE_NAME =
            "DirectLinkInterfaceName";

    @SerializedName(SERIALIZED_NAME_DIRECT_LINK_INTERFACE_NAME)
    private String directLinkInterfaceName;

    public static final String SERIALIZED_NAME_INTERFACE_TYPE = "InterfaceType";

    @SerializedName(SERIALIZED_NAME_INTERFACE_TYPE)
    private String interfaceType;

    public static final String SERIALIZED_NAME_LOCATION = "Location";

    @SerializedName(SERIALIZED_NAME_LOCATION)
    private String location;

    public static final String SERIALIZED_NAME_MTU = "Mtu";

    @SerializedName(SERIALIZED_NAME_MTU)
    private Integer mtu;

    public static final String SERIALIZED_NAME_OUTSCALE_PRIVATE_IP = "OutscalePrivateIp";

    @SerializedName(SERIALIZED_NAME_OUTSCALE_PRIVATE_IP)
    private String outscalePrivateIp;

    public static final String SERIALIZED_NAME_STATE = "State";

    @SerializedName(SERIALIZED_NAME_STATE)
    private String state;

    public static final String SERIALIZED_NAME_VIRTUAL_GATEWAY_ID = "VirtualGatewayId";

    @SerializedName(SERIALIZED_NAME_VIRTUAL_GATEWAY_ID)
    private String virtualGatewayId;

    public static final String SERIALIZED_NAME_VLAN = "Vlan";

    @SerializedName(SERIALIZED_NAME_VLAN)
    private Integer vlan;

    public DirectLinkInterfaces() {}

    public DirectLinkInterfaces accountId(String accountId) {

        this.accountId = accountId;
        return this;
    }

    /**
     * The account ID of the owner of the DirectLink interface.
     *
     * @return accountId
     */
    @javax.annotation.Nullable
    public String getAccountId() {
        return accountId;
    }

    public void setAccountId(String accountId) {
        this.accountId = accountId;
    }

    public DirectLinkInterfaces bgpAsn(Integer bgpAsn) {

        this.bgpAsn = bgpAsn;
        return this;
    }

    /**
     * The BGP (Border Gateway Protocol) ASN (Autonomous System Number) on the customer&#39;s side
     * of the DirectLink interface.
     *
     * @return bgpAsn
     */
    @javax.annotation.Nullable
    public Integer getBgpAsn() {
        return bgpAsn;
    }

    public void setBgpAsn(Integer bgpAsn) {
        this.bgpAsn = bgpAsn;
    }

    public DirectLinkInterfaces bgpKey(String bgpKey) {

        this.bgpKey = bgpKey;
        return this;
    }

    /**
     * The BGP authentication key.
     *
     * @return bgpKey
     */
    @javax.annotation.Nullable
    public String getBgpKey() {
        return bgpKey;
    }

    public void setBgpKey(String bgpKey) {
        this.bgpKey = bgpKey;
    }

    public DirectLinkInterfaces clientPrivateIp(String clientPrivateIp) {

        this.clientPrivateIp = clientPrivateIp;
        return this;
    }

    /**
     * The IP on the customer&#39;s side of the DirectLink interface.
     *
     * @return clientPrivateIp
     */
    @javax.annotation.Nullable
    public String getClientPrivateIp() {
        return clientPrivateIp;
    }

    public void setClientPrivateIp(String clientPrivateIp) {
        this.clientPrivateIp = clientPrivateIp;
    }

    public DirectLinkInterfaces directLinkId(String directLinkId) {

        this.directLinkId = directLinkId;
        return this;
    }

    /**
     * The ID of the DirectLink.
     *
     * @return directLinkId
     */
    @javax.annotation.Nullable
    public String getDirectLinkId() {
        return directLinkId;
    }

    public void setDirectLinkId(String directLinkId) {
        this.directLinkId = directLinkId;
    }

    public DirectLinkInterfaces directLinkInterfaceId(String directLinkInterfaceId) {

        this.directLinkInterfaceId = directLinkInterfaceId;
        return this;
    }

    /**
     * The ID of the DirectLink interface.
     *
     * @return directLinkInterfaceId
     */
    @javax.annotation.Nullable
    public String getDirectLinkInterfaceId() {
        return directLinkInterfaceId;
    }

    public void setDirectLinkInterfaceId(String directLinkInterfaceId) {
        this.directLinkInterfaceId = directLinkInterfaceId;
    }

    public DirectLinkInterfaces directLinkInterfaceName(String directLinkInterfaceName) {

        this.directLinkInterfaceName = directLinkInterfaceName;
        return this;
    }

    /**
     * The name of the DirectLink interface.
     *
     * @return directLinkInterfaceName
     */
    @javax.annotation.Nullable
    public String getDirectLinkInterfaceName() {
        return directLinkInterfaceName;
    }

    public void setDirectLinkInterfaceName(String directLinkInterfaceName) {
        this.directLinkInterfaceName = directLinkInterfaceName;
    }

    public DirectLinkInterfaces interfaceType(String interfaceType) {

        this.interfaceType = interfaceType;
        return this;
    }

    /**
     * The type of the DirectLink interface (always &#x60;private&#x60;).
     *
     * @return interfaceType
     */
    @javax.annotation.Nullable
    public String getInterfaceType() {
        return interfaceType;
    }

    public void setInterfaceType(String interfaceType) {
        this.interfaceType = interfaceType;
    }

    public DirectLinkInterfaces location(String location) {

        this.location = location;
        return this;
    }

    /**
     * The datacenter where the DirectLink interface is located.
     *
     * @return location
     */
    @javax.annotation.Nullable
    public String getLocation() {
        return location;
    }

    public void setLocation(String location) {
        this.location = location;
    }

    public DirectLinkInterfaces mtu(Integer mtu) {

        this.mtu = mtu;
        return this;
    }

    /**
     * The maximum transmission unit (MTU) of the DirectLink interface, in bytes (always
     * &#x60;1500&#x60;).
     *
     * @return mtu
     */
    @javax.annotation.Nullable
    public Integer getMtu() {
        return mtu;
    }

    public void setMtu(Integer mtu) {
        this.mtu = mtu;
    }

    public DirectLinkInterfaces outscalePrivateIp(String outscalePrivateIp) {

        this.outscalePrivateIp = outscalePrivateIp;
        return this;
    }

    /**
     * The IP on the OUTSCALE side of the DirectLink interface.
     *
     * @return outscalePrivateIp
     */
    @javax.annotation.Nullable
    public String getOutscalePrivateIp() {
        return outscalePrivateIp;
    }

    public void setOutscalePrivateIp(String outscalePrivateIp) {
        this.outscalePrivateIp = outscalePrivateIp;
    }

    public DirectLinkInterfaces state(String state) {

        this.state = state;
        return this;
    }

    /**
     * The state of the DirectLink interface (&#x60;pending&#x60; \\| &#x60;available&#x60; \\|
     * &#x60;deleting&#x60; \\| &#x60;deleted&#x60; \\| &#x60;confirming&#x60; \\|
     * &#x60;rejected&#x60; \\| &#x60;expired&#x60;).
     *
     * @return state
     */
    @javax.annotation.Nullable
    public String getState() {
        return state;
    }

    public void setState(String state) {
        this.state = state;
    }

    public DirectLinkInterfaces virtualGatewayId(String virtualGatewayId) {

        this.virtualGatewayId = virtualGatewayId;
        return this;
    }

    /**
     * The ID of the target virtual gateway.
     *
     * @return virtualGatewayId
     */
    @javax.annotation.Nullable
    public String getVirtualGatewayId() {
        return virtualGatewayId;
    }

    public void setVirtualGatewayId(String virtualGatewayId) {
        this.virtualGatewayId = virtualGatewayId;
    }

    public DirectLinkInterfaces vlan(Integer vlan) {

        this.vlan = vlan;
        return this;
    }

    /**
     * The VLAN number associated with the DirectLink interface.
     *
     * @return vlan
     */
    @javax.annotation.Nullable
    public Integer getVlan() {
        return vlan;
    }

    public void setVlan(Integer vlan) {
        this.vlan = vlan;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DirectLinkInterfaces directLinkInterfaces = (DirectLinkInterfaces) o;
        return Objects.equals(this.accountId, directLinkInterfaces.accountId)
                && Objects.equals(this.bgpAsn, directLinkInterfaces.bgpAsn)
                && Objects.equals(this.bgpKey, directLinkInterfaces.bgpKey)
                && Objects.equals(this.clientPrivateIp, directLinkInterfaces.clientPrivateIp)
                && Objects.equals(this.directLinkId, directLinkInterfaces.directLinkId)
                && Objects.equals(
                        this.directLinkInterfaceId, directLinkInterfaces.directLinkInterfaceId)
                && Objects.equals(
                        this.directLinkInterfaceName, directLinkInterfaces.directLinkInterfaceName)
                && Objects.equals(this.interfaceType, directLinkInterfaces.interfaceType)
                && Objects.equals(this.location, directLinkInterfaces.location)
                && Objects.equals(this.mtu, directLinkInterfaces.mtu)
                && Objects.equals(this.outscalePrivateIp, directLinkInterfaces.outscalePrivateIp)
                && Objects.equals(this.state, directLinkInterfaces.state)
                && Objects.equals(this.virtualGatewayId, directLinkInterfaces.virtualGatewayId)
                && Objects.equals(this.vlan, directLinkInterfaces.vlan);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                accountId,
                bgpAsn,
                bgpKey,
                clientPrivateIp,
                directLinkId,
                directLinkInterfaceId,
                directLinkInterfaceName,
                interfaceType,
                location,
                mtu,
                outscalePrivateIp,
                state,
                virtualGatewayId,
                vlan);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class DirectLinkInterfaces {\n");
        sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
        sb.append("    bgpAsn: ").append(toIndentedString(bgpAsn)).append("\n");
        sb.append("    bgpKey: ").append(toIndentedString(bgpKey)).append("\n");
        sb.append("    clientPrivateIp: ").append(toIndentedString(clientPrivateIp)).append("\n");
        sb.append("    directLinkId: ").append(toIndentedString(directLinkId)).append("\n");
        sb.append("    directLinkInterfaceId: ")
                .append(toIndentedString(directLinkInterfaceId))
                .append("\n");
        sb.append("    directLinkInterfaceName: ")
                .append(toIndentedString(directLinkInterfaceName))
                .append("\n");
        sb.append("    interfaceType: ").append(toIndentedString(interfaceType)).append("\n");
        sb.append("    location: ").append(toIndentedString(location)).append("\n");
        sb.append("    mtu: ").append(toIndentedString(mtu)).append("\n");
        sb.append("    outscalePrivateIp: ")
                .append(toIndentedString(outscalePrivateIp))
                .append("\n");
        sb.append("    state: ").append(toIndentedString(state)).append("\n");
        sb.append("    virtualGatewayId: ").append(toIndentedString(virtualGatewayId)).append("\n");
        sb.append("    vlan: ").append(toIndentedString(vlan)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("AccountId");
        openapiFields.add("BgpAsn");
        openapiFields.add("BgpKey");
        openapiFields.add("ClientPrivateIp");
        openapiFields.add("DirectLinkId");
        openapiFields.add("DirectLinkInterfaceId");
        openapiFields.add("DirectLinkInterfaceName");
        openapiFields.add("InterfaceType");
        openapiFields.add("Location");
        openapiFields.add("Mtu");
        openapiFields.add("OutscalePrivateIp");
        openapiFields.add("State");
        openapiFields.add("VirtualGatewayId");
        openapiFields.add("Vlan");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to DirectLinkInterfaces
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!DirectLinkInterfaces.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in DirectLinkInterfaces is not found in"
                                        + " the empty JSON string",
                                DirectLinkInterfaces.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!DirectLinkInterfaces.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `DirectLinkInterfaces` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }
        if ((jsonObj.get("AccountId") != null && !jsonObj.get("AccountId").isJsonNull())
                && !jsonObj.get("AccountId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `AccountId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("AccountId").toString()));
        }
        if ((jsonObj.get("BgpKey") != null && !jsonObj.get("BgpKey").isJsonNull())
                && !jsonObj.get("BgpKey").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `BgpKey` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("BgpKey").toString()));
        }
        if ((jsonObj.get("ClientPrivateIp") != null && !jsonObj.get("ClientPrivateIp").isJsonNull())
                && !jsonObj.get("ClientPrivateIp").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `ClientPrivateIp` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("ClientPrivateIp").toString()));
        }
        if ((jsonObj.get("DirectLinkId") != null && !jsonObj.get("DirectLinkId").isJsonNull())
                && !jsonObj.get("DirectLinkId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `DirectLinkId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("DirectLinkId").toString()));
        }
        if ((jsonObj.get("DirectLinkInterfaceId") != null
                        && !jsonObj.get("DirectLinkInterfaceId").isJsonNull())
                && !jsonObj.get("DirectLinkInterfaceId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `DirectLinkInterfaceId` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("DirectLinkInterfaceId").toString()));
        }
        if ((jsonObj.get("DirectLinkInterfaceName") != null
                        && !jsonObj.get("DirectLinkInterfaceName").isJsonNull())
                && !jsonObj.get("DirectLinkInterfaceName").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `DirectLinkInterfaceName` to be a primitive type"
                                    + " in the JSON string but got `%s`",
                            jsonObj.get("DirectLinkInterfaceName").toString()));
        }
        if ((jsonObj.get("InterfaceType") != null && !jsonObj.get("InterfaceType").isJsonNull())
                && !jsonObj.get("InterfaceType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `InterfaceType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("InterfaceType").toString()));
        }
        if ((jsonObj.get("Location") != null && !jsonObj.get("Location").isJsonNull())
                && !jsonObj.get("Location").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `Location` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("Location").toString()));
        }
        if ((jsonObj.get("OutscalePrivateIp") != null
                        && !jsonObj.get("OutscalePrivateIp").isJsonNull())
                && !jsonObj.get("OutscalePrivateIp").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `OutscalePrivateIp` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("OutscalePrivateIp").toString()));
        }
        if ((jsonObj.get("State") != null && !jsonObj.get("State").isJsonNull())
                && !jsonObj.get("State").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `State` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("State").toString()));
        }
        if ((jsonObj.get("VirtualGatewayId") != null
                        && !jsonObj.get("VirtualGatewayId").isJsonNull())
                && !jsonObj.get("VirtualGatewayId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `VirtualGatewayId` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("VirtualGatewayId").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!DirectLinkInterfaces.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'DirectLinkInterfaces' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<DirectLinkInterfaces> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(DirectLinkInterfaces.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<DirectLinkInterfaces>() {
                        @Override
                        public void write(JsonWriter out, DirectLinkInterfaces value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public DirectLinkInterfaces read(JsonReader in) throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of DirectLinkInterfaces given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of DirectLinkInterfaces
     * @throws IOException if the JSON string is invalid with respect to DirectLinkInterfaces
     */
    public static DirectLinkInterfaces fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, DirectLinkInterfaces.class);
    }

    /**
     * Convert an instance of DirectLinkInterfaces to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
