/*
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> You can learn more about errors returned by the API in the dedicated [errors page](api/errors).<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).
 *
 * The version of the OpenAPI document: 1.26
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.github.outscale.osc_sdk_java.client.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.outscale.osc_sdk_java.client.JSON;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/** One or more filters. */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FiltersClientGateway {
    public static final String SERIALIZED_NAME_BGP_ASNS = "BgpAsns";

    @SerializedName(SERIALIZED_NAME_BGP_ASNS)
    private List<Integer> bgpAsns = null;

    public static final String SERIALIZED_NAME_CLIENT_GATEWAY_IDS = "ClientGatewayIds";

    @SerializedName(SERIALIZED_NAME_CLIENT_GATEWAY_IDS)
    private List<String> clientGatewayIds = null;

    public static final String SERIALIZED_NAME_CONNECTION_TYPES = "ConnectionTypes";

    @SerializedName(SERIALIZED_NAME_CONNECTION_TYPES)
    private List<String> connectionTypes = null;

    public static final String SERIALIZED_NAME_PUBLIC_IPS = "PublicIps";

    @SerializedName(SERIALIZED_NAME_PUBLIC_IPS)
    private List<String> publicIps = null;

    public static final String SERIALIZED_NAME_STATES = "States";

    @SerializedName(SERIALIZED_NAME_STATES)
    private List<String> states = null;

    public static final String SERIALIZED_NAME_TAG_KEYS = "TagKeys";

    @SerializedName(SERIALIZED_NAME_TAG_KEYS)
    private List<String> tagKeys = null;

    public static final String SERIALIZED_NAME_TAG_VALUES = "TagValues";

    @SerializedName(SERIALIZED_NAME_TAG_VALUES)
    private List<String> tagValues = null;

    public static final String SERIALIZED_NAME_TAGS = "Tags";

    @SerializedName(SERIALIZED_NAME_TAGS)
    private List<String> tags = null;

    public FiltersClientGateway() {}

    public FiltersClientGateway bgpAsns(List<Integer> bgpAsns) {

        this.bgpAsns = bgpAsns;
        return this;
    }

    public FiltersClientGateway addBgpAsnsItem(Integer bgpAsnsItem) {
        if (this.bgpAsns == null) {
            this.bgpAsns = new ArrayList<>();
        }
        this.bgpAsns.add(bgpAsnsItem);
        return this;
    }

    /**
     * The Border Gateway Protocol (BGP) Autonomous System Numbers (ASNs) of the connections.
     *
     * @return bgpAsns
     */
    @javax.annotation.Nullable
    public List<Integer> getBgpAsns() {
        return bgpAsns;
    }

    public void setBgpAsns(List<Integer> bgpAsns) {
        this.bgpAsns = bgpAsns;
    }

    public FiltersClientGateway clientGatewayIds(List<String> clientGatewayIds) {

        this.clientGatewayIds = clientGatewayIds;
        return this;
    }

    public FiltersClientGateway addClientGatewayIdsItem(String clientGatewayIdsItem) {
        if (this.clientGatewayIds == null) {
            this.clientGatewayIds = new ArrayList<>();
        }
        this.clientGatewayIds.add(clientGatewayIdsItem);
        return this;
    }

    /**
     * The IDs of the client gateways.
     *
     * @return clientGatewayIds
     */
    @javax.annotation.Nullable
    public List<String> getClientGatewayIds() {
        return clientGatewayIds;
    }

    public void setClientGatewayIds(List<String> clientGatewayIds) {
        this.clientGatewayIds = clientGatewayIds;
    }

    public FiltersClientGateway connectionTypes(List<String> connectionTypes) {

        this.connectionTypes = connectionTypes;
        return this;
    }

    public FiltersClientGateway addConnectionTypesItem(String connectionTypesItem) {
        if (this.connectionTypes == null) {
            this.connectionTypes = new ArrayList<>();
        }
        this.connectionTypes.add(connectionTypesItem);
        return this;
    }

    /**
     * The types of communication tunnels used by the client gateways (only &#x60;ipsec.1&#x60; is
     * supported).
     *
     * @return connectionTypes
     */
    @javax.annotation.Nullable
    public List<String> getConnectionTypes() {
        return connectionTypes;
    }

    public void setConnectionTypes(List<String> connectionTypes) {
        this.connectionTypes = connectionTypes;
    }

    public FiltersClientGateway publicIps(List<String> publicIps) {

        this.publicIps = publicIps;
        return this;
    }

    public FiltersClientGateway addPublicIpsItem(String publicIpsItem) {
        if (this.publicIps == null) {
            this.publicIps = new ArrayList<>();
        }
        this.publicIps.add(publicIpsItem);
        return this;
    }

    /**
     * The public IPv4 addresses of the client gateways.
     *
     * @return publicIps
     */
    @javax.annotation.Nullable
    public List<String> getPublicIps() {
        return publicIps;
    }

    public void setPublicIps(List<String> publicIps) {
        this.publicIps = publicIps;
    }

    public FiltersClientGateway states(List<String> states) {

        this.states = states;
        return this;
    }

    public FiltersClientGateway addStatesItem(String statesItem) {
        if (this.states == null) {
            this.states = new ArrayList<>();
        }
        this.states.add(statesItem);
        return this;
    }

    /**
     * The states of the client gateways (&#x60;pending&#x60; \\| &#x60;available&#x60; \\|
     * &#x60;deleting&#x60; \\| &#x60;deleted&#x60;).
     *
     * @return states
     */
    @javax.annotation.Nullable
    public List<String> getStates() {
        return states;
    }

    public void setStates(List<String> states) {
        this.states = states;
    }

    public FiltersClientGateway tagKeys(List<String> tagKeys) {

        this.tagKeys = tagKeys;
        return this;
    }

    public FiltersClientGateway addTagKeysItem(String tagKeysItem) {
        if (this.tagKeys == null) {
            this.tagKeys = new ArrayList<>();
        }
        this.tagKeys.add(tagKeysItem);
        return this;
    }

    /**
     * The keys of the tags associated with the client gateways.
     *
     * @return tagKeys
     */
    @javax.annotation.Nullable
    public List<String> getTagKeys() {
        return tagKeys;
    }

    public void setTagKeys(List<String> tagKeys) {
        this.tagKeys = tagKeys;
    }

    public FiltersClientGateway tagValues(List<String> tagValues) {

        this.tagValues = tagValues;
        return this;
    }

    public FiltersClientGateway addTagValuesItem(String tagValuesItem) {
        if (this.tagValues == null) {
            this.tagValues = new ArrayList<>();
        }
        this.tagValues.add(tagValuesItem);
        return this;
    }

    /**
     * The values of the tags associated with the client gateways.
     *
     * @return tagValues
     */
    @javax.annotation.Nullable
    public List<String> getTagValues() {
        return tagValues;
    }

    public void setTagValues(List<String> tagValues) {
        this.tagValues = tagValues;
    }

    public FiltersClientGateway tags(List<String> tags) {

        this.tags = tags;
        return this;
    }

    public FiltersClientGateway addTagsItem(String tagsItem) {
        if (this.tags == null) {
            this.tags = new ArrayList<>();
        }
        this.tags.add(tagsItem);
        return this;
    }

    /**
     * The key/value combination of the tags associated with the client gateways, in the following
     * format:
     * &amp;quot;Filters&amp;quot;:{&amp;quot;Tags&amp;quot;:[&amp;quot;TAGKEY&#x3D;TAGVALUE&amp;quot;]}.
     *
     * @return tags
     */
    @javax.annotation.Nullable
    public List<String> getTags() {
        return tags;
    }

    public void setTags(List<String> tags) {
        this.tags = tags;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FiltersClientGateway filtersClientGateway = (FiltersClientGateway) o;
        return Objects.equals(this.bgpAsns, filtersClientGateway.bgpAsns)
                && Objects.equals(this.clientGatewayIds, filtersClientGateway.clientGatewayIds)
                && Objects.equals(this.connectionTypes, filtersClientGateway.connectionTypes)
                && Objects.equals(this.publicIps, filtersClientGateway.publicIps)
                && Objects.equals(this.states, filtersClientGateway.states)
                && Objects.equals(this.tagKeys, filtersClientGateway.tagKeys)
                && Objects.equals(this.tagValues, filtersClientGateway.tagValues)
                && Objects.equals(this.tags, filtersClientGateway.tags);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                bgpAsns,
                clientGatewayIds,
                connectionTypes,
                publicIps,
                states,
                tagKeys,
                tagValues,
                tags);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class FiltersClientGateway {\n");
        sb.append("    bgpAsns: ").append(toIndentedString(bgpAsns)).append("\n");
        sb.append("    clientGatewayIds: ").append(toIndentedString(clientGatewayIds)).append("\n");
        sb.append("    connectionTypes: ").append(toIndentedString(connectionTypes)).append("\n");
        sb.append("    publicIps: ").append(toIndentedString(publicIps)).append("\n");
        sb.append("    states: ").append(toIndentedString(states)).append("\n");
        sb.append("    tagKeys: ").append(toIndentedString(tagKeys)).append("\n");
        sb.append("    tagValues: ").append(toIndentedString(tagValues)).append("\n");
        sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("BgpAsns");
        openapiFields.add("ClientGatewayIds");
        openapiFields.add("ConnectionTypes");
        openapiFields.add("PublicIps");
        openapiFields.add("States");
        openapiFields.add("TagKeys");
        openapiFields.add("TagValues");
        openapiFields.add("Tags");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to FiltersClientGateway
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!FiltersClientGateway.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in FiltersClientGateway is not found in"
                                        + " the empty JSON string",
                                FiltersClientGateway.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!FiltersClientGateway.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `FiltersClientGateway` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("BgpAsns") != null && !jsonObj.get("BgpAsns").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `BgpAsns` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("BgpAsns").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("ClientGatewayIds") != null
                && !jsonObj.get("ClientGatewayIds").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `ClientGatewayIds` to be an array in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("ClientGatewayIds").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("ConnectionTypes") != null
                && !jsonObj.get("ConnectionTypes").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `ConnectionTypes` to be an array in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("ConnectionTypes").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("PublicIps") != null && !jsonObj.get("PublicIps").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `PublicIps` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("PublicIps").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("States") != null && !jsonObj.get("States").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `States` to be an array in the JSON string but got"
                                    + " `%s`",
                            jsonObj.get("States").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("TagKeys") != null && !jsonObj.get("TagKeys").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `TagKeys` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("TagKeys").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("TagValues") != null && !jsonObj.get("TagValues").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `TagValues` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("TagValues").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `Tags` to be an array in the JSON string but got"
                                    + " `%s`",
                            jsonObj.get("Tags").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!FiltersClientGateway.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'FiltersClientGateway' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<FiltersClientGateway> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(FiltersClientGateway.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<FiltersClientGateway>() {
                        @Override
                        public void write(JsonWriter out, FiltersClientGateway value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public FiltersClientGateway read(JsonReader in) throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of FiltersClientGateway given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of FiltersClientGateway
     * @throws IOException if the JSON string is invalid with respect to FiltersClientGateway
     */
    public static FiltersClientGateway fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, FiltersClientGateway.class);
    }

    /**
     * Convert an instance of FiltersClientGateway to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
