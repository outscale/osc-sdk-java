/*
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> You can learn more about errors returned by the API in the dedicated [errors page](api/errors).<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).
 *
 * The version of the OpenAPI document: 1.23
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.github.outscale.osc_sdk_java.client.model;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.outscale.osc_sdk_java.client.JSON;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/** Information about the NIC. */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Nic {
    public static final String SERIALIZED_NAME_ACCOUNT_ID = "AccountId";

    @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
    private String accountId;

    public static final String SERIALIZED_NAME_DESCRIPTION = "Description";

    @SerializedName(SERIALIZED_NAME_DESCRIPTION)
    private String description;

    public static final String SERIALIZED_NAME_IS_SOURCE_DEST_CHECKED = "IsSourceDestChecked";

    @SerializedName(SERIALIZED_NAME_IS_SOURCE_DEST_CHECKED)
    private Boolean isSourceDestChecked;

    public static final String SERIALIZED_NAME_LINK_NIC = "LinkNic";

    @SerializedName(SERIALIZED_NAME_LINK_NIC)
    private LinkNic linkNic;

    public static final String SERIALIZED_NAME_LINK_PUBLIC_IP = "LinkPublicIp";

    @SerializedName(SERIALIZED_NAME_LINK_PUBLIC_IP)
    private LinkPublicIp linkPublicIp;

    public static final String SERIALIZED_NAME_MAC_ADDRESS = "MacAddress";

    @SerializedName(SERIALIZED_NAME_MAC_ADDRESS)
    private String macAddress;

    public static final String SERIALIZED_NAME_NET_ID = "NetId";

    @SerializedName(SERIALIZED_NAME_NET_ID)
    private String netId;

    public static final String SERIALIZED_NAME_NIC_ID = "NicId";

    @SerializedName(SERIALIZED_NAME_NIC_ID)
    private String nicId;

    public static final String SERIALIZED_NAME_PRIVATE_DNS_NAME = "PrivateDnsName";

    @SerializedName(SERIALIZED_NAME_PRIVATE_DNS_NAME)
    private String privateDnsName;

    public static final String SERIALIZED_NAME_PRIVATE_IPS = "PrivateIps";

    @SerializedName(SERIALIZED_NAME_PRIVATE_IPS)
    private List<PrivateIp> privateIps = null;

    public static final String SERIALIZED_NAME_SECURITY_GROUPS = "SecurityGroups";

    @SerializedName(SERIALIZED_NAME_SECURITY_GROUPS)
    private List<SecurityGroupLight> securityGroups = null;

    public static final String SERIALIZED_NAME_STATE = "State";

    @SerializedName(SERIALIZED_NAME_STATE)
    private String state;

    public static final String SERIALIZED_NAME_SUBNET_ID = "SubnetId";

    @SerializedName(SERIALIZED_NAME_SUBNET_ID)
    private String subnetId;

    public static final String SERIALIZED_NAME_SUBREGION_NAME = "SubregionName";

    @SerializedName(SERIALIZED_NAME_SUBREGION_NAME)
    private String subregionName;

    public static final String SERIALIZED_NAME_TAGS = "Tags";

    @SerializedName(SERIALIZED_NAME_TAGS)
    private List<ResourceTag> tags = null;

    public Nic() {}

    public Nic accountId(String accountId) {

        this.accountId = accountId;
        return this;
    }

    /**
     * The account ID of the owner of the NIC.
     *
     * @return accountId
     */
    @javax.annotation.Nullable
    public String getAccountId() {
        return accountId;
    }

    public void setAccountId(String accountId) {
        this.accountId = accountId;
    }

    public Nic description(String description) {

        this.description = description;
        return this;
    }

    /**
     * The description of the NIC.
     *
     * @return description
     */
    @javax.annotation.Nullable
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Nic isSourceDestChecked(Boolean isSourceDestChecked) {

        this.isSourceDestChecked = isSourceDestChecked;
        return this;
    }

    /**
     * (Net only) If true, the source/destination check is enabled. If false, it is disabled. This
     * value must be false for a NAT VM to perform network address translation (NAT) in a Net.
     *
     * @return isSourceDestChecked
     */
    @javax.annotation.Nullable
    public Boolean getIsSourceDestChecked() {
        return isSourceDestChecked;
    }

    public void setIsSourceDestChecked(Boolean isSourceDestChecked) {
        this.isSourceDestChecked = isSourceDestChecked;
    }

    public Nic linkNic(LinkNic linkNic) {

        this.linkNic = linkNic;
        return this;
    }

    /**
     * Get linkNic
     *
     * @return linkNic
     */
    @javax.annotation.Nullable
    public LinkNic getLinkNic() {
        return linkNic;
    }

    public void setLinkNic(LinkNic linkNic) {
        this.linkNic = linkNic;
    }

    public Nic linkPublicIp(LinkPublicIp linkPublicIp) {

        this.linkPublicIp = linkPublicIp;
        return this;
    }

    /**
     * Get linkPublicIp
     *
     * @return linkPublicIp
     */
    @javax.annotation.Nullable
    public LinkPublicIp getLinkPublicIp() {
        return linkPublicIp;
    }

    public void setLinkPublicIp(LinkPublicIp linkPublicIp) {
        this.linkPublicIp = linkPublicIp;
    }

    public Nic macAddress(String macAddress) {

        this.macAddress = macAddress;
        return this;
    }

    /**
     * The Media Access Control (MAC) address of the NIC.
     *
     * @return macAddress
     */
    @javax.annotation.Nullable
    public String getMacAddress() {
        return macAddress;
    }

    public void setMacAddress(String macAddress) {
        this.macAddress = macAddress;
    }

    public Nic netId(String netId) {

        this.netId = netId;
        return this;
    }

    /**
     * The ID of the Net for the NIC.
     *
     * @return netId
     */
    @javax.annotation.Nullable
    public String getNetId() {
        return netId;
    }

    public void setNetId(String netId) {
        this.netId = netId;
    }

    public Nic nicId(String nicId) {

        this.nicId = nicId;
        return this;
    }

    /**
     * The ID of the NIC.
     *
     * @return nicId
     */
    @javax.annotation.Nullable
    public String getNicId() {
        return nicId;
    }

    public void setNicId(String nicId) {
        this.nicId = nicId;
    }

    public Nic privateDnsName(String privateDnsName) {

        this.privateDnsName = privateDnsName;
        return this;
    }

    /**
     * The name of the private DNS.
     *
     * @return privateDnsName
     */
    @javax.annotation.Nullable
    public String getPrivateDnsName() {
        return privateDnsName;
    }

    public void setPrivateDnsName(String privateDnsName) {
        this.privateDnsName = privateDnsName;
    }

    public Nic privateIps(List<PrivateIp> privateIps) {

        this.privateIps = privateIps;
        return this;
    }

    public Nic addPrivateIpsItem(PrivateIp privateIpsItem) {
        if (this.privateIps == null) {
            this.privateIps = new ArrayList<>();
        }
        this.privateIps.add(privateIpsItem);
        return this;
    }

    /**
     * The private IPs of the NIC.
     *
     * @return privateIps
     */
    @javax.annotation.Nullable
    public List<PrivateIp> getPrivateIps() {
        return privateIps;
    }

    public void setPrivateIps(List<PrivateIp> privateIps) {
        this.privateIps = privateIps;
    }

    public Nic securityGroups(List<SecurityGroupLight> securityGroups) {

        this.securityGroups = securityGroups;
        return this;
    }

    public Nic addSecurityGroupsItem(SecurityGroupLight securityGroupsItem) {
        if (this.securityGroups == null) {
            this.securityGroups = new ArrayList<>();
        }
        this.securityGroups.add(securityGroupsItem);
        return this;
    }

    /**
     * One or more IDs of security groups for the NIC.
     *
     * @return securityGroups
     */
    @javax.annotation.Nullable
    public List<SecurityGroupLight> getSecurityGroups() {
        return securityGroups;
    }

    public void setSecurityGroups(List<SecurityGroupLight> securityGroups) {
        this.securityGroups = securityGroups;
    }

    public Nic state(String state) {

        this.state = state;
        return this;
    }

    /**
     * The state of the NIC (&#x60;available&#x60; \\| &#x60;attaching&#x60; \\| &#x60;in-use&#x60;
     * \\| &#x60;detaching&#x60;).
     *
     * @return state
     */
    @javax.annotation.Nullable
    public String getState() {
        return state;
    }

    public void setState(String state) {
        this.state = state;
    }

    public Nic subnetId(String subnetId) {

        this.subnetId = subnetId;
        return this;
    }

    /**
     * The ID of the Subnet.
     *
     * @return subnetId
     */
    @javax.annotation.Nullable
    public String getSubnetId() {
        return subnetId;
    }

    public void setSubnetId(String subnetId) {
        this.subnetId = subnetId;
    }

    public Nic subregionName(String subregionName) {

        this.subregionName = subregionName;
        return this;
    }

    /**
     * The Subregion in which the NIC is located.
     *
     * @return subregionName
     */
    @javax.annotation.Nullable
    public String getSubregionName() {
        return subregionName;
    }

    public void setSubregionName(String subregionName) {
        this.subregionName = subregionName;
    }

    public Nic tags(List<ResourceTag> tags) {

        this.tags = tags;
        return this;
    }

    public Nic addTagsItem(ResourceTag tagsItem) {
        if (this.tags == null) {
            this.tags = new ArrayList<>();
        }
        this.tags.add(tagsItem);
        return this;
    }

    /**
     * One or more tags associated with the NIC.
     *
     * @return tags
     */
    @javax.annotation.Nullable
    public List<ResourceTag> getTags() {
        return tags;
    }

    public void setTags(List<ResourceTag> tags) {
        this.tags = tags;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Nic nic = (Nic) o;
        return Objects.equals(this.accountId, nic.accountId)
                && Objects.equals(this.description, nic.description)
                && Objects.equals(this.isSourceDestChecked, nic.isSourceDestChecked)
                && Objects.equals(this.linkNic, nic.linkNic)
                && Objects.equals(this.linkPublicIp, nic.linkPublicIp)
                && Objects.equals(this.macAddress, nic.macAddress)
                && Objects.equals(this.netId, nic.netId)
                && Objects.equals(this.nicId, nic.nicId)
                && Objects.equals(this.privateDnsName, nic.privateDnsName)
                && Objects.equals(this.privateIps, nic.privateIps)
                && Objects.equals(this.securityGroups, nic.securityGroups)
                && Objects.equals(this.state, nic.state)
                && Objects.equals(this.subnetId, nic.subnetId)
                && Objects.equals(this.subregionName, nic.subregionName)
                && Objects.equals(this.tags, nic.tags);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                accountId,
                description,
                isSourceDestChecked,
                linkNic,
                linkPublicIp,
                macAddress,
                netId,
                nicId,
                privateDnsName,
                privateIps,
                securityGroups,
                state,
                subnetId,
                subregionName,
                tags);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Nic {\n");
        sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    isSourceDestChecked: ")
                .append(toIndentedString(isSourceDestChecked))
                .append("\n");
        sb.append("    linkNic: ").append(toIndentedString(linkNic)).append("\n");
        sb.append("    linkPublicIp: ").append(toIndentedString(linkPublicIp)).append("\n");
        sb.append("    macAddress: ").append(toIndentedString(macAddress)).append("\n");
        sb.append("    netId: ").append(toIndentedString(netId)).append("\n");
        sb.append("    nicId: ").append(toIndentedString(nicId)).append("\n");
        sb.append("    privateDnsName: ").append(toIndentedString(privateDnsName)).append("\n");
        sb.append("    privateIps: ").append(toIndentedString(privateIps)).append("\n");
        sb.append("    securityGroups: ").append(toIndentedString(securityGroups)).append("\n");
        sb.append("    state: ").append(toIndentedString(state)).append("\n");
        sb.append("    subnetId: ").append(toIndentedString(subnetId)).append("\n");
        sb.append("    subregionName: ").append(toIndentedString(subregionName)).append("\n");
        sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("AccountId");
        openapiFields.add("Description");
        openapiFields.add("IsSourceDestChecked");
        openapiFields.add("LinkNic");
        openapiFields.add("LinkPublicIp");
        openapiFields.add("MacAddress");
        openapiFields.add("NetId");
        openapiFields.add("NicId");
        openapiFields.add("PrivateDnsName");
        openapiFields.add("PrivateIps");
        openapiFields.add("SecurityGroups");
        openapiFields.add("State");
        openapiFields.add("SubnetId");
        openapiFields.add("SubregionName");
        openapiFields.add("Tags");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to Nic
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!Nic.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in Nic is not found in the empty JSON"
                                        + " string",
                                Nic.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!Nic.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `Nic`"
                                        + " properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }
        if ((jsonObj.get("AccountId") != null && !jsonObj.get("AccountId").isJsonNull())
                && !jsonObj.get("AccountId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `AccountId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("AccountId").toString()));
        }
        if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull())
                && !jsonObj.get("Description").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `Description` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("Description").toString()));
        }
        // validate the optional field `LinkNic`
        if (jsonObj.get("LinkNic") != null && !jsonObj.get("LinkNic").isJsonNull()) {
            LinkNic.validateJsonObject(jsonObj.getAsJsonObject("LinkNic"));
        }
        // validate the optional field `LinkPublicIp`
        if (jsonObj.get("LinkPublicIp") != null && !jsonObj.get("LinkPublicIp").isJsonNull()) {
            LinkPublicIp.validateJsonObject(jsonObj.getAsJsonObject("LinkPublicIp"));
        }
        if ((jsonObj.get("MacAddress") != null && !jsonObj.get("MacAddress").isJsonNull())
                && !jsonObj.get("MacAddress").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `MacAddress` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("MacAddress").toString()));
        }
        if ((jsonObj.get("NetId") != null && !jsonObj.get("NetId").isJsonNull())
                && !jsonObj.get("NetId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `NetId` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("NetId").toString()));
        }
        if ((jsonObj.get("NicId") != null && !jsonObj.get("NicId").isJsonNull())
                && !jsonObj.get("NicId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `NicId` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("NicId").toString()));
        }
        if ((jsonObj.get("PrivateDnsName") != null && !jsonObj.get("PrivateDnsName").isJsonNull())
                && !jsonObj.get("PrivateDnsName").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `PrivateDnsName` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("PrivateDnsName").toString()));
        }
        if (jsonObj.get("PrivateIps") != null && !jsonObj.get("PrivateIps").isJsonNull()) {
            JsonArray jsonArrayprivateIps = jsonObj.getAsJsonArray("PrivateIps");
            if (jsonArrayprivateIps != null) {
                // ensure the json data is an array
                if (!jsonObj.get("PrivateIps").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `PrivateIps` to be an array in the JSON"
                                            + " string but got `%s`",
                                    jsonObj.get("PrivateIps").toString()));
                }

                // validate the optional field `PrivateIps` (array)
                for (int i = 0; i < jsonArrayprivateIps.size(); i++) {
                    PrivateIp.validateJsonObject(jsonArrayprivateIps.get(i).getAsJsonObject());
                }
                ;
            }
        }
        if (jsonObj.get("SecurityGroups") != null && !jsonObj.get("SecurityGroups").isJsonNull()) {
            JsonArray jsonArraysecurityGroups = jsonObj.getAsJsonArray("SecurityGroups");
            if (jsonArraysecurityGroups != null) {
                // ensure the json data is an array
                if (!jsonObj.get("SecurityGroups").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `SecurityGroups` to be an array in the"
                                            + " JSON string but got `%s`",
                                    jsonObj.get("SecurityGroups").toString()));
                }

                // validate the optional field `SecurityGroups` (array)
                for (int i = 0; i < jsonArraysecurityGroups.size(); i++) {
                    SecurityGroupLight.validateJsonObject(
                            jsonArraysecurityGroups.get(i).getAsJsonObject());
                }
                ;
            }
        }
        if ((jsonObj.get("State") != null && !jsonObj.get("State").isJsonNull())
                && !jsonObj.get("State").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `State` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("State").toString()));
        }
        if ((jsonObj.get("SubnetId") != null && !jsonObj.get("SubnetId").isJsonNull())
                && !jsonObj.get("SubnetId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `SubnetId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("SubnetId").toString()));
        }
        if ((jsonObj.get("SubregionName") != null && !jsonObj.get("SubregionName").isJsonNull())
                && !jsonObj.get("SubregionName").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `SubregionName` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("SubregionName").toString()));
        }
        if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
            JsonArray jsonArraytags = jsonObj.getAsJsonArray("Tags");
            if (jsonArraytags != null) {
                // ensure the json data is an array
                if (!jsonObj.get("Tags").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `Tags` to be an array in the JSON string"
                                            + " but got `%s`",
                                    jsonObj.get("Tags").toString()));
                }

                // validate the optional field `Tags` (array)
                for (int i = 0; i < jsonArraytags.size(); i++) {
                    ResourceTag.validateJsonObject(jsonArraytags.get(i).getAsJsonObject());
                }
                ;
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!Nic.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'Nic' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<Nic> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(Nic.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<Nic>() {
                        @Override
                        public void write(JsonWriter out, Nic value) throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public Nic read(JsonReader in) throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of Nic given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of Nic
     * @throws IOException if the JSON string is invalid with respect to Nic
     */
    public static Nic fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, Nic.class);
    }

    /**
     * Convert an instance of Nic to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
