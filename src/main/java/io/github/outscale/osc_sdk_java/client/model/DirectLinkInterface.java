/*
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> You can learn more about errors returned by the API in the dedicated [errors page](api/errors).<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).
 *
 * The version of the OpenAPI document: 1.23
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.github.outscale.osc_sdk_java.client.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.outscale.osc_sdk_java.client.JSON;
import java.io.IOException;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/** Information about the DirectLink interface. */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class DirectLinkInterface {
    public static final String SERIALIZED_NAME_BGP_ASN = "BgpAsn";

    @SerializedName(SERIALIZED_NAME_BGP_ASN)
    private Integer bgpAsn;

    public static final String SERIALIZED_NAME_BGP_KEY = "BgpKey";

    @SerializedName(SERIALIZED_NAME_BGP_KEY)
    private String bgpKey;

    public static final String SERIALIZED_NAME_CLIENT_PRIVATE_IP = "ClientPrivateIp";

    @SerializedName(SERIALIZED_NAME_CLIENT_PRIVATE_IP)
    private String clientPrivateIp;

    public static final String SERIALIZED_NAME_DIRECT_LINK_INTERFACE_NAME =
            "DirectLinkInterfaceName";

    @SerializedName(SERIALIZED_NAME_DIRECT_LINK_INTERFACE_NAME)
    private String directLinkInterfaceName;

    public static final String SERIALIZED_NAME_OUTSCALE_PRIVATE_IP = "OutscalePrivateIp";

    @SerializedName(SERIALIZED_NAME_OUTSCALE_PRIVATE_IP)
    private String outscalePrivateIp;

    public static final String SERIALIZED_NAME_VIRTUAL_GATEWAY_ID = "VirtualGatewayId";

    @SerializedName(SERIALIZED_NAME_VIRTUAL_GATEWAY_ID)
    private String virtualGatewayId;

    public static final String SERIALIZED_NAME_VLAN = "Vlan";

    @SerializedName(SERIALIZED_NAME_VLAN)
    private Integer vlan;

    public DirectLinkInterface() {}

    public DirectLinkInterface bgpAsn(Integer bgpAsn) {

        this.bgpAsn = bgpAsn;
        return this;
    }

    /**
     * The BGP (Border Gateway Protocol) ASN (Autonomous System Number) on the customer&#39;s side
     * of the DirectLink interface.
     *
     * @return bgpAsn
     */
    @javax.annotation.Nonnull
    public Integer getBgpAsn() {
        return bgpAsn;
    }

    public void setBgpAsn(Integer bgpAsn) {
        this.bgpAsn = bgpAsn;
    }

    public DirectLinkInterface bgpKey(String bgpKey) {

        this.bgpKey = bgpKey;
        return this;
    }

    /**
     * The BGP authentication key.
     *
     * @return bgpKey
     */
    @javax.annotation.Nullable
    public String getBgpKey() {
        return bgpKey;
    }

    public void setBgpKey(String bgpKey) {
        this.bgpKey = bgpKey;
    }

    public DirectLinkInterface clientPrivateIp(String clientPrivateIp) {

        this.clientPrivateIp = clientPrivateIp;
        return this;
    }

    /**
     * The IP on the customer&#39;s side of the DirectLink interface.
     *
     * @return clientPrivateIp
     */
    @javax.annotation.Nullable
    public String getClientPrivateIp() {
        return clientPrivateIp;
    }

    public void setClientPrivateIp(String clientPrivateIp) {
        this.clientPrivateIp = clientPrivateIp;
    }

    public DirectLinkInterface directLinkInterfaceName(String directLinkInterfaceName) {

        this.directLinkInterfaceName = directLinkInterfaceName;
        return this;
    }

    /**
     * The name of the DirectLink interface.
     *
     * @return directLinkInterfaceName
     */
    @javax.annotation.Nonnull
    public String getDirectLinkInterfaceName() {
        return directLinkInterfaceName;
    }

    public void setDirectLinkInterfaceName(String directLinkInterfaceName) {
        this.directLinkInterfaceName = directLinkInterfaceName;
    }

    public DirectLinkInterface outscalePrivateIp(String outscalePrivateIp) {

        this.outscalePrivateIp = outscalePrivateIp;
        return this;
    }

    /**
     * The IP on the OUTSCALE side of the DirectLink interface.
     *
     * @return outscalePrivateIp
     */
    @javax.annotation.Nullable
    public String getOutscalePrivateIp() {
        return outscalePrivateIp;
    }

    public void setOutscalePrivateIp(String outscalePrivateIp) {
        this.outscalePrivateIp = outscalePrivateIp;
    }

    public DirectLinkInterface virtualGatewayId(String virtualGatewayId) {

        this.virtualGatewayId = virtualGatewayId;
        return this;
    }

    /**
     * The ID of the target virtual gateway.
     *
     * @return virtualGatewayId
     */
    @javax.annotation.Nonnull
    public String getVirtualGatewayId() {
        return virtualGatewayId;
    }

    public void setVirtualGatewayId(String virtualGatewayId) {
        this.virtualGatewayId = virtualGatewayId;
    }

    public DirectLinkInterface vlan(Integer vlan) {

        this.vlan = vlan;
        return this;
    }

    /**
     * The VLAN number associated with the DirectLink interface.
     *
     * @return vlan
     */
    @javax.annotation.Nonnull
    public Integer getVlan() {
        return vlan;
    }

    public void setVlan(Integer vlan) {
        this.vlan = vlan;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DirectLinkInterface directLinkInterface = (DirectLinkInterface) o;
        return Objects.equals(this.bgpAsn, directLinkInterface.bgpAsn)
                && Objects.equals(this.bgpKey, directLinkInterface.bgpKey)
                && Objects.equals(this.clientPrivateIp, directLinkInterface.clientPrivateIp)
                && Objects.equals(
                        this.directLinkInterfaceName, directLinkInterface.directLinkInterfaceName)
                && Objects.equals(this.outscalePrivateIp, directLinkInterface.outscalePrivateIp)
                && Objects.equals(this.virtualGatewayId, directLinkInterface.virtualGatewayId)
                && Objects.equals(this.vlan, directLinkInterface.vlan);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                bgpAsn,
                bgpKey,
                clientPrivateIp,
                directLinkInterfaceName,
                outscalePrivateIp,
                virtualGatewayId,
                vlan);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class DirectLinkInterface {\n");
        sb.append("    bgpAsn: ").append(toIndentedString(bgpAsn)).append("\n");
        sb.append("    bgpKey: ").append(toIndentedString(bgpKey)).append("\n");
        sb.append("    clientPrivateIp: ").append(toIndentedString(clientPrivateIp)).append("\n");
        sb.append("    directLinkInterfaceName: ")
                .append(toIndentedString(directLinkInterfaceName))
                .append("\n");
        sb.append("    outscalePrivateIp: ")
                .append(toIndentedString(outscalePrivateIp))
                .append("\n");
        sb.append("    virtualGatewayId: ").append(toIndentedString(virtualGatewayId)).append("\n");
        sb.append("    vlan: ").append(toIndentedString(vlan)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("BgpAsn");
        openapiFields.add("BgpKey");
        openapiFields.add("ClientPrivateIp");
        openapiFields.add("DirectLinkInterfaceName");
        openapiFields.add("OutscalePrivateIp");
        openapiFields.add("VirtualGatewayId");
        openapiFields.add("Vlan");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("BgpAsn");
        openapiRequiredFields.add("DirectLinkInterfaceName");
        openapiRequiredFields.add("VirtualGatewayId");
        openapiRequiredFields.add("Vlan");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to DirectLinkInterface
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!DirectLinkInterface.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in DirectLinkInterface is not found in"
                                        + " the empty JSON string",
                                DirectLinkInterface.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!DirectLinkInterface.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `DirectLinkInterface` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : DirectLinkInterface.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonObj.toString()));
            }
        }
        if ((jsonObj.get("BgpKey") != null && !jsonObj.get("BgpKey").isJsonNull())
                && !jsonObj.get("BgpKey").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `BgpKey` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("BgpKey").toString()));
        }
        if ((jsonObj.get("ClientPrivateIp") != null && !jsonObj.get("ClientPrivateIp").isJsonNull())
                && !jsonObj.get("ClientPrivateIp").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `ClientPrivateIp` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("ClientPrivateIp").toString()));
        }
        if (!jsonObj.get("DirectLinkInterfaceName").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `DirectLinkInterfaceName` to be a primitive type"
                                    + " in the JSON string but got `%s`",
                            jsonObj.get("DirectLinkInterfaceName").toString()));
        }
        if ((jsonObj.get("OutscalePrivateIp") != null
                        && !jsonObj.get("OutscalePrivateIp").isJsonNull())
                && !jsonObj.get("OutscalePrivateIp").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `OutscalePrivateIp` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("OutscalePrivateIp").toString()));
        }
        if (!jsonObj.get("VirtualGatewayId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `VirtualGatewayId` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("VirtualGatewayId").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!DirectLinkInterface.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'DirectLinkInterface' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<DirectLinkInterface> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(DirectLinkInterface.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<DirectLinkInterface>() {
                        @Override
                        public void write(JsonWriter out, DirectLinkInterface value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public DirectLinkInterface read(JsonReader in) throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of DirectLinkInterface given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of DirectLinkInterface
     * @throws IOException if the JSON string is invalid with respect to DirectLinkInterface
     */
    public static DirectLinkInterface fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, DirectLinkInterface.class);
    }

    /**
     * Convert an instance of DirectLinkInterface to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
