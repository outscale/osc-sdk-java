/*
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> You can learn more about errors returned by the API in the dedicated [errors page](api/errors).<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).
 *
 * The version of the OpenAPI document: 1.23
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.outscale.osc_sdk_java.client.api;

import io.github.outscale.osc_sdk_java.client.ApiCallback;
import io.github.outscale.osc_sdk_java.client.ApiClient;
import io.github.outscale.osc_sdk_java.client.ApiException;
import io.github.outscale.osc_sdk_java.client.ApiResponse;
import io.github.outscale.osc_sdk_java.client.Configuration;
import io.github.outscale.osc_sdk_java.client.Pair;
import io.github.outscale.osc_sdk_java.client.ProgressRequestBody;
import io.github.outscale.osc_sdk_java.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.github.outscale.osc_sdk_java.client.model.CreateDirectLinkInterfaceRequest;
import io.github.outscale.osc_sdk_java.client.model.CreateDirectLinkInterfaceResponse;
import io.github.outscale.osc_sdk_java.client.model.DeleteDirectLinkInterfaceRequest;
import io.github.outscale.osc_sdk_java.client.model.DeleteDirectLinkInterfaceResponse;
import io.github.outscale.osc_sdk_java.client.model.ReadDirectLinkInterfacesRequest;
import io.github.outscale.osc_sdk_java.client.model.ReadDirectLinkInterfacesResponse;
import io.github.outscale.osc_sdk_java.client.model.UpdateDirectLinkInterfaceRequest;
import io.github.outscale.osc_sdk_java.client.model.UpdateDirectLinkInterfaceResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DirectLinkInterfaceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DirectLinkInterfaceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DirectLinkInterfaceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createDirectLinkInterface
     * @param createDirectLinkInterfaceRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDirectLinkInterfaceCall(CreateDirectLinkInterfaceRequest createDirectLinkInterfaceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDirectLinkInterfaceRequest;

        // create path and map variables
        String localVarPath = "/CreateDirectLinkInterface";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AWS4Auth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDirectLinkInterfaceValidateBeforeCall(CreateDirectLinkInterfaceRequest createDirectLinkInterfaceRequest, final ApiCallback _callback) throws ApiException {
        return createDirectLinkInterfaceCall(createDirectLinkInterfaceRequest, _callback);

    }

    /**
     * 
     * 
     * @param createDirectLinkInterfaceRequest  (optional)
     * @return CreateDirectLinkInterfaceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public CreateDirectLinkInterfaceResponse createDirectLinkInterface(CreateDirectLinkInterfaceRequest createDirectLinkInterfaceRequest) throws ApiException {
        ApiResponse<CreateDirectLinkInterfaceResponse> localVarResp = createDirectLinkInterfaceWithHttpInfo(createDirectLinkInterfaceRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createDirectLinkInterfaceRequest  (optional)
     * @return ApiResponse&lt;CreateDirectLinkInterfaceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDirectLinkInterfaceResponse> createDirectLinkInterfaceWithHttpInfo(CreateDirectLinkInterfaceRequest createDirectLinkInterfaceRequest) throws ApiException {
        okhttp3.Call localVarCall = createDirectLinkInterfaceValidateBeforeCall(createDirectLinkInterfaceRequest, null);
        Type localVarReturnType = new TypeToken<CreateDirectLinkInterfaceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createDirectLinkInterfaceRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDirectLinkInterfaceAsync(CreateDirectLinkInterfaceRequest createDirectLinkInterfaceRequest, final ApiCallback<CreateDirectLinkInterfaceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDirectLinkInterfaceValidateBeforeCall(createDirectLinkInterfaceRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateDirectLinkInterfaceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDirectLinkInterface
     * @param deleteDirectLinkInterfaceRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDirectLinkInterfaceCall(DeleteDirectLinkInterfaceRequest deleteDirectLinkInterfaceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteDirectLinkInterfaceRequest;

        // create path and map variables
        String localVarPath = "/DeleteDirectLinkInterface";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AWS4Auth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDirectLinkInterfaceValidateBeforeCall(DeleteDirectLinkInterfaceRequest deleteDirectLinkInterfaceRequest, final ApiCallback _callback) throws ApiException {
        return deleteDirectLinkInterfaceCall(deleteDirectLinkInterfaceRequest, _callback);

    }

    /**
     * 
     * 
     * @param deleteDirectLinkInterfaceRequest  (optional)
     * @return DeleteDirectLinkInterfaceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public DeleteDirectLinkInterfaceResponse deleteDirectLinkInterface(DeleteDirectLinkInterfaceRequest deleteDirectLinkInterfaceRequest) throws ApiException {
        ApiResponse<DeleteDirectLinkInterfaceResponse> localVarResp = deleteDirectLinkInterfaceWithHttpInfo(deleteDirectLinkInterfaceRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param deleteDirectLinkInterfaceRequest  (optional)
     * @return ApiResponse&lt;DeleteDirectLinkInterfaceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteDirectLinkInterfaceResponse> deleteDirectLinkInterfaceWithHttpInfo(DeleteDirectLinkInterfaceRequest deleteDirectLinkInterfaceRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteDirectLinkInterfaceValidateBeforeCall(deleteDirectLinkInterfaceRequest, null);
        Type localVarReturnType = new TypeToken<DeleteDirectLinkInterfaceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param deleteDirectLinkInterfaceRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDirectLinkInterfaceAsync(DeleteDirectLinkInterfaceRequest deleteDirectLinkInterfaceRequest, final ApiCallback<DeleteDirectLinkInterfaceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDirectLinkInterfaceValidateBeforeCall(deleteDirectLinkInterfaceRequest, _callback);
        Type localVarReturnType = new TypeToken<DeleteDirectLinkInterfaceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for readDirectLinkInterfaces
     * @param readDirectLinkInterfacesRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readDirectLinkInterfacesCall(ReadDirectLinkInterfacesRequest readDirectLinkInterfacesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = readDirectLinkInterfacesRequest;

        // create path and map variables
        String localVarPath = "/ReadDirectLinkInterfaces";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AWS4Auth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call readDirectLinkInterfacesValidateBeforeCall(ReadDirectLinkInterfacesRequest readDirectLinkInterfacesRequest, final ApiCallback _callback) throws ApiException {
        return readDirectLinkInterfacesCall(readDirectLinkInterfacesRequest, _callback);

    }

    /**
     * 
     * 
     * @param readDirectLinkInterfacesRequest  (optional)
     * @return ReadDirectLinkInterfacesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public ReadDirectLinkInterfacesResponse readDirectLinkInterfaces(ReadDirectLinkInterfacesRequest readDirectLinkInterfacesRequest) throws ApiException {
        ApiResponse<ReadDirectLinkInterfacesResponse> localVarResp = readDirectLinkInterfacesWithHttpInfo(readDirectLinkInterfacesRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param readDirectLinkInterfacesRequest  (optional)
     * @return ApiResponse&lt;ReadDirectLinkInterfacesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReadDirectLinkInterfacesResponse> readDirectLinkInterfacesWithHttpInfo(ReadDirectLinkInterfacesRequest readDirectLinkInterfacesRequest) throws ApiException {
        okhttp3.Call localVarCall = readDirectLinkInterfacesValidateBeforeCall(readDirectLinkInterfacesRequest, null);
        Type localVarReturnType = new TypeToken<ReadDirectLinkInterfacesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param readDirectLinkInterfacesRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readDirectLinkInterfacesAsync(ReadDirectLinkInterfacesRequest readDirectLinkInterfacesRequest, final ApiCallback<ReadDirectLinkInterfacesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = readDirectLinkInterfacesValidateBeforeCall(readDirectLinkInterfacesRequest, _callback);
        Type localVarReturnType = new TypeToken<ReadDirectLinkInterfacesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDirectLinkInterface
     * @param updateDirectLinkInterfaceRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDirectLinkInterfaceCall(UpdateDirectLinkInterfaceRequest updateDirectLinkInterfaceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDirectLinkInterfaceRequest;

        // create path and map variables
        String localVarPath = "/UpdateDirectLinkInterface";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AWS4Auth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDirectLinkInterfaceValidateBeforeCall(UpdateDirectLinkInterfaceRequest updateDirectLinkInterfaceRequest, final ApiCallback _callback) throws ApiException {
        return updateDirectLinkInterfaceCall(updateDirectLinkInterfaceRequest, _callback);

    }

    /**
     * 
     * 
     * @param updateDirectLinkInterfaceRequest  (optional)
     * @return UpdateDirectLinkInterfaceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDirectLinkInterfaceResponse updateDirectLinkInterface(UpdateDirectLinkInterfaceRequest updateDirectLinkInterfaceRequest) throws ApiException {
        ApiResponse<UpdateDirectLinkInterfaceResponse> localVarResp = updateDirectLinkInterfaceWithHttpInfo(updateDirectLinkInterfaceRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateDirectLinkInterfaceRequest  (optional)
     * @return ApiResponse&lt;UpdateDirectLinkInterfaceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateDirectLinkInterfaceResponse> updateDirectLinkInterfaceWithHttpInfo(UpdateDirectLinkInterfaceRequest updateDirectLinkInterfaceRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDirectLinkInterfaceValidateBeforeCall(updateDirectLinkInterfaceRequest, null);
        Type localVarReturnType = new TypeToken<UpdateDirectLinkInterfaceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateDirectLinkInterfaceRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HTTP 200 response (OK). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDirectLinkInterfaceAsync(UpdateDirectLinkInterfaceRequest updateDirectLinkInterfaceRequest, final ApiCallback<UpdateDirectLinkInterfaceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDirectLinkInterfaceValidateBeforeCall(updateDirectLinkInterfaceRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateDirectLinkInterfaceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
