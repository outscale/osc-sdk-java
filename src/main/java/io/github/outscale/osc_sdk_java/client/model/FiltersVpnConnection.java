/*
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> Throttling: To protect against overloads, the number of identical requests allowed in a given time period is limited.<br /> Brute force: To protect against brute force attacks, the number of failed authentication attempts in a given time period is limited.<br /><br /> You can learn more about errors returned by the API in the dedicated [errors page](api/errors).<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).<br /> # Authentication Schemes ### Access Key/Secret Key The main way to authenticate your requests to the OUTSCALE API is to use an access key and a secret key.<br /> The mechanism behind this is based on AWS Signature Version 4, whose technical implementation details are described in [Signature of API Requests](https://docs.outscale.com/en/userguide/Signature-of-API-Requests.html).<br /><br /> In practice, the way to specify your access key and secret key depends on the tool or SDK you want to use to interact with the API.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify your access key, secret key, and the Region of your account. > 2. You then specify the `--profile` option when executing OSC CLI commands. >  > For more information, see [Installing and Configuring OSC CLI](https://docs.outscale.com/en/userguide/Installing-and-Configuring-OSC-CLI.html).  See the code samples in each section of this documentation for specific examples in different programming languages.<br /> For more information about access keys, see [About Access Keys](https://docs.outscale.com/en/userguide/About-Access-Keys.html). ### Login/Password For certain API actions, you can also use basic authentication with the login (email address) and password of your TINA account.<br /> This is useful only in special circumstances, for example if you do not know your access key/secret key and want to retrieve them programmatically.<br /> In most cases, however, you can use the Cockpit web interface to retrieve them.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify the Region of your account, but you leave the access key value and secret key value empty (`&quot;&quot;`). > 2. You then specify the `--profile`, `--authentication-method`, `--login`, and `--password` options when executing OSC CLI commands.  See the code samples in each section of this documentation for specific examples in different programming languages. ### No Authentication A few API actions do not require any authentication. They are indicated as such in this documentation.<br /> ### Other Security Mechanisms In parallel with the authentication schemes, you can add other security mechanisms to your OUTSCALE account, for example to restrict API requests by IP or other criteria.<br /> For more information, see [Managing Your API Accesses](https://docs.outscale.com/en/userguide/Managing-Your-API-Accesses.html).
 *
 * The version of the OpenAPI document: 1.28.7
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.github.outscale.osc_sdk_java.client.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.outscale.osc_sdk_java.client.JSON;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/** One or more filters. */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FiltersVpnConnection {
    public static final String SERIALIZED_NAME_BGP_ASNS = "BgpAsns";

    @SerializedName(SERIALIZED_NAME_BGP_ASNS)
    private List<Integer> bgpAsns = null;

    public static final String SERIALIZED_NAME_CLIENT_GATEWAY_IDS = "ClientGatewayIds";

    @SerializedName(SERIALIZED_NAME_CLIENT_GATEWAY_IDS)
    private List<String> clientGatewayIds = null;

    public static final String SERIALIZED_NAME_CONNECTION_TYPES = "ConnectionTypes";

    @SerializedName(SERIALIZED_NAME_CONNECTION_TYPES)
    private List<String> connectionTypes = null;

    public static final String SERIALIZED_NAME_ROUTE_DESTINATION_IP_RANGES =
            "RouteDestinationIpRanges";

    @SerializedName(SERIALIZED_NAME_ROUTE_DESTINATION_IP_RANGES)
    private List<String> routeDestinationIpRanges = null;

    public static final String SERIALIZED_NAME_STATES = "States";

    @SerializedName(SERIALIZED_NAME_STATES)
    private List<String> states = null;

    public static final String SERIALIZED_NAME_STATIC_ROUTES_ONLY = "StaticRoutesOnly";

    @SerializedName(SERIALIZED_NAME_STATIC_ROUTES_ONLY)
    private Boolean staticRoutesOnly;

    public static final String SERIALIZED_NAME_TAG_KEYS = "TagKeys";

    @SerializedName(SERIALIZED_NAME_TAG_KEYS)
    private List<String> tagKeys = null;

    public static final String SERIALIZED_NAME_TAG_VALUES = "TagValues";

    @SerializedName(SERIALIZED_NAME_TAG_VALUES)
    private List<String> tagValues = null;

    public static final String SERIALIZED_NAME_TAGS = "Tags";

    @SerializedName(SERIALIZED_NAME_TAGS)
    private List<String> tags = null;

    public static final String SERIALIZED_NAME_VIRTUAL_GATEWAY_IDS = "VirtualGatewayIds";

    @SerializedName(SERIALIZED_NAME_VIRTUAL_GATEWAY_IDS)
    private List<String> virtualGatewayIds = null;

    public static final String SERIALIZED_NAME_VPN_CONNECTION_IDS = "VpnConnectionIds";

    @SerializedName(SERIALIZED_NAME_VPN_CONNECTION_IDS)
    private List<String> vpnConnectionIds = null;

    public FiltersVpnConnection() {}

    public FiltersVpnConnection bgpAsns(List<Integer> bgpAsns) {

        this.bgpAsns = bgpAsns;
        return this;
    }

    public FiltersVpnConnection addBgpAsnsItem(Integer bgpAsnsItem) {
        if (this.bgpAsns == null) {
            this.bgpAsns = new ArrayList<>();
        }
        this.bgpAsns.add(bgpAsnsItem);
        return this;
    }

    /**
     * The Border Gateway Protocol (BGP) Autonomous System Numbers (ASNs) of the connections.
     *
     * @return bgpAsns
     */
    @javax.annotation.Nullable
    public List<Integer> getBgpAsns() {
        return bgpAsns;
    }

    public void setBgpAsns(List<Integer> bgpAsns) {
        this.bgpAsns = bgpAsns;
    }

    public FiltersVpnConnection clientGatewayIds(List<String> clientGatewayIds) {

        this.clientGatewayIds = clientGatewayIds;
        return this;
    }

    public FiltersVpnConnection addClientGatewayIdsItem(String clientGatewayIdsItem) {
        if (this.clientGatewayIds == null) {
            this.clientGatewayIds = new ArrayList<>();
        }
        this.clientGatewayIds.add(clientGatewayIdsItem);
        return this;
    }

    /**
     * The IDs of the client gateways.
     *
     * @return clientGatewayIds
     */
    @javax.annotation.Nullable
    public List<String> getClientGatewayIds() {
        return clientGatewayIds;
    }

    public void setClientGatewayIds(List<String> clientGatewayIds) {
        this.clientGatewayIds = clientGatewayIds;
    }

    public FiltersVpnConnection connectionTypes(List<String> connectionTypes) {

        this.connectionTypes = connectionTypes;
        return this;
    }

    public FiltersVpnConnection addConnectionTypesItem(String connectionTypesItem) {
        if (this.connectionTypes == null) {
            this.connectionTypes = new ArrayList<>();
        }
        this.connectionTypes.add(connectionTypesItem);
        return this;
    }

    /**
     * The types of the VPN connections (only &#x60;ipsec.1&#x60; is supported).
     *
     * @return connectionTypes
     */
    @javax.annotation.Nullable
    public List<String> getConnectionTypes() {
        return connectionTypes;
    }

    public void setConnectionTypes(List<String> connectionTypes) {
        this.connectionTypes = connectionTypes;
    }

    public FiltersVpnConnection routeDestinationIpRanges(List<String> routeDestinationIpRanges) {

        this.routeDestinationIpRanges = routeDestinationIpRanges;
        return this;
    }

    public FiltersVpnConnection addRouteDestinationIpRangesItem(
            String routeDestinationIpRangesItem) {
        if (this.routeDestinationIpRanges == null) {
            this.routeDestinationIpRanges = new ArrayList<>();
        }
        this.routeDestinationIpRanges.add(routeDestinationIpRangesItem);
        return this;
    }

    /**
     * The destination IP ranges.
     *
     * @return routeDestinationIpRanges
     */
    @javax.annotation.Nullable
    public List<String> getRouteDestinationIpRanges() {
        return routeDestinationIpRanges;
    }

    public void setRouteDestinationIpRanges(List<String> routeDestinationIpRanges) {
        this.routeDestinationIpRanges = routeDestinationIpRanges;
    }

    public FiltersVpnConnection states(List<String> states) {

        this.states = states;
        return this;
    }

    public FiltersVpnConnection addStatesItem(String statesItem) {
        if (this.states == null) {
            this.states = new ArrayList<>();
        }
        this.states.add(statesItem);
        return this;
    }

    /**
     * The states of the VPN connections (&#x60;pending&#x60; \\| &#x60;available&#x60; \\|
     * &#x60;deleting&#x60; \\| &#x60;deleted&#x60;).
     *
     * @return states
     */
    @javax.annotation.Nullable
    public List<String> getStates() {
        return states;
    }

    public void setStates(List<String> states) {
        this.states = states;
    }

    public FiltersVpnConnection staticRoutesOnly(Boolean staticRoutesOnly) {

        this.staticRoutesOnly = staticRoutesOnly;
        return this;
    }

    /**
     * If false, the VPN connection uses dynamic routing with Border Gateway Protocol (BGP). If
     * true, routing is controlled using static routes. For more information about how to create and
     * delete static routes, see [CreateVpnConnectionRoute](#createvpnconnectionroute) and
     * [DeleteVpnConnectionRoute](#deletevpnconnectionroute).
     *
     * @return staticRoutesOnly
     */
    @javax.annotation.Nullable
    public Boolean getStaticRoutesOnly() {
        return staticRoutesOnly;
    }

    public void setStaticRoutesOnly(Boolean staticRoutesOnly) {
        this.staticRoutesOnly = staticRoutesOnly;
    }

    public FiltersVpnConnection tagKeys(List<String> tagKeys) {

        this.tagKeys = tagKeys;
        return this;
    }

    public FiltersVpnConnection addTagKeysItem(String tagKeysItem) {
        if (this.tagKeys == null) {
            this.tagKeys = new ArrayList<>();
        }
        this.tagKeys.add(tagKeysItem);
        return this;
    }

    /**
     * The keys of the tags associated with the VPN connections.
     *
     * @return tagKeys
     */
    @javax.annotation.Nullable
    public List<String> getTagKeys() {
        return tagKeys;
    }

    public void setTagKeys(List<String> tagKeys) {
        this.tagKeys = tagKeys;
    }

    public FiltersVpnConnection tagValues(List<String> tagValues) {

        this.tagValues = tagValues;
        return this;
    }

    public FiltersVpnConnection addTagValuesItem(String tagValuesItem) {
        if (this.tagValues == null) {
            this.tagValues = new ArrayList<>();
        }
        this.tagValues.add(tagValuesItem);
        return this;
    }

    /**
     * The values of the tags associated with the VPN connections.
     *
     * @return tagValues
     */
    @javax.annotation.Nullable
    public List<String> getTagValues() {
        return tagValues;
    }

    public void setTagValues(List<String> tagValues) {
        this.tagValues = tagValues;
    }

    public FiltersVpnConnection tags(List<String> tags) {

        this.tags = tags;
        return this;
    }

    public FiltersVpnConnection addTagsItem(String tagsItem) {
        if (this.tags == null) {
            this.tags = new ArrayList<>();
        }
        this.tags.add(tagsItem);
        return this;
    }

    /**
     * The key/value combination of the tags associated with the VPN connections, in the following
     * format:
     * &amp;quot;Filters&amp;quot;:{&amp;quot;Tags&amp;quot;:[&amp;quot;TAGKEY&#x3D;TAGVALUE&amp;quot;]}.
     *
     * @return tags
     */
    @javax.annotation.Nullable
    public List<String> getTags() {
        return tags;
    }

    public void setTags(List<String> tags) {
        this.tags = tags;
    }

    public FiltersVpnConnection virtualGatewayIds(List<String> virtualGatewayIds) {

        this.virtualGatewayIds = virtualGatewayIds;
        return this;
    }

    public FiltersVpnConnection addVirtualGatewayIdsItem(String virtualGatewayIdsItem) {
        if (this.virtualGatewayIds == null) {
            this.virtualGatewayIds = new ArrayList<>();
        }
        this.virtualGatewayIds.add(virtualGatewayIdsItem);
        return this;
    }

    /**
     * The IDs of the virtual gateways.
     *
     * @return virtualGatewayIds
     */
    @javax.annotation.Nullable
    public List<String> getVirtualGatewayIds() {
        return virtualGatewayIds;
    }

    public void setVirtualGatewayIds(List<String> virtualGatewayIds) {
        this.virtualGatewayIds = virtualGatewayIds;
    }

    public FiltersVpnConnection vpnConnectionIds(List<String> vpnConnectionIds) {

        this.vpnConnectionIds = vpnConnectionIds;
        return this;
    }

    public FiltersVpnConnection addVpnConnectionIdsItem(String vpnConnectionIdsItem) {
        if (this.vpnConnectionIds == null) {
            this.vpnConnectionIds = new ArrayList<>();
        }
        this.vpnConnectionIds.add(vpnConnectionIdsItem);
        return this;
    }

    /**
     * The IDs of the VPN connections.
     *
     * @return vpnConnectionIds
     */
    @javax.annotation.Nullable
    public List<String> getVpnConnectionIds() {
        return vpnConnectionIds;
    }

    public void setVpnConnectionIds(List<String> vpnConnectionIds) {
        this.vpnConnectionIds = vpnConnectionIds;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FiltersVpnConnection filtersVpnConnection = (FiltersVpnConnection) o;
        return Objects.equals(this.bgpAsns, filtersVpnConnection.bgpAsns)
                && Objects.equals(this.clientGatewayIds, filtersVpnConnection.clientGatewayIds)
                && Objects.equals(this.connectionTypes, filtersVpnConnection.connectionTypes)
                && Objects.equals(
                        this.routeDestinationIpRanges,
                        filtersVpnConnection.routeDestinationIpRanges)
                && Objects.equals(this.states, filtersVpnConnection.states)
                && Objects.equals(this.staticRoutesOnly, filtersVpnConnection.staticRoutesOnly)
                && Objects.equals(this.tagKeys, filtersVpnConnection.tagKeys)
                && Objects.equals(this.tagValues, filtersVpnConnection.tagValues)
                && Objects.equals(this.tags, filtersVpnConnection.tags)
                && Objects.equals(this.virtualGatewayIds, filtersVpnConnection.virtualGatewayIds)
                && Objects.equals(this.vpnConnectionIds, filtersVpnConnection.vpnConnectionIds);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                bgpAsns,
                clientGatewayIds,
                connectionTypes,
                routeDestinationIpRanges,
                states,
                staticRoutesOnly,
                tagKeys,
                tagValues,
                tags,
                virtualGatewayIds,
                vpnConnectionIds);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class FiltersVpnConnection {\n");
        sb.append("    bgpAsns: ").append(toIndentedString(bgpAsns)).append("\n");
        sb.append("    clientGatewayIds: ").append(toIndentedString(clientGatewayIds)).append("\n");
        sb.append("    connectionTypes: ").append(toIndentedString(connectionTypes)).append("\n");
        sb.append("    routeDestinationIpRanges: ")
                .append(toIndentedString(routeDestinationIpRanges))
                .append("\n");
        sb.append("    states: ").append(toIndentedString(states)).append("\n");
        sb.append("    staticRoutesOnly: ").append(toIndentedString(staticRoutesOnly)).append("\n");
        sb.append("    tagKeys: ").append(toIndentedString(tagKeys)).append("\n");
        sb.append("    tagValues: ").append(toIndentedString(tagValues)).append("\n");
        sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
        sb.append("    virtualGatewayIds: ")
                .append(toIndentedString(virtualGatewayIds))
                .append("\n");
        sb.append("    vpnConnectionIds: ").append(toIndentedString(vpnConnectionIds)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("BgpAsns");
        openapiFields.add("ClientGatewayIds");
        openapiFields.add("ConnectionTypes");
        openapiFields.add("RouteDestinationIpRanges");
        openapiFields.add("States");
        openapiFields.add("StaticRoutesOnly");
        openapiFields.add("TagKeys");
        openapiFields.add("TagValues");
        openapiFields.add("Tags");
        openapiFields.add("VirtualGatewayIds");
        openapiFields.add("VpnConnectionIds");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to FiltersVpnConnection
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!FiltersVpnConnection.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in FiltersVpnConnection is not found in"
                                        + " the empty JSON string",
                                FiltersVpnConnection.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!FiltersVpnConnection.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `FiltersVpnConnection` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("BgpAsns") != null && !jsonObj.get("BgpAsns").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `BgpAsns` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("BgpAsns").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("ClientGatewayIds") != null
                && !jsonObj.get("ClientGatewayIds").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `ClientGatewayIds` to be an array in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("ClientGatewayIds").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("ConnectionTypes") != null
                && !jsonObj.get("ConnectionTypes").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `ConnectionTypes` to be an array in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("ConnectionTypes").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("RouteDestinationIpRanges") != null
                && !jsonObj.get("RouteDestinationIpRanges").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `RouteDestinationIpRanges` to be an array in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("RouteDestinationIpRanges").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("States") != null && !jsonObj.get("States").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `States` to be an array in the JSON string but got"
                                    + " `%s`",
                            jsonObj.get("States").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("TagKeys") != null && !jsonObj.get("TagKeys").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `TagKeys` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("TagKeys").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("TagValues") != null && !jsonObj.get("TagValues").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `TagValues` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("TagValues").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `Tags` to be an array in the JSON string but got"
                                    + " `%s`",
                            jsonObj.get("Tags").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("VirtualGatewayIds") != null
                && !jsonObj.get("VirtualGatewayIds").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `VirtualGatewayIds` to be an array in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("VirtualGatewayIds").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("VpnConnectionIds") != null
                && !jsonObj.get("VpnConnectionIds").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `VpnConnectionIds` to be an array in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("VpnConnectionIds").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!FiltersVpnConnection.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'FiltersVpnConnection' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<FiltersVpnConnection> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(FiltersVpnConnection.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<FiltersVpnConnection>() {
                        @Override
                        public void write(JsonWriter out, FiltersVpnConnection value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public FiltersVpnConnection read(JsonReader in) throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of FiltersVpnConnection given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of FiltersVpnConnection
     * @throws IOException if the JSON string is invalid with respect to FiltersVpnConnection
     */
    public static FiltersVpnConnection fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, FiltersVpnConnection.class);
    }

    /**
     * Convert an instance of FiltersVpnConnection to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
