/*
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> Throttling: To protect against overloads, the number of identical requests allowed in a given time period is limited.<br /> Brute force: To protect against brute force attacks, the number of failed authentication attempts in a given time period is limited.<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/About-the-APIs.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).<br /> # Authentication Schemes ### Access Key/Secret Key The main way to authenticate your requests to the OUTSCALE API is to use an access key and a secret key.<br /> The mechanism behind this is based on AWS Signature Version 4, whose technical implementation details are described in [Signature of API Requests](https://docs.outscale.com/en/userguide/Signature-of-API-Requests.html).<br /><br /> In practice, the way to specify your access key and secret key depends on the tool or SDK you want to use to interact with the API.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify your access key, secret key, and the Region of your account. > 2. You then specify the `--profile` option when executing OSC CLI commands. >  > For more information, see [Installing and Configuring OSC CLI](https://docs.outscale.com/en/userguide/Installing-and-Configuring-OSC-CLI.html).  See the code samples in each section of this documentation for specific examples in different programming languages.<br /> For more information about access keys, see [About Access Keys](https://docs.outscale.com/en/userguide/About-Access-Keys.html).  > If you try to sign requests with an invalid access key four times in a row, further authentication attempts will be prevented for 1 minute. This lockout time increases 1 minute every four failed attempts, for up to 10 minutes.  ### Login/Password For certain API actions, you can also use basic authentication with the login (email address) and password of your TINA account.<br /> This is useful only in special circumstances, for example if you do not know your access key/secret key and want to retrieve them programmatically.<br /> In most cases, however, you can use the Cockpit web interface to retrieve them.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify the Region of your account, but you leave the access key value and secret key value empty (`&quot;&quot;`). > 2. You then specify the `--profile`, `--authentication-method`, `--login`, and `--password` options when executing OSC CLI commands.  See the code samples in each section of this documentation for specific examples in different programming languages.  > If you try to sign requests with an invalid password four times in a row, further authentication attempts will be prevented for 1 minute. This lockout time increases 1 minute every four failed attempts, for up to 10 minutes.  ### No Authentication A few API actions do not require any authentication. They are indicated as such in this documentation.<br /> ### Other Security Mechanisms In parallel with the authentication schemes, you can add other security mechanisms to your OUTSCALE account, for example to restrict API requests by IP or other criteria.<br /> For more information, see [Managing Your API Accesses](https://docs.outscale.com/en/userguide/Managing-Your-API-Accesses.html).<br /> # Error Codes Reference You can learn more about errors returned by the API in the dedicated [errors page](api-errors.html).
 *
 * The version of the OpenAPI document: 1.30.0
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.github.outscale.osc_sdk_java.client.model;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.outscale.osc_sdk_java.client.JSON;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/** CreateVmsRequest */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CreateVmsRequest {
    public static final String SERIALIZED_NAME_BLOCK_DEVICE_MAPPINGS = "BlockDeviceMappings";

    @SerializedName(SERIALIZED_NAME_BLOCK_DEVICE_MAPPINGS)
    private List<BlockDeviceMappingVmCreation> blockDeviceMappings = null;

    public static final String SERIALIZED_NAME_BOOT_ON_CREATION = "BootOnCreation";

    @SerializedName(SERIALIZED_NAME_BOOT_ON_CREATION)
    private Boolean bootOnCreation = true;

    public static final String SERIALIZED_NAME_BSU_OPTIMIZED = "BsuOptimized";

    @SerializedName(SERIALIZED_NAME_BSU_OPTIMIZED)
    private Boolean bsuOptimized;

    public static final String SERIALIZED_NAME_CLIENT_TOKEN = "ClientToken";

    @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
    private String clientToken;

    public static final String SERIALIZED_NAME_DELETION_PROTECTION = "DeletionProtection";

    @SerializedName(SERIALIZED_NAME_DELETION_PROTECTION)
    private Boolean deletionProtection;

    public static final String SERIALIZED_NAME_DRY_RUN = "DryRun";

    @SerializedName(SERIALIZED_NAME_DRY_RUN)
    private Boolean dryRun;

    public static final String SERIALIZED_NAME_IMAGE_ID = "ImageId";

    @SerializedName(SERIALIZED_NAME_IMAGE_ID)
    private String imageId;

    public static final String SERIALIZED_NAME_KEYPAIR_NAME = "KeypairName";

    @SerializedName(SERIALIZED_NAME_KEYPAIR_NAME)
    private String keypairName;

    public static final String SERIALIZED_NAME_MAX_VMS_COUNT = "MaxVmsCount";

    @SerializedName(SERIALIZED_NAME_MAX_VMS_COUNT)
    private Integer maxVmsCount;

    public static final String SERIALIZED_NAME_MIN_VMS_COUNT = "MinVmsCount";

    @SerializedName(SERIALIZED_NAME_MIN_VMS_COUNT)
    private Integer minVmsCount;

    public static final String SERIALIZED_NAME_NESTED_VIRTUALIZATION = "NestedVirtualization";

    @SerializedName(SERIALIZED_NAME_NESTED_VIRTUALIZATION)
    private Boolean nestedVirtualization = false;

    public static final String SERIALIZED_NAME_NICS = "Nics";

    @SerializedName(SERIALIZED_NAME_NICS)
    private List<NicForVmCreation> nics = null;

    /**
     * The performance of the VM (&#x60;medium&#x60; \\| &#x60;high&#x60; \\| &#x60;highest&#x60;).
     * By default, &#x60;high&#x60;. This parameter is ignored if you specify a performance flag
     * directly in the &#x60;VmType&#x60; parameter.
     */
    @JsonAdapter(PerformanceEnum.Adapter.class)
    public enum PerformanceEnum {
        MEDIUM("medium"),

        HIGH("high"),

        HIGHEST("highest");

        private String value;

        PerformanceEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static PerformanceEnum fromValue(String value) {
            for (PerformanceEnum b : PerformanceEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        public static class Adapter extends TypeAdapter<PerformanceEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final PerformanceEnum enumeration)
                    throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public PerformanceEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return PerformanceEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_PERFORMANCE = "Performance";

    @SerializedName(SERIALIZED_NAME_PERFORMANCE)
    private PerformanceEnum performance = PerformanceEnum.HIGH;

    public static final String SERIALIZED_NAME_PLACEMENT = "Placement";

    @SerializedName(SERIALIZED_NAME_PLACEMENT)
    private Placement placement;

    public static final String SERIALIZED_NAME_PRIVATE_IPS = "PrivateIps";

    @SerializedName(SERIALIZED_NAME_PRIVATE_IPS)
    private List<String> privateIps = null;

    public static final String SERIALIZED_NAME_SECURITY_GROUP_IDS = "SecurityGroupIds";

    @SerializedName(SERIALIZED_NAME_SECURITY_GROUP_IDS)
    private List<String> securityGroupIds = null;

    public static final String SERIALIZED_NAME_SECURITY_GROUPS = "SecurityGroups";

    @SerializedName(SERIALIZED_NAME_SECURITY_GROUPS)
    private List<String> securityGroups = null;

    public static final String SERIALIZED_NAME_SUBNET_ID = "SubnetId";

    @SerializedName(SERIALIZED_NAME_SUBNET_ID)
    private String subnetId;

    public static final String SERIALIZED_NAME_USER_DATA = "UserData";

    @SerializedName(SERIALIZED_NAME_USER_DATA)
    private String userData;

    public static final String SERIALIZED_NAME_VM_INITIATED_SHUTDOWN_BEHAVIOR =
            "VmInitiatedShutdownBehavior";

    @SerializedName(SERIALIZED_NAME_VM_INITIATED_SHUTDOWN_BEHAVIOR)
    private String vmInitiatedShutdownBehavior = "stop";

    public static final String SERIALIZED_NAME_VM_TYPE = "VmType";

    @SerializedName(SERIALIZED_NAME_VM_TYPE)
    private String vmType;

    public CreateVmsRequest() {}

    public CreateVmsRequest blockDeviceMappings(
            List<BlockDeviceMappingVmCreation> blockDeviceMappings) {

        this.blockDeviceMappings = blockDeviceMappings;
        return this;
    }

    public CreateVmsRequest addBlockDeviceMappingsItem(
            BlockDeviceMappingVmCreation blockDeviceMappingsItem) {
        if (this.blockDeviceMappings == null) {
            this.blockDeviceMappings = new ArrayList<>();
        }
        this.blockDeviceMappings.add(blockDeviceMappingsItem);
        return this;
    }

    /**
     * One or more block device mappings.
     *
     * @return blockDeviceMappings
     */
    @javax.annotation.Nullable
    public List<BlockDeviceMappingVmCreation> getBlockDeviceMappings() {
        return blockDeviceMappings;
    }

    public void setBlockDeviceMappings(List<BlockDeviceMappingVmCreation> blockDeviceMappings) {
        this.blockDeviceMappings = blockDeviceMappings;
    }

    public CreateVmsRequest bootOnCreation(Boolean bootOnCreation) {

        this.bootOnCreation = bootOnCreation;
        return this;
    }

    /**
     * By default or if true, the VM is started on creation. If false, the VM is stopped on
     * creation.
     *
     * @return bootOnCreation
     */
    @javax.annotation.Nullable
    public Boolean getBootOnCreation() {
        return bootOnCreation;
    }

    public void setBootOnCreation(Boolean bootOnCreation) {
        this.bootOnCreation = bootOnCreation;
    }

    public CreateVmsRequest bsuOptimized(Boolean bsuOptimized) {

        this.bsuOptimized = bsuOptimized;
        return this;
    }

    /**
     * This parameter is not available. It is present in our API for the sake of historical
     * compatibility with AWS.
     *
     * @return bsuOptimized
     */
    @javax.annotation.Nullable
    public Boolean getBsuOptimized() {
        return bsuOptimized;
    }

    public void setBsuOptimized(Boolean bsuOptimized) {
        this.bsuOptimized = bsuOptimized;
    }

    public CreateVmsRequest clientToken(String clientToken) {

        this.clientToken = clientToken;
        return this;
    }

    /**
     * A unique identifier which enables you to manage the idempotency.
     *
     * @return clientToken
     */
    @javax.annotation.Nullable
    public String getClientToken() {
        return clientToken;
    }

    public void setClientToken(String clientToken) {
        this.clientToken = clientToken;
    }

    public CreateVmsRequest deletionProtection(Boolean deletionProtection) {

        this.deletionProtection = deletionProtection;
        return this;
    }

    /**
     * If true, you cannot delete the VM unless you change this parameter back to false.
     *
     * @return deletionProtection
     */
    @javax.annotation.Nullable
    public Boolean getDeletionProtection() {
        return deletionProtection;
    }

    public void setDeletionProtection(Boolean deletionProtection) {
        this.deletionProtection = deletionProtection;
    }

    public CreateVmsRequest dryRun(Boolean dryRun) {

        this.dryRun = dryRun;
        return this;
    }

    /**
     * If true, checks whether you have the required permissions to perform the action.
     *
     * @return dryRun
     */
    @javax.annotation.Nullable
    public Boolean getDryRun() {
        return dryRun;
    }

    public void setDryRun(Boolean dryRun) {
        this.dryRun = dryRun;
    }

    public CreateVmsRequest imageId(String imageId) {

        this.imageId = imageId;
        return this;
    }

    /**
     * The ID of the OMI used to create the VM. You can find the list of OMIs by calling the
     * [ReadImages](#readimages) method.
     *
     * @return imageId
     */
    @javax.annotation.Nonnull
    public String getImageId() {
        return imageId;
    }

    public void setImageId(String imageId) {
        this.imageId = imageId;
    }

    public CreateVmsRequest keypairName(String keypairName) {

        this.keypairName = keypairName;
        return this;
    }

    /**
     * The name of the keypair.
     *
     * @return keypairName
     */
    @javax.annotation.Nullable
    public String getKeypairName() {
        return keypairName;
    }

    public void setKeypairName(String keypairName) {
        this.keypairName = keypairName;
    }

    public CreateVmsRequest maxVmsCount(Integer maxVmsCount) {

        this.maxVmsCount = maxVmsCount;
        return this;
    }

    /**
     * The maximum number of VMs you want to create. If all the VMs cannot be created, the largest
     * possible number of VMs above MinVmsCount is created.
     *
     * @return maxVmsCount
     */
    @javax.annotation.Nullable
    public Integer getMaxVmsCount() {
        return maxVmsCount;
    }

    public void setMaxVmsCount(Integer maxVmsCount) {
        this.maxVmsCount = maxVmsCount;
    }

    public CreateVmsRequest minVmsCount(Integer minVmsCount) {

        this.minVmsCount = minVmsCount;
        return this;
    }

    /**
     * The minimum number of VMs you want to create. If this number of VMs cannot be created, no VMs
     * are created.
     *
     * @return minVmsCount
     */
    @javax.annotation.Nullable
    public Integer getMinVmsCount() {
        return minVmsCount;
    }

    public void setMinVmsCount(Integer minVmsCount) {
        this.minVmsCount = minVmsCount;
    }

    public CreateVmsRequest nestedVirtualization(Boolean nestedVirtualization) {

        this.nestedVirtualization = nestedVirtualization;
        return this;
    }

    /**
     * (dedicated tenancy only) If true, nested virtualization is enabled. If false, it is disabled.
     *
     * @return nestedVirtualization
     */
    @javax.annotation.Nullable
    public Boolean getNestedVirtualization() {
        return nestedVirtualization;
    }

    public void setNestedVirtualization(Boolean nestedVirtualization) {
        this.nestedVirtualization = nestedVirtualization;
    }

    public CreateVmsRequest nics(List<NicForVmCreation> nics) {

        this.nics = nics;
        return this;
    }

    public CreateVmsRequest addNicsItem(NicForVmCreation nicsItem) {
        if (this.nics == null) {
            this.nics = new ArrayList<>();
        }
        this.nics.add(nicsItem);
        return this;
    }

    /**
     * One or more NICs. If you specify this parameter, you must not specify the
     * &#x60;SubnetId&#x60; and &#x60;SubregionName&#x60; parameters. You also must define one NIC
     * as the primary network interface of the VM with &#x60;0&#x60; as its device number.
     *
     * @return nics
     */
    @javax.annotation.Nullable
    public List<NicForVmCreation> getNics() {
        return nics;
    }

    public void setNics(List<NicForVmCreation> nics) {
        this.nics = nics;
    }

    public CreateVmsRequest performance(PerformanceEnum performance) {

        this.performance = performance;
        return this;
    }

    /**
     * The performance of the VM (&#x60;medium&#x60; \\| &#x60;high&#x60; \\| &#x60;highest&#x60;).
     * By default, &#x60;high&#x60;. This parameter is ignored if you specify a performance flag
     * directly in the &#x60;VmType&#x60; parameter.
     *
     * @return performance
     */
    @javax.annotation.Nullable
    public PerformanceEnum getPerformance() {
        return performance;
    }

    public void setPerformance(PerformanceEnum performance) {
        this.performance = performance;
    }

    public CreateVmsRequest placement(Placement placement) {

        this.placement = placement;
        return this;
    }

    /**
     * Get placement
     *
     * @return placement
     */
    @javax.annotation.Nullable
    public Placement getPlacement() {
        return placement;
    }

    public void setPlacement(Placement placement) {
        this.placement = placement;
    }

    public CreateVmsRequest privateIps(List<String> privateIps) {

        this.privateIps = privateIps;
        return this;
    }

    public CreateVmsRequest addPrivateIpsItem(String privateIpsItem) {
        if (this.privateIps == null) {
            this.privateIps = new ArrayList<>();
        }
        this.privateIps.add(privateIpsItem);
        return this;
    }

    /**
     * One or more private IPs of the VM.
     *
     * @return privateIps
     */
    @javax.annotation.Nullable
    public List<String> getPrivateIps() {
        return privateIps;
    }

    public void setPrivateIps(List<String> privateIps) {
        this.privateIps = privateIps;
    }

    public CreateVmsRequest securityGroupIds(List<String> securityGroupIds) {

        this.securityGroupIds = securityGroupIds;
        return this;
    }

    public CreateVmsRequest addSecurityGroupIdsItem(String securityGroupIdsItem) {
        if (this.securityGroupIds == null) {
            this.securityGroupIds = new ArrayList<>();
        }
        this.securityGroupIds.add(securityGroupIdsItem);
        return this;
    }

    /**
     * One or more IDs of security group for the VMs.
     *
     * @return securityGroupIds
     */
    @javax.annotation.Nullable
    public List<String> getSecurityGroupIds() {
        return securityGroupIds;
    }

    public void setSecurityGroupIds(List<String> securityGroupIds) {
        this.securityGroupIds = securityGroupIds;
    }

    public CreateVmsRequest securityGroups(List<String> securityGroups) {

        this.securityGroups = securityGroups;
        return this;
    }

    public CreateVmsRequest addSecurityGroupsItem(String securityGroupsItem) {
        if (this.securityGroups == null) {
            this.securityGroups = new ArrayList<>();
        }
        this.securityGroups.add(securityGroupsItem);
        return this;
    }

    /**
     * One or more names of security groups for the VMs.
     *
     * @return securityGroups
     */
    @javax.annotation.Nullable
    public List<String> getSecurityGroups() {
        return securityGroups;
    }

    public void setSecurityGroups(List<String> securityGroups) {
        this.securityGroups = securityGroups;
    }

    public CreateVmsRequest subnetId(String subnetId) {

        this.subnetId = subnetId;
        return this;
    }

    /**
     * The ID of the Subnet in which you want to create the VM. If you specify this parameter, you
     * must not specify the &#x60;Nics&#x60; parameter.
     *
     * @return subnetId
     */
    @javax.annotation.Nullable
    public String getSubnetId() {
        return subnetId;
    }

    public void setSubnetId(String subnetId) {
        this.subnetId = subnetId;
    }

    public CreateVmsRequest userData(String userData) {

        this.userData = userData;
        return this;
    }

    /**
     * Data or script used to add a specific configuration to the VM. It must be Base64-encoded and
     * is limited to 500 kibibytes (KiB).
     *
     * @return userData
     */
    @javax.annotation.Nullable
    public String getUserData() {
        return userData;
    }

    public void setUserData(String userData) {
        this.userData = userData;
    }

    public CreateVmsRequest vmInitiatedShutdownBehavior(String vmInitiatedShutdownBehavior) {

        this.vmInitiatedShutdownBehavior = vmInitiatedShutdownBehavior;
        return this;
    }

    /**
     * The VM behavior when you stop it. By default or if set to &#x60;stop&#x60;, the VM stops. If
     * set to &#x60;restart&#x60;, the VM stops then automatically restarts. If set to
     * &#x60;terminate&#x60;, the VM stops and is terminated.
     *
     * @return vmInitiatedShutdownBehavior
     */
    @javax.annotation.Nullable
    public String getVmInitiatedShutdownBehavior() {
        return vmInitiatedShutdownBehavior;
    }

    public void setVmInitiatedShutdownBehavior(String vmInitiatedShutdownBehavior) {
        this.vmInitiatedShutdownBehavior = vmInitiatedShutdownBehavior;
    }

    public CreateVmsRequest vmType(String vmType) {

        this.vmType = vmType;
        return this;
    }

    /**
     * The type of VM. You can specify a TINA type (in the &#x60;tinavW.cXrYpZ&#x60; or
     * &#x60;tinavW.cXrY&#x60; format), or an AWS type (for example, &#x60;t2.small&#x60;, which is
     * the default value).&lt;br /&gt; If you specify an AWS type, it is converted in the background
     * to its corresponding TINA type, but the AWS type is still returned. If the specified or
     * converted TINA type includes a performance flag, this performance flag is applied regardless
     * of the value you may have provided in the &#x60;Performance&#x60; parameter. For more
     * information, see [VM Types](https://docs.outscale.com/en/userguide/VM-Types.html).
     *
     * @return vmType
     */
    @javax.annotation.Nullable
    public String getVmType() {
        return vmType;
    }

    public void setVmType(String vmType) {
        this.vmType = vmType;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateVmsRequest createVmsRequest = (CreateVmsRequest) o;
        return Objects.equals(this.blockDeviceMappings, createVmsRequest.blockDeviceMappings)
                && Objects.equals(this.bootOnCreation, createVmsRequest.bootOnCreation)
                && Objects.equals(this.bsuOptimized, createVmsRequest.bsuOptimized)
                && Objects.equals(this.clientToken, createVmsRequest.clientToken)
                && Objects.equals(this.deletionProtection, createVmsRequest.deletionProtection)
                && Objects.equals(this.dryRun, createVmsRequest.dryRun)
                && Objects.equals(this.imageId, createVmsRequest.imageId)
                && Objects.equals(this.keypairName, createVmsRequest.keypairName)
                && Objects.equals(this.maxVmsCount, createVmsRequest.maxVmsCount)
                && Objects.equals(this.minVmsCount, createVmsRequest.minVmsCount)
                && Objects.equals(this.nestedVirtualization, createVmsRequest.nestedVirtualization)
                && Objects.equals(this.nics, createVmsRequest.nics)
                && Objects.equals(this.performance, createVmsRequest.performance)
                && Objects.equals(this.placement, createVmsRequest.placement)
                && Objects.equals(this.privateIps, createVmsRequest.privateIps)
                && Objects.equals(this.securityGroupIds, createVmsRequest.securityGroupIds)
                && Objects.equals(this.securityGroups, createVmsRequest.securityGroups)
                && Objects.equals(this.subnetId, createVmsRequest.subnetId)
                && Objects.equals(this.userData, createVmsRequest.userData)
                && Objects.equals(
                        this.vmInitiatedShutdownBehavior,
                        createVmsRequest.vmInitiatedShutdownBehavior)
                && Objects.equals(this.vmType, createVmsRequest.vmType);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                blockDeviceMappings,
                bootOnCreation,
                bsuOptimized,
                clientToken,
                deletionProtection,
                dryRun,
                imageId,
                keypairName,
                maxVmsCount,
                minVmsCount,
                nestedVirtualization,
                nics,
                performance,
                placement,
                privateIps,
                securityGroupIds,
                securityGroups,
                subnetId,
                userData,
                vmInitiatedShutdownBehavior,
                vmType);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CreateVmsRequest {\n");
        sb.append("    blockDeviceMappings: ")
                .append(toIndentedString(blockDeviceMappings))
                .append("\n");
        sb.append("    bootOnCreation: ").append(toIndentedString(bootOnCreation)).append("\n");
        sb.append("    bsuOptimized: ").append(toIndentedString(bsuOptimized)).append("\n");
        sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
        sb.append("    deletionProtection: ")
                .append(toIndentedString(deletionProtection))
                .append("\n");
        sb.append("    dryRun: ").append(toIndentedString(dryRun)).append("\n");
        sb.append("    imageId: ").append(toIndentedString(imageId)).append("\n");
        sb.append("    keypairName: ").append(toIndentedString(keypairName)).append("\n");
        sb.append("    maxVmsCount: ").append(toIndentedString(maxVmsCount)).append("\n");
        sb.append("    minVmsCount: ").append(toIndentedString(minVmsCount)).append("\n");
        sb.append("    nestedVirtualization: ")
                .append(toIndentedString(nestedVirtualization))
                .append("\n");
        sb.append("    nics: ").append(toIndentedString(nics)).append("\n");
        sb.append("    performance: ").append(toIndentedString(performance)).append("\n");
        sb.append("    placement: ").append(toIndentedString(placement)).append("\n");
        sb.append("    privateIps: ").append(toIndentedString(privateIps)).append("\n");
        sb.append("    securityGroupIds: ").append(toIndentedString(securityGroupIds)).append("\n");
        sb.append("    securityGroups: ").append(toIndentedString(securityGroups)).append("\n");
        sb.append("    subnetId: ").append(toIndentedString(subnetId)).append("\n");
        sb.append("    userData: ").append(toIndentedString(userData)).append("\n");
        sb.append("    vmInitiatedShutdownBehavior: ")
                .append(toIndentedString(vmInitiatedShutdownBehavior))
                .append("\n");
        sb.append("    vmType: ").append(toIndentedString(vmType)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("BlockDeviceMappings");
        openapiFields.add("BootOnCreation");
        openapiFields.add("BsuOptimized");
        openapiFields.add("ClientToken");
        openapiFields.add("DeletionProtection");
        openapiFields.add("DryRun");
        openapiFields.add("ImageId");
        openapiFields.add("KeypairName");
        openapiFields.add("MaxVmsCount");
        openapiFields.add("MinVmsCount");
        openapiFields.add("NestedVirtualization");
        openapiFields.add("Nics");
        openapiFields.add("Performance");
        openapiFields.add("Placement");
        openapiFields.add("PrivateIps");
        openapiFields.add("SecurityGroupIds");
        openapiFields.add("SecurityGroups");
        openapiFields.add("SubnetId");
        openapiFields.add("UserData");
        openapiFields.add("VmInitiatedShutdownBehavior");
        openapiFields.add("VmType");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("ImageId");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to CreateVmsRequest
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!CreateVmsRequest.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in CreateVmsRequest is not found in the"
                                        + " empty JSON string",
                                CreateVmsRequest.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!CreateVmsRequest.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `CreateVmsRequest` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : CreateVmsRequest.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonObj.toString()));
            }
        }
        if (jsonObj.get("BlockDeviceMappings") != null
                && !jsonObj.get("BlockDeviceMappings").isJsonNull()) {
            JsonArray jsonArrayblockDeviceMappings = jsonObj.getAsJsonArray("BlockDeviceMappings");
            if (jsonArrayblockDeviceMappings != null) {
                // ensure the json data is an array
                if (!jsonObj.get("BlockDeviceMappings").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `BlockDeviceMappings` to be an array in"
                                            + " the JSON string but got `%s`",
                                    jsonObj.get("BlockDeviceMappings").toString()));
                }

                // validate the optional field `BlockDeviceMappings` (array)
                for (int i = 0; i < jsonArrayblockDeviceMappings.size(); i++) {
                    BlockDeviceMappingVmCreation.validateJsonObject(
                            jsonArrayblockDeviceMappings.get(i).getAsJsonObject());
                }
                ;
            }
        }
        if ((jsonObj.get("ClientToken") != null && !jsonObj.get("ClientToken").isJsonNull())
                && !jsonObj.get("ClientToken").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `ClientToken` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("ClientToken").toString()));
        }
        if (!jsonObj.get("ImageId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `ImageId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("ImageId").toString()));
        }
        if ((jsonObj.get("KeypairName") != null && !jsonObj.get("KeypairName").isJsonNull())
                && !jsonObj.get("KeypairName").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `KeypairName` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("KeypairName").toString()));
        }
        if (jsonObj.get("Nics") != null && !jsonObj.get("Nics").isJsonNull()) {
            JsonArray jsonArraynics = jsonObj.getAsJsonArray("Nics");
            if (jsonArraynics != null) {
                // ensure the json data is an array
                if (!jsonObj.get("Nics").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `Nics` to be an array in the JSON string"
                                            + " but got `%s`",
                                    jsonObj.get("Nics").toString()));
                }

                // validate the optional field `Nics` (array)
                for (int i = 0; i < jsonArraynics.size(); i++) {
                    NicForVmCreation.validateJsonObject(jsonArraynics.get(i).getAsJsonObject());
                }
                ;
            }
        }
        if ((jsonObj.get("Performance") != null && !jsonObj.get("Performance").isJsonNull())
                && !jsonObj.get("Performance").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `Performance` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("Performance").toString()));
        }
        // validate the optional field `Placement`
        if (jsonObj.get("Placement") != null && !jsonObj.get("Placement").isJsonNull()) {
            Placement.validateJsonObject(jsonObj.getAsJsonObject("Placement"));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("PrivateIps") != null && !jsonObj.get("PrivateIps").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `PrivateIps` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("PrivateIps").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("SecurityGroupIds") != null
                && !jsonObj.get("SecurityGroupIds").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `SecurityGroupIds` to be an array in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("SecurityGroupIds").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("SecurityGroups") != null && !jsonObj.get("SecurityGroups").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `SecurityGroups` to be an array in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("SecurityGroups").toString()));
        }
        if ((jsonObj.get("SubnetId") != null && !jsonObj.get("SubnetId").isJsonNull())
                && !jsonObj.get("SubnetId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `SubnetId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("SubnetId").toString()));
        }
        if ((jsonObj.get("UserData") != null && !jsonObj.get("UserData").isJsonNull())
                && !jsonObj.get("UserData").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `UserData` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("UserData").toString()));
        }
        if ((jsonObj.get("VmInitiatedShutdownBehavior") != null
                        && !jsonObj.get("VmInitiatedShutdownBehavior").isJsonNull())
                && !jsonObj.get("VmInitiatedShutdownBehavior").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `VmInitiatedShutdownBehavior` to be a primitive"
                                    + " type in the JSON string but got `%s`",
                            jsonObj.get("VmInitiatedShutdownBehavior").toString()));
        }
        if ((jsonObj.get("VmType") != null && !jsonObj.get("VmType").isJsonNull())
                && !jsonObj.get("VmType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `VmType` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("VmType").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CreateVmsRequest.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CreateVmsRequest' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CreateVmsRequest> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(CreateVmsRequest.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<CreateVmsRequest>() {
                        @Override
                        public void write(JsonWriter out, CreateVmsRequest value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public CreateVmsRequest read(JsonReader in) throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of CreateVmsRequest given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of CreateVmsRequest
     * @throws IOException if the JSON string is invalid with respect to CreateVmsRequest
     */
    public static CreateVmsRequest fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CreateVmsRequest.class);
    }

    /**
     * Convert an instance of CreateVmsRequest to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
