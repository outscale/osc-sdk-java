/*
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> You can learn more about errors returned by the API in the dedicated [errors page](api/errors).<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).
 *
 * The version of the OpenAPI document: 1.26
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.github.outscale.osc_sdk_java.client.auth;

import com.amazonaws.DefaultRequest;
import com.amazonaws.auth.AWS4Signer;
import com.amazonaws.auth.AWSCredentials;
import com.amazonaws.auth.AnonymousAWSCredentials;
import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.http.HttpMethodName;
import io.github.outscale.osc_sdk_java.client.ApiException;
import io.github.outscale.osc_sdk_java.client.Pair;
import java.io.ByteArrayInputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AWS4Auth implements Authentication {

    private AWSCredentials credentials;
    private String region;
    private String service;

    public AWS4Auth() {
        this.credentials = new AnonymousAWSCredentials();
    }

    public void setCredentials(String accessKey, String secretKey) {
        this.credentials = new BasicAWSCredentials(accessKey, secretKey);
    }

    public void setRegion(String region) {
        this.region = region;
    }

    public void setService(String service) {
        this.service = service;
    }

    @Override
    public void applyToParams(
            List<Pair> queryParams,
            Map<String, String> headerParams,
            Map<String, String> cookieParams,
            String payload,
            String method,
            URI uri)
            throws ApiException {

        DefaultRequest<String> signableRequest = new DefaultRequest<>(this.service);

        signableRequest.setContent(new ByteArrayInputStream(payload.getBytes()));

        signableRequest.setHttpMethod(HttpMethodName.valueOf(method));
        URI targetUri = null;
        try {
            targetUri = new URI(uri.getScheme(), "", uri.getHost(), uri.getPort(), "", "", "");
        } catch (URISyntaxException e) {
            return;
        }
        signableRequest.setEndpoint(targetUri);
        signableRequest.setResourcePath(uri.getPath());

        AWS4Signer signer = new AWS4Signer(false);
        signer.setServiceName(this.service);
        signer.setRegionName(this.region);
        signer.sign(signableRequest, credentials);

        headerParams.putAll(signableRequest.getHeaders());
    }
}
