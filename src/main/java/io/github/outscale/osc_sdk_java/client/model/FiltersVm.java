/*
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> Throttling: To protect against overloads, the number of identical requests allowed in a given time period is limited.<br /> Brute force: To protect against brute force attacks, the number of failed authentication attempts in a given time period is limited.<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/About-the-APIs.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).<br /> # Authentication Schemes ### Access Key/Secret Key The main way to authenticate your requests to the OUTSCALE API is to use an access key and a secret key.<br /> The mechanism behind this is based on AWS Signature Version 4, whose technical implementation details are described in [Signature of API Requests](https://docs.outscale.com/en/userguide/Signature-of-API-Requests.html).<br /><br /> In practice, the way to specify your access key and secret key depends on the tool or SDK you want to use to interact with the API.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify your access key, secret key, and the Region of your account. > 2. You then specify the `--profile` option when executing OSC CLI commands. >  > For more information, see [Installing and Configuring OSC CLI](https://docs.outscale.com/en/userguide/Installing-and-Configuring-OSC-CLI.html).  See the code samples in each section of this documentation for specific examples in different programming languages.<br /> For more information about access keys, see [About Access Keys](https://docs.outscale.com/en/userguide/About-Access-Keys.html).  > If you try to sign requests with an invalid access key four times in a row, further authentication attempts will be prevented for 1 minute. This lockout time increases 1 minute every four failed attempts, for up to 10 minutes.  ### Login/Password For certain API actions, you can also use basic authentication with the login (email address) and password of your TINA account.<br /> This is useful only in special circumstances, for example if you do not know your access key/secret key and want to retrieve them programmatically.<br /> In most cases, however, you can use the Cockpit web interface to retrieve them.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify the Region of your account, but you leave the access key value and secret key value empty (`&quot;&quot;`). > 2. You then specify the `--profile`, `--authentication-method`, `--login`, and `--password` options when executing OSC CLI commands.  See the code samples in each section of this documentation for specific examples in different programming languages.  > If you try to sign requests with an invalid password four times in a row, further authentication attempts will be prevented for 1 minute. This lockout time increases 1 minute every four failed attempts, for up to 10 minutes.  ### No Authentication A few API actions do not require any authentication. They are indicated as such in this documentation.<br /> ### Other Security Mechanisms In parallel with the authentication schemes, you can add other security mechanisms to your OUTSCALE account, for example to restrict API requests by IP or other criteria.<br /> For more information, see [Managing Your API Accesses](https://docs.outscale.com/en/userguide/Managing-Your-API-Accesses.html).<br /> # Error Codes Reference You can learn more about errors returned by the API in the dedicated [errors page](api-errors.html).
 *
 * The version of the OpenAPI document: 1.30.0
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.github.outscale.osc_sdk_java.client.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.outscale.osc_sdk_java.client.JSON;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/** One or more filters. */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FiltersVm {
    public static final String SERIALIZED_NAME_ARCHITECTURES = "Architectures";

    @SerializedName(SERIALIZED_NAME_ARCHITECTURES)
    private List<String> architectures = null;

    public static final String SERIALIZED_NAME_BLOCK_DEVICE_MAPPING_DELETE_ON_VM_DELETION =
            "BlockDeviceMappingDeleteOnVmDeletion";

    @SerializedName(SERIALIZED_NAME_BLOCK_DEVICE_MAPPING_DELETE_ON_VM_DELETION)
    private Boolean blockDeviceMappingDeleteOnVmDeletion;

    public static final String SERIALIZED_NAME_BLOCK_DEVICE_MAPPING_DEVICE_NAMES =
            "BlockDeviceMappingDeviceNames";

    @SerializedName(SERIALIZED_NAME_BLOCK_DEVICE_MAPPING_DEVICE_NAMES)
    private List<String> blockDeviceMappingDeviceNames = null;

    public static final String SERIALIZED_NAME_BLOCK_DEVICE_MAPPING_LINK_DATES =
            "BlockDeviceMappingLinkDates";

    @SerializedName(SERIALIZED_NAME_BLOCK_DEVICE_MAPPING_LINK_DATES)
    private List<LocalDate> blockDeviceMappingLinkDates = null;

    public static final String SERIALIZED_NAME_BLOCK_DEVICE_MAPPING_STATES =
            "BlockDeviceMappingStates";

    @SerializedName(SERIALIZED_NAME_BLOCK_DEVICE_MAPPING_STATES)
    private List<String> blockDeviceMappingStates = null;

    public static final String SERIALIZED_NAME_BLOCK_DEVICE_MAPPING_VOLUME_IDS =
            "BlockDeviceMappingVolumeIds";

    @SerializedName(SERIALIZED_NAME_BLOCK_DEVICE_MAPPING_VOLUME_IDS)
    private List<String> blockDeviceMappingVolumeIds = null;

    public static final String SERIALIZED_NAME_CLIENT_TOKENS = "ClientTokens";

    @SerializedName(SERIALIZED_NAME_CLIENT_TOKENS)
    private List<String> clientTokens = null;

    public static final String SERIALIZED_NAME_CREATION_DATES = "CreationDates";

    @SerializedName(SERIALIZED_NAME_CREATION_DATES)
    private List<LocalDate> creationDates = null;

    public static final String SERIALIZED_NAME_IMAGE_IDS = "ImageIds";

    @SerializedName(SERIALIZED_NAME_IMAGE_IDS)
    private List<String> imageIds = null;

    public static final String SERIALIZED_NAME_IS_SOURCE_DEST_CHECKED = "IsSourceDestChecked";

    @SerializedName(SERIALIZED_NAME_IS_SOURCE_DEST_CHECKED)
    private Boolean isSourceDestChecked;

    public static final String SERIALIZED_NAME_KEYPAIR_NAMES = "KeypairNames";

    @SerializedName(SERIALIZED_NAME_KEYPAIR_NAMES)
    private List<String> keypairNames = null;

    public static final String SERIALIZED_NAME_LAUNCH_NUMBERS = "LaunchNumbers";

    @SerializedName(SERIALIZED_NAME_LAUNCH_NUMBERS)
    private List<Integer> launchNumbers = null;

    public static final String SERIALIZED_NAME_LIFECYCLES = "Lifecycles";

    @SerializedName(SERIALIZED_NAME_LIFECYCLES)
    private List<String> lifecycles = null;

    public static final String SERIALIZED_NAME_NET_IDS = "NetIds";

    @SerializedName(SERIALIZED_NAME_NET_IDS)
    private List<String> netIds = null;

    public static final String SERIALIZED_NAME_NIC_ACCOUNT_IDS = "NicAccountIds";

    @SerializedName(SERIALIZED_NAME_NIC_ACCOUNT_IDS)
    private List<String> nicAccountIds = null;

    public static final String SERIALIZED_NAME_NIC_DESCRIPTIONS = "NicDescriptions";

    @SerializedName(SERIALIZED_NAME_NIC_DESCRIPTIONS)
    private List<String> nicDescriptions = null;

    public static final String SERIALIZED_NAME_NIC_IS_SOURCE_DEST_CHECKED =
            "NicIsSourceDestChecked";

    @SerializedName(SERIALIZED_NAME_NIC_IS_SOURCE_DEST_CHECKED)
    private Boolean nicIsSourceDestChecked;

    public static final String SERIALIZED_NAME_NIC_LINK_NIC_DELETE_ON_VM_DELETION =
            "NicLinkNicDeleteOnVmDeletion";

    @SerializedName(SERIALIZED_NAME_NIC_LINK_NIC_DELETE_ON_VM_DELETION)
    private Boolean nicLinkNicDeleteOnVmDeletion;

    public static final String SERIALIZED_NAME_NIC_LINK_NIC_DEVICE_NUMBERS =
            "NicLinkNicDeviceNumbers";

    @SerializedName(SERIALIZED_NAME_NIC_LINK_NIC_DEVICE_NUMBERS)
    private List<Integer> nicLinkNicDeviceNumbers = null;

    public static final String SERIALIZED_NAME_NIC_LINK_NIC_LINK_NIC_DATES =
            "NicLinkNicLinkNicDates";

    @SerializedName(SERIALIZED_NAME_NIC_LINK_NIC_LINK_NIC_DATES)
    private List<LocalDate> nicLinkNicLinkNicDates = null;

    public static final String SERIALIZED_NAME_NIC_LINK_NIC_LINK_NIC_IDS = "NicLinkNicLinkNicIds";

    @SerializedName(SERIALIZED_NAME_NIC_LINK_NIC_LINK_NIC_IDS)
    private List<String> nicLinkNicLinkNicIds = null;

    public static final String SERIALIZED_NAME_NIC_LINK_NIC_STATES = "NicLinkNicStates";

    @SerializedName(SERIALIZED_NAME_NIC_LINK_NIC_STATES)
    private List<String> nicLinkNicStates = null;

    public static final String SERIALIZED_NAME_NIC_LINK_NIC_VM_ACCOUNT_IDS =
            "NicLinkNicVmAccountIds";

    @SerializedName(SERIALIZED_NAME_NIC_LINK_NIC_VM_ACCOUNT_IDS)
    private List<String> nicLinkNicVmAccountIds = null;

    public static final String SERIALIZED_NAME_NIC_LINK_NIC_VM_IDS = "NicLinkNicVmIds";

    @SerializedName(SERIALIZED_NAME_NIC_LINK_NIC_VM_IDS)
    private List<String> nicLinkNicVmIds = null;

    public static final String SERIALIZED_NAME_NIC_LINK_PUBLIC_IP_ACCOUNT_IDS =
            "NicLinkPublicIpAccountIds";

    @SerializedName(SERIALIZED_NAME_NIC_LINK_PUBLIC_IP_ACCOUNT_IDS)
    private List<String> nicLinkPublicIpAccountIds = null;

    public static final String SERIALIZED_NAME_NIC_LINK_PUBLIC_IP_LINK_PUBLIC_IP_IDS =
            "NicLinkPublicIpLinkPublicIpIds";

    @SerializedName(SERIALIZED_NAME_NIC_LINK_PUBLIC_IP_LINK_PUBLIC_IP_IDS)
    private List<String> nicLinkPublicIpLinkPublicIpIds = null;

    public static final String SERIALIZED_NAME_NIC_LINK_PUBLIC_IP_PUBLIC_IP_IDS =
            "NicLinkPublicIpPublicIpIds";

    @SerializedName(SERIALIZED_NAME_NIC_LINK_PUBLIC_IP_PUBLIC_IP_IDS)
    private List<String> nicLinkPublicIpPublicIpIds = null;

    public static final String SERIALIZED_NAME_NIC_LINK_PUBLIC_IP_PUBLIC_IPS =
            "NicLinkPublicIpPublicIps";

    @SerializedName(SERIALIZED_NAME_NIC_LINK_PUBLIC_IP_PUBLIC_IPS)
    private List<String> nicLinkPublicIpPublicIps = null;

    public static final String SERIALIZED_NAME_NIC_MAC_ADDRESSES = "NicMacAddresses";

    @SerializedName(SERIALIZED_NAME_NIC_MAC_ADDRESSES)
    private List<String> nicMacAddresses = null;

    public static final String SERIALIZED_NAME_NIC_NET_IDS = "NicNetIds";

    @SerializedName(SERIALIZED_NAME_NIC_NET_IDS)
    private List<String> nicNetIds = null;

    public static final String SERIALIZED_NAME_NIC_NIC_IDS = "NicNicIds";

    @SerializedName(SERIALIZED_NAME_NIC_NIC_IDS)
    private List<String> nicNicIds = null;

    public static final String SERIALIZED_NAME_NIC_PRIVATE_IPS_LINK_PUBLIC_IP_ACCOUNT_IDS =
            "NicPrivateIpsLinkPublicIpAccountIds";

    @SerializedName(SERIALIZED_NAME_NIC_PRIVATE_IPS_LINK_PUBLIC_IP_ACCOUNT_IDS)
    private List<String> nicPrivateIpsLinkPublicIpAccountIds = null;

    public static final String SERIALIZED_NAME_NIC_PRIVATE_IPS_LINK_PUBLIC_IP_IDS =
            "NicPrivateIpsLinkPublicIpIds";

    @SerializedName(SERIALIZED_NAME_NIC_PRIVATE_IPS_LINK_PUBLIC_IP_IDS)
    private List<String> nicPrivateIpsLinkPublicIpIds = null;

    public static final String SERIALIZED_NAME_NIC_PRIVATE_IPS_PRIMARY_IP =
            "NicPrivateIpsPrimaryIp";

    @SerializedName(SERIALIZED_NAME_NIC_PRIVATE_IPS_PRIMARY_IP)
    private Boolean nicPrivateIpsPrimaryIp;

    public static final String SERIALIZED_NAME_NIC_PRIVATE_IPS_PRIVATE_IPS =
            "NicPrivateIpsPrivateIps";

    @SerializedName(SERIALIZED_NAME_NIC_PRIVATE_IPS_PRIVATE_IPS)
    private List<String> nicPrivateIpsPrivateIps = null;

    public static final String SERIALIZED_NAME_NIC_SECURITY_GROUP_IDS = "NicSecurityGroupIds";

    @SerializedName(SERIALIZED_NAME_NIC_SECURITY_GROUP_IDS)
    private List<String> nicSecurityGroupIds = null;

    public static final String SERIALIZED_NAME_NIC_SECURITY_GROUP_NAMES = "NicSecurityGroupNames";

    @SerializedName(SERIALIZED_NAME_NIC_SECURITY_GROUP_NAMES)
    private List<String> nicSecurityGroupNames = null;

    public static final String SERIALIZED_NAME_NIC_STATES = "NicStates";

    @SerializedName(SERIALIZED_NAME_NIC_STATES)
    private List<String> nicStates = null;

    public static final String SERIALIZED_NAME_NIC_SUBNET_IDS = "NicSubnetIds";

    @SerializedName(SERIALIZED_NAME_NIC_SUBNET_IDS)
    private List<String> nicSubnetIds = null;

    public static final String SERIALIZED_NAME_NIC_SUBREGION_NAMES = "NicSubregionNames";

    @SerializedName(SERIALIZED_NAME_NIC_SUBREGION_NAMES)
    private List<String> nicSubregionNames = null;

    public static final String SERIALIZED_NAME_PLATFORMS = "Platforms";

    @SerializedName(SERIALIZED_NAME_PLATFORMS)
    private List<String> platforms = null;

    public static final String SERIALIZED_NAME_PRIVATE_IPS = "PrivateIps";

    @SerializedName(SERIALIZED_NAME_PRIVATE_IPS)
    private List<String> privateIps = null;

    public static final String SERIALIZED_NAME_PRODUCT_CODES = "ProductCodes";

    @SerializedName(SERIALIZED_NAME_PRODUCT_CODES)
    private List<String> productCodes = null;

    public static final String SERIALIZED_NAME_PUBLIC_IPS = "PublicIps";

    @SerializedName(SERIALIZED_NAME_PUBLIC_IPS)
    private List<String> publicIps = null;

    public static final String SERIALIZED_NAME_RESERVATION_IDS = "ReservationIds";

    @SerializedName(SERIALIZED_NAME_RESERVATION_IDS)
    private List<String> reservationIds = null;

    public static final String SERIALIZED_NAME_ROOT_DEVICE_NAMES = "RootDeviceNames";

    @SerializedName(SERIALIZED_NAME_ROOT_DEVICE_NAMES)
    private List<String> rootDeviceNames = null;

    public static final String SERIALIZED_NAME_ROOT_DEVICE_TYPES = "RootDeviceTypes";

    @SerializedName(SERIALIZED_NAME_ROOT_DEVICE_TYPES)
    private List<String> rootDeviceTypes = null;

    public static final String SERIALIZED_NAME_SECURITY_GROUP_IDS = "SecurityGroupIds";

    @SerializedName(SERIALIZED_NAME_SECURITY_GROUP_IDS)
    private List<String> securityGroupIds = null;

    public static final String SERIALIZED_NAME_SECURITY_GROUP_NAMES = "SecurityGroupNames";

    @SerializedName(SERIALIZED_NAME_SECURITY_GROUP_NAMES)
    private List<String> securityGroupNames = null;

    public static final String SERIALIZED_NAME_STATE_REASON_CODES = "StateReasonCodes";

    @SerializedName(SERIALIZED_NAME_STATE_REASON_CODES)
    private List<Integer> stateReasonCodes = null;

    public static final String SERIALIZED_NAME_STATE_REASON_MESSAGES = "StateReasonMessages";

    @SerializedName(SERIALIZED_NAME_STATE_REASON_MESSAGES)
    private List<String> stateReasonMessages = null;

    public static final String SERIALIZED_NAME_STATE_REASONS = "StateReasons";

    @SerializedName(SERIALIZED_NAME_STATE_REASONS)
    private List<String> stateReasons = null;

    public static final String SERIALIZED_NAME_SUBNET_IDS = "SubnetIds";

    @SerializedName(SERIALIZED_NAME_SUBNET_IDS)
    private List<String> subnetIds = null;

    public static final String SERIALIZED_NAME_SUBREGION_NAMES = "SubregionNames";

    @SerializedName(SERIALIZED_NAME_SUBREGION_NAMES)
    private List<String> subregionNames = null;

    public static final String SERIALIZED_NAME_TAG_KEYS = "TagKeys";

    @SerializedName(SERIALIZED_NAME_TAG_KEYS)
    private List<String> tagKeys = null;

    public static final String SERIALIZED_NAME_TAG_VALUES = "TagValues";

    @SerializedName(SERIALIZED_NAME_TAG_VALUES)
    private List<String> tagValues = null;

    public static final String SERIALIZED_NAME_TAGS = "Tags";

    @SerializedName(SERIALIZED_NAME_TAGS)
    private List<String> tags = null;

    public static final String SERIALIZED_NAME_TENANCIES = "Tenancies";

    @SerializedName(SERIALIZED_NAME_TENANCIES)
    private List<String> tenancies = null;

    public static final String SERIALIZED_NAME_VM_IDS = "VmIds";

    @SerializedName(SERIALIZED_NAME_VM_IDS)
    private List<String> vmIds = null;

    public static final String SERIALIZED_NAME_VM_SECURITY_GROUP_IDS = "VmSecurityGroupIds";

    @SerializedName(SERIALIZED_NAME_VM_SECURITY_GROUP_IDS)
    private List<String> vmSecurityGroupIds = null;

    public static final String SERIALIZED_NAME_VM_SECURITY_GROUP_NAMES = "VmSecurityGroupNames";

    @SerializedName(SERIALIZED_NAME_VM_SECURITY_GROUP_NAMES)
    private List<String> vmSecurityGroupNames = null;

    public static final String SERIALIZED_NAME_VM_STATE_CODES = "VmStateCodes";

    @SerializedName(SERIALIZED_NAME_VM_STATE_CODES)
    private List<Integer> vmStateCodes = null;

    public static final String SERIALIZED_NAME_VM_STATE_NAMES = "VmStateNames";

    @SerializedName(SERIALIZED_NAME_VM_STATE_NAMES)
    private List<String> vmStateNames = null;

    public static final String SERIALIZED_NAME_VM_TYPES = "VmTypes";

    @SerializedName(SERIALIZED_NAME_VM_TYPES)
    private List<String> vmTypes = null;

    public FiltersVm() {}

    public FiltersVm architectures(List<String> architectures) {

        this.architectures = architectures;
        return this;
    }

    public FiltersVm addArchitecturesItem(String architecturesItem) {
        if (this.architectures == null) {
            this.architectures = new ArrayList<>();
        }
        this.architectures.add(architecturesItem);
        return this;
    }

    /**
     * The architectures of the VMs (&#x60;i386&#x60; \\| &#x60;x86_64&#x60;).
     *
     * @return architectures
     */
    @javax.annotation.Nullable
    public List<String> getArchitectures() {
        return architectures;
    }

    public void setArchitectures(List<String> architectures) {
        this.architectures = architectures;
    }

    public FiltersVm blockDeviceMappingDeleteOnVmDeletion(
            Boolean blockDeviceMappingDeleteOnVmDeletion) {

        this.blockDeviceMappingDeleteOnVmDeletion = blockDeviceMappingDeleteOnVmDeletion;
        return this;
    }

    /**
     * Whether the BSU volumes are deleted when terminating the VMs.
     *
     * @return blockDeviceMappingDeleteOnVmDeletion
     */
    @javax.annotation.Nullable
    public Boolean getBlockDeviceMappingDeleteOnVmDeletion() {
        return blockDeviceMappingDeleteOnVmDeletion;
    }

    public void setBlockDeviceMappingDeleteOnVmDeletion(
            Boolean blockDeviceMappingDeleteOnVmDeletion) {
        this.blockDeviceMappingDeleteOnVmDeletion = blockDeviceMappingDeleteOnVmDeletion;
    }

    public FiltersVm blockDeviceMappingDeviceNames(List<String> blockDeviceMappingDeviceNames) {

        this.blockDeviceMappingDeviceNames = blockDeviceMappingDeviceNames;
        return this;
    }

    public FiltersVm addBlockDeviceMappingDeviceNamesItem(
            String blockDeviceMappingDeviceNamesItem) {
        if (this.blockDeviceMappingDeviceNames == null) {
            this.blockDeviceMappingDeviceNames = new ArrayList<>();
        }
        this.blockDeviceMappingDeviceNames.add(blockDeviceMappingDeviceNamesItem);
        return this;
    }

    /**
     * The device names for the BSU volumes (in the format &#x60;/dev/sdX&#x60;,
     * &#x60;/dev/sdXX&#x60;, &#x60;/dev/xvdX&#x60;, or &#x60;/dev/xvdXX&#x60;).
     *
     * @return blockDeviceMappingDeviceNames
     */
    @javax.annotation.Nullable
    public List<String> getBlockDeviceMappingDeviceNames() {
        return blockDeviceMappingDeviceNames;
    }

    public void setBlockDeviceMappingDeviceNames(List<String> blockDeviceMappingDeviceNames) {
        this.blockDeviceMappingDeviceNames = blockDeviceMappingDeviceNames;
    }

    public FiltersVm blockDeviceMappingLinkDates(List<LocalDate> blockDeviceMappingLinkDates) {

        this.blockDeviceMappingLinkDates = blockDeviceMappingLinkDates;
        return this;
    }

    public FiltersVm addBlockDeviceMappingLinkDatesItem(LocalDate blockDeviceMappingLinkDatesItem) {
        if (this.blockDeviceMappingLinkDates == null) {
            this.blockDeviceMappingLinkDates = new ArrayList<>();
        }
        this.blockDeviceMappingLinkDates.add(blockDeviceMappingLinkDatesItem);
        return this;
    }

    /**
     * The link dates for the BSU volumes mapped to the VMs (for example,
     * &#x60;2016-01-23T18:45:30.000Z&#x60;).
     *
     * @return blockDeviceMappingLinkDates
     */
    @javax.annotation.Nullable
    public List<LocalDate> getBlockDeviceMappingLinkDates() {
        return blockDeviceMappingLinkDates;
    }

    public void setBlockDeviceMappingLinkDates(List<LocalDate> blockDeviceMappingLinkDates) {
        this.blockDeviceMappingLinkDates = blockDeviceMappingLinkDates;
    }

    public FiltersVm blockDeviceMappingStates(List<String> blockDeviceMappingStates) {

        this.blockDeviceMappingStates = blockDeviceMappingStates;
        return this;
    }

    public FiltersVm addBlockDeviceMappingStatesItem(String blockDeviceMappingStatesItem) {
        if (this.blockDeviceMappingStates == null) {
            this.blockDeviceMappingStates = new ArrayList<>();
        }
        this.blockDeviceMappingStates.add(blockDeviceMappingStatesItem);
        return this;
    }

    /**
     * The states for the BSU volumes (&#x60;attaching&#x60; \\| &#x60;attached&#x60; \\|
     * &#x60;detaching&#x60; \\| &#x60;detached&#x60;).
     *
     * @return blockDeviceMappingStates
     */
    @javax.annotation.Nullable
    public List<String> getBlockDeviceMappingStates() {
        return blockDeviceMappingStates;
    }

    public void setBlockDeviceMappingStates(List<String> blockDeviceMappingStates) {
        this.blockDeviceMappingStates = blockDeviceMappingStates;
    }

    public FiltersVm blockDeviceMappingVolumeIds(List<String> blockDeviceMappingVolumeIds) {

        this.blockDeviceMappingVolumeIds = blockDeviceMappingVolumeIds;
        return this;
    }

    public FiltersVm addBlockDeviceMappingVolumeIdsItem(String blockDeviceMappingVolumeIdsItem) {
        if (this.blockDeviceMappingVolumeIds == null) {
            this.blockDeviceMappingVolumeIds = new ArrayList<>();
        }
        this.blockDeviceMappingVolumeIds.add(blockDeviceMappingVolumeIdsItem);
        return this;
    }

    /**
     * The volume IDs of the BSU volumes.
     *
     * @return blockDeviceMappingVolumeIds
     */
    @javax.annotation.Nullable
    public List<String> getBlockDeviceMappingVolumeIds() {
        return blockDeviceMappingVolumeIds;
    }

    public void setBlockDeviceMappingVolumeIds(List<String> blockDeviceMappingVolumeIds) {
        this.blockDeviceMappingVolumeIds = blockDeviceMappingVolumeIds;
    }

    public FiltersVm clientTokens(List<String> clientTokens) {

        this.clientTokens = clientTokens;
        return this;
    }

    public FiltersVm addClientTokensItem(String clientTokensItem) {
        if (this.clientTokens == null) {
            this.clientTokens = new ArrayList<>();
        }
        this.clientTokens.add(clientTokensItem);
        return this;
    }

    /**
     * The idempotency tokens provided when launching the VMs.
     *
     * @return clientTokens
     */
    @javax.annotation.Nullable
    public List<String> getClientTokens() {
        return clientTokens;
    }

    public void setClientTokens(List<String> clientTokens) {
        this.clientTokens = clientTokens;
    }

    public FiltersVm creationDates(List<LocalDate> creationDates) {

        this.creationDates = creationDates;
        return this;
    }

    public FiltersVm addCreationDatesItem(LocalDate creationDatesItem) {
        if (this.creationDates == null) {
            this.creationDates = new ArrayList<>();
        }
        this.creationDates.add(creationDatesItem);
        return this;
    }

    /**
     * The dates when the VMs were launched.
     *
     * @return creationDates
     */
    @javax.annotation.Nullable
    public List<LocalDate> getCreationDates() {
        return creationDates;
    }

    public void setCreationDates(List<LocalDate> creationDates) {
        this.creationDates = creationDates;
    }

    public FiltersVm imageIds(List<String> imageIds) {

        this.imageIds = imageIds;
        return this;
    }

    public FiltersVm addImageIdsItem(String imageIdsItem) {
        if (this.imageIds == null) {
            this.imageIds = new ArrayList<>();
        }
        this.imageIds.add(imageIdsItem);
        return this;
    }

    /**
     * The IDs of the OMIs used to launch the VMs.
     *
     * @return imageIds
     */
    @javax.annotation.Nullable
    public List<String> getImageIds() {
        return imageIds;
    }

    public void setImageIds(List<String> imageIds) {
        this.imageIds = imageIds;
    }

    public FiltersVm isSourceDestChecked(Boolean isSourceDestChecked) {

        this.isSourceDestChecked = isSourceDestChecked;
        return this;
    }

    /**
     * Whether the source/destination checking is enabled (true) or disabled (false).
     *
     * @return isSourceDestChecked
     */
    @javax.annotation.Nullable
    public Boolean getIsSourceDestChecked() {
        return isSourceDestChecked;
    }

    public void setIsSourceDestChecked(Boolean isSourceDestChecked) {
        this.isSourceDestChecked = isSourceDestChecked;
    }

    public FiltersVm keypairNames(List<String> keypairNames) {

        this.keypairNames = keypairNames;
        return this;
    }

    public FiltersVm addKeypairNamesItem(String keypairNamesItem) {
        if (this.keypairNames == null) {
            this.keypairNames = new ArrayList<>();
        }
        this.keypairNames.add(keypairNamesItem);
        return this;
    }

    /**
     * The names of the keypairs used when launching the VMs.
     *
     * @return keypairNames
     */
    @javax.annotation.Nullable
    public List<String> getKeypairNames() {
        return keypairNames;
    }

    public void setKeypairNames(List<String> keypairNames) {
        this.keypairNames = keypairNames;
    }

    public FiltersVm launchNumbers(List<Integer> launchNumbers) {

        this.launchNumbers = launchNumbers;
        return this;
    }

    public FiltersVm addLaunchNumbersItem(Integer launchNumbersItem) {
        if (this.launchNumbers == null) {
            this.launchNumbers = new ArrayList<>();
        }
        this.launchNumbers.add(launchNumbersItem);
        return this;
    }

    /**
     * The numbers for the VMs when launching a group of several VMs (for example, &#x60;0&#x60;,
     * &#x60;1&#x60;, &#x60;2&#x60;, and so on).
     *
     * @return launchNumbers
     */
    @javax.annotation.Nullable
    public List<Integer> getLaunchNumbers() {
        return launchNumbers;
    }

    public void setLaunchNumbers(List<Integer> launchNumbers) {
        this.launchNumbers = launchNumbers;
    }

    public FiltersVm lifecycles(List<String> lifecycles) {

        this.lifecycles = lifecycles;
        return this;
    }

    public FiltersVm addLifecyclesItem(String lifecyclesItem) {
        if (this.lifecycles == null) {
            this.lifecycles = new ArrayList<>();
        }
        this.lifecycles.add(lifecyclesItem);
        return this;
    }

    /**
     * Whether the VMs are Spot Instances (spot).
     *
     * @return lifecycles
     */
    @javax.annotation.Nullable
    public List<String> getLifecycles() {
        return lifecycles;
    }

    public void setLifecycles(List<String> lifecycles) {
        this.lifecycles = lifecycles;
    }

    public FiltersVm netIds(List<String> netIds) {

        this.netIds = netIds;
        return this;
    }

    public FiltersVm addNetIdsItem(String netIdsItem) {
        if (this.netIds == null) {
            this.netIds = new ArrayList<>();
        }
        this.netIds.add(netIdsItem);
        return this;
    }

    /**
     * The IDs of the Nets in which the VMs are running.
     *
     * @return netIds
     */
    @javax.annotation.Nullable
    public List<String> getNetIds() {
        return netIds;
    }

    public void setNetIds(List<String> netIds) {
        this.netIds = netIds;
    }

    public FiltersVm nicAccountIds(List<String> nicAccountIds) {

        this.nicAccountIds = nicAccountIds;
        return this;
    }

    public FiltersVm addNicAccountIdsItem(String nicAccountIdsItem) {
        if (this.nicAccountIds == null) {
            this.nicAccountIds = new ArrayList<>();
        }
        this.nicAccountIds.add(nicAccountIdsItem);
        return this;
    }

    /**
     * The IDs of the NICs.
     *
     * @return nicAccountIds
     */
    @javax.annotation.Nullable
    public List<String> getNicAccountIds() {
        return nicAccountIds;
    }

    public void setNicAccountIds(List<String> nicAccountIds) {
        this.nicAccountIds = nicAccountIds;
    }

    public FiltersVm nicDescriptions(List<String> nicDescriptions) {

        this.nicDescriptions = nicDescriptions;
        return this;
    }

    public FiltersVm addNicDescriptionsItem(String nicDescriptionsItem) {
        if (this.nicDescriptions == null) {
            this.nicDescriptions = new ArrayList<>();
        }
        this.nicDescriptions.add(nicDescriptionsItem);
        return this;
    }

    /**
     * The descriptions of the NICs.
     *
     * @return nicDescriptions
     */
    @javax.annotation.Nullable
    public List<String> getNicDescriptions() {
        return nicDescriptions;
    }

    public void setNicDescriptions(List<String> nicDescriptions) {
        this.nicDescriptions = nicDescriptions;
    }

    public FiltersVm nicIsSourceDestChecked(Boolean nicIsSourceDestChecked) {

        this.nicIsSourceDestChecked = nicIsSourceDestChecked;
        return this;
    }

    /**
     * Whether the source/destination checking is enabled (true) or disabled (false).
     *
     * @return nicIsSourceDestChecked
     */
    @javax.annotation.Nullable
    public Boolean getNicIsSourceDestChecked() {
        return nicIsSourceDestChecked;
    }

    public void setNicIsSourceDestChecked(Boolean nicIsSourceDestChecked) {
        this.nicIsSourceDestChecked = nicIsSourceDestChecked;
    }

    public FiltersVm nicLinkNicDeleteOnVmDeletion(Boolean nicLinkNicDeleteOnVmDeletion) {

        this.nicLinkNicDeleteOnVmDeletion = nicLinkNicDeleteOnVmDeletion;
        return this;
    }

    /**
     * Whether the NICs are deleted when the VMs they are attached to are deleted.
     *
     * @return nicLinkNicDeleteOnVmDeletion
     */
    @javax.annotation.Nullable
    public Boolean getNicLinkNicDeleteOnVmDeletion() {
        return nicLinkNicDeleteOnVmDeletion;
    }

    public void setNicLinkNicDeleteOnVmDeletion(Boolean nicLinkNicDeleteOnVmDeletion) {
        this.nicLinkNicDeleteOnVmDeletion = nicLinkNicDeleteOnVmDeletion;
    }

    public FiltersVm nicLinkNicDeviceNumbers(List<Integer> nicLinkNicDeviceNumbers) {

        this.nicLinkNicDeviceNumbers = nicLinkNicDeviceNumbers;
        return this;
    }

    public FiltersVm addNicLinkNicDeviceNumbersItem(Integer nicLinkNicDeviceNumbersItem) {
        if (this.nicLinkNicDeviceNumbers == null) {
            this.nicLinkNicDeviceNumbers = new ArrayList<>();
        }
        this.nicLinkNicDeviceNumbers.add(nicLinkNicDeviceNumbersItem);
        return this;
    }

    /**
     * The device numbers the NICs are attached to.
     *
     * @return nicLinkNicDeviceNumbers
     */
    @javax.annotation.Nullable
    public List<Integer> getNicLinkNicDeviceNumbers() {
        return nicLinkNicDeviceNumbers;
    }

    public void setNicLinkNicDeviceNumbers(List<Integer> nicLinkNicDeviceNumbers) {
        this.nicLinkNicDeviceNumbers = nicLinkNicDeviceNumbers;
    }

    public FiltersVm nicLinkNicLinkNicDates(List<LocalDate> nicLinkNicLinkNicDates) {

        this.nicLinkNicLinkNicDates = nicLinkNicLinkNicDates;
        return this;
    }

    public FiltersVm addNicLinkNicLinkNicDatesItem(LocalDate nicLinkNicLinkNicDatesItem) {
        if (this.nicLinkNicLinkNicDates == null) {
            this.nicLinkNicLinkNicDates = new ArrayList<>();
        }
        this.nicLinkNicLinkNicDates.add(nicLinkNicLinkNicDatesItem);
        return this;
    }

    /**
     * The dates and times (UTC) when the NICs were attached to the VMs.
     *
     * @return nicLinkNicLinkNicDates
     */
    @javax.annotation.Nullable
    public List<LocalDate> getNicLinkNicLinkNicDates() {
        return nicLinkNicLinkNicDates;
    }

    public void setNicLinkNicLinkNicDates(List<LocalDate> nicLinkNicLinkNicDates) {
        this.nicLinkNicLinkNicDates = nicLinkNicLinkNicDates;
    }

    public FiltersVm nicLinkNicLinkNicIds(List<String> nicLinkNicLinkNicIds) {

        this.nicLinkNicLinkNicIds = nicLinkNicLinkNicIds;
        return this;
    }

    public FiltersVm addNicLinkNicLinkNicIdsItem(String nicLinkNicLinkNicIdsItem) {
        if (this.nicLinkNicLinkNicIds == null) {
            this.nicLinkNicLinkNicIds = new ArrayList<>();
        }
        this.nicLinkNicLinkNicIds.add(nicLinkNicLinkNicIdsItem);
        return this;
    }

    /**
     * The IDs of the NIC attachments.
     *
     * @return nicLinkNicLinkNicIds
     */
    @javax.annotation.Nullable
    public List<String> getNicLinkNicLinkNicIds() {
        return nicLinkNicLinkNicIds;
    }

    public void setNicLinkNicLinkNicIds(List<String> nicLinkNicLinkNicIds) {
        this.nicLinkNicLinkNicIds = nicLinkNicLinkNicIds;
    }

    public FiltersVm nicLinkNicStates(List<String> nicLinkNicStates) {

        this.nicLinkNicStates = nicLinkNicStates;
        return this;
    }

    public FiltersVm addNicLinkNicStatesItem(String nicLinkNicStatesItem) {
        if (this.nicLinkNicStates == null) {
            this.nicLinkNicStates = new ArrayList<>();
        }
        this.nicLinkNicStates.add(nicLinkNicStatesItem);
        return this;
    }

    /**
     * The states of the attachments.
     *
     * @return nicLinkNicStates
     */
    @javax.annotation.Nullable
    public List<String> getNicLinkNicStates() {
        return nicLinkNicStates;
    }

    public void setNicLinkNicStates(List<String> nicLinkNicStates) {
        this.nicLinkNicStates = nicLinkNicStates;
    }

    public FiltersVm nicLinkNicVmAccountIds(List<String> nicLinkNicVmAccountIds) {

        this.nicLinkNicVmAccountIds = nicLinkNicVmAccountIds;
        return this;
    }

    public FiltersVm addNicLinkNicVmAccountIdsItem(String nicLinkNicVmAccountIdsItem) {
        if (this.nicLinkNicVmAccountIds == null) {
            this.nicLinkNicVmAccountIds = new ArrayList<>();
        }
        this.nicLinkNicVmAccountIds.add(nicLinkNicVmAccountIdsItem);
        return this;
    }

    /**
     * The account IDs of the owners of the VMs the NICs are attached to.
     *
     * @return nicLinkNicVmAccountIds
     */
    @javax.annotation.Nullable
    public List<String> getNicLinkNicVmAccountIds() {
        return nicLinkNicVmAccountIds;
    }

    public void setNicLinkNicVmAccountIds(List<String> nicLinkNicVmAccountIds) {
        this.nicLinkNicVmAccountIds = nicLinkNicVmAccountIds;
    }

    public FiltersVm nicLinkNicVmIds(List<String> nicLinkNicVmIds) {

        this.nicLinkNicVmIds = nicLinkNicVmIds;
        return this;
    }

    public FiltersVm addNicLinkNicVmIdsItem(String nicLinkNicVmIdsItem) {
        if (this.nicLinkNicVmIds == null) {
            this.nicLinkNicVmIds = new ArrayList<>();
        }
        this.nicLinkNicVmIds.add(nicLinkNicVmIdsItem);
        return this;
    }

    /**
     * The IDs of the VMs the NICs are attached to.
     *
     * @return nicLinkNicVmIds
     */
    @javax.annotation.Nullable
    public List<String> getNicLinkNicVmIds() {
        return nicLinkNicVmIds;
    }

    public void setNicLinkNicVmIds(List<String> nicLinkNicVmIds) {
        this.nicLinkNicVmIds = nicLinkNicVmIds;
    }

    public FiltersVm nicLinkPublicIpAccountIds(List<String> nicLinkPublicIpAccountIds) {

        this.nicLinkPublicIpAccountIds = nicLinkPublicIpAccountIds;
        return this;
    }

    public FiltersVm addNicLinkPublicIpAccountIdsItem(String nicLinkPublicIpAccountIdsItem) {
        if (this.nicLinkPublicIpAccountIds == null) {
            this.nicLinkPublicIpAccountIds = new ArrayList<>();
        }
        this.nicLinkPublicIpAccountIds.add(nicLinkPublicIpAccountIdsItem);
        return this;
    }

    /**
     * The account IDs of the owners of the public IPs associated with the NICs.
     *
     * @return nicLinkPublicIpAccountIds
     */
    @javax.annotation.Nullable
    public List<String> getNicLinkPublicIpAccountIds() {
        return nicLinkPublicIpAccountIds;
    }

    public void setNicLinkPublicIpAccountIds(List<String> nicLinkPublicIpAccountIds) {
        this.nicLinkPublicIpAccountIds = nicLinkPublicIpAccountIds;
    }

    public FiltersVm nicLinkPublicIpLinkPublicIpIds(List<String> nicLinkPublicIpLinkPublicIpIds) {

        this.nicLinkPublicIpLinkPublicIpIds = nicLinkPublicIpLinkPublicIpIds;
        return this;
    }

    public FiltersVm addNicLinkPublicIpLinkPublicIpIdsItem(
            String nicLinkPublicIpLinkPublicIpIdsItem) {
        if (this.nicLinkPublicIpLinkPublicIpIds == null) {
            this.nicLinkPublicIpLinkPublicIpIds = new ArrayList<>();
        }
        this.nicLinkPublicIpLinkPublicIpIds.add(nicLinkPublicIpLinkPublicIpIdsItem);
        return this;
    }

    /**
     * The association IDs returned when the public IPs were associated with the NICs.
     *
     * @return nicLinkPublicIpLinkPublicIpIds
     */
    @javax.annotation.Nullable
    public List<String> getNicLinkPublicIpLinkPublicIpIds() {
        return nicLinkPublicIpLinkPublicIpIds;
    }

    public void setNicLinkPublicIpLinkPublicIpIds(List<String> nicLinkPublicIpLinkPublicIpIds) {
        this.nicLinkPublicIpLinkPublicIpIds = nicLinkPublicIpLinkPublicIpIds;
    }

    public FiltersVm nicLinkPublicIpPublicIpIds(List<String> nicLinkPublicIpPublicIpIds) {

        this.nicLinkPublicIpPublicIpIds = nicLinkPublicIpPublicIpIds;
        return this;
    }

    public FiltersVm addNicLinkPublicIpPublicIpIdsItem(String nicLinkPublicIpPublicIpIdsItem) {
        if (this.nicLinkPublicIpPublicIpIds == null) {
            this.nicLinkPublicIpPublicIpIds = new ArrayList<>();
        }
        this.nicLinkPublicIpPublicIpIds.add(nicLinkPublicIpPublicIpIdsItem);
        return this;
    }

    /**
     * The allocation IDs returned when the public IPs were allocated to their accounts.
     *
     * @return nicLinkPublicIpPublicIpIds
     */
    @javax.annotation.Nullable
    public List<String> getNicLinkPublicIpPublicIpIds() {
        return nicLinkPublicIpPublicIpIds;
    }

    public void setNicLinkPublicIpPublicIpIds(List<String> nicLinkPublicIpPublicIpIds) {
        this.nicLinkPublicIpPublicIpIds = nicLinkPublicIpPublicIpIds;
    }

    public FiltersVm nicLinkPublicIpPublicIps(List<String> nicLinkPublicIpPublicIps) {

        this.nicLinkPublicIpPublicIps = nicLinkPublicIpPublicIps;
        return this;
    }

    public FiltersVm addNicLinkPublicIpPublicIpsItem(String nicLinkPublicIpPublicIpsItem) {
        if (this.nicLinkPublicIpPublicIps == null) {
            this.nicLinkPublicIpPublicIps = new ArrayList<>();
        }
        this.nicLinkPublicIpPublicIps.add(nicLinkPublicIpPublicIpsItem);
        return this;
    }

    /**
     * The public IPs associated with the NICs.
     *
     * @return nicLinkPublicIpPublicIps
     */
    @javax.annotation.Nullable
    public List<String> getNicLinkPublicIpPublicIps() {
        return nicLinkPublicIpPublicIps;
    }

    public void setNicLinkPublicIpPublicIps(List<String> nicLinkPublicIpPublicIps) {
        this.nicLinkPublicIpPublicIps = nicLinkPublicIpPublicIps;
    }

    public FiltersVm nicMacAddresses(List<String> nicMacAddresses) {

        this.nicMacAddresses = nicMacAddresses;
        return this;
    }

    public FiltersVm addNicMacAddressesItem(String nicMacAddressesItem) {
        if (this.nicMacAddresses == null) {
            this.nicMacAddresses = new ArrayList<>();
        }
        this.nicMacAddresses.add(nicMacAddressesItem);
        return this;
    }

    /**
     * The Media Access Control (MAC) addresses of the NICs.
     *
     * @return nicMacAddresses
     */
    @javax.annotation.Nullable
    public List<String> getNicMacAddresses() {
        return nicMacAddresses;
    }

    public void setNicMacAddresses(List<String> nicMacAddresses) {
        this.nicMacAddresses = nicMacAddresses;
    }

    public FiltersVm nicNetIds(List<String> nicNetIds) {

        this.nicNetIds = nicNetIds;
        return this;
    }

    public FiltersVm addNicNetIdsItem(String nicNetIdsItem) {
        if (this.nicNetIds == null) {
            this.nicNetIds = new ArrayList<>();
        }
        this.nicNetIds.add(nicNetIdsItem);
        return this;
    }

    /**
     * The IDs of the Nets where the NICs are located.
     *
     * @return nicNetIds
     */
    @javax.annotation.Nullable
    public List<String> getNicNetIds() {
        return nicNetIds;
    }

    public void setNicNetIds(List<String> nicNetIds) {
        this.nicNetIds = nicNetIds;
    }

    public FiltersVm nicNicIds(List<String> nicNicIds) {

        this.nicNicIds = nicNicIds;
        return this;
    }

    public FiltersVm addNicNicIdsItem(String nicNicIdsItem) {
        if (this.nicNicIds == null) {
            this.nicNicIds = new ArrayList<>();
        }
        this.nicNicIds.add(nicNicIdsItem);
        return this;
    }

    /**
     * The IDs of the NICs.
     *
     * @return nicNicIds
     */
    @javax.annotation.Nullable
    public List<String> getNicNicIds() {
        return nicNicIds;
    }

    public void setNicNicIds(List<String> nicNicIds) {
        this.nicNicIds = nicNicIds;
    }

    public FiltersVm nicPrivateIpsLinkPublicIpAccountIds(
            List<String> nicPrivateIpsLinkPublicIpAccountIds) {

        this.nicPrivateIpsLinkPublicIpAccountIds = nicPrivateIpsLinkPublicIpAccountIds;
        return this;
    }

    public FiltersVm addNicPrivateIpsLinkPublicIpAccountIdsItem(
            String nicPrivateIpsLinkPublicIpAccountIdsItem) {
        if (this.nicPrivateIpsLinkPublicIpAccountIds == null) {
            this.nicPrivateIpsLinkPublicIpAccountIds = new ArrayList<>();
        }
        this.nicPrivateIpsLinkPublicIpAccountIds.add(nicPrivateIpsLinkPublicIpAccountIdsItem);
        return this;
    }

    /**
     * The account IDs of the owner of the public IPs associated with the private IPs.
     *
     * @return nicPrivateIpsLinkPublicIpAccountIds
     */
    @javax.annotation.Nullable
    public List<String> getNicPrivateIpsLinkPublicIpAccountIds() {
        return nicPrivateIpsLinkPublicIpAccountIds;
    }

    public void setNicPrivateIpsLinkPublicIpAccountIds(
            List<String> nicPrivateIpsLinkPublicIpAccountIds) {
        this.nicPrivateIpsLinkPublicIpAccountIds = nicPrivateIpsLinkPublicIpAccountIds;
    }

    public FiltersVm nicPrivateIpsLinkPublicIpIds(List<String> nicPrivateIpsLinkPublicIpIds) {

        this.nicPrivateIpsLinkPublicIpIds = nicPrivateIpsLinkPublicIpIds;
        return this;
    }

    public FiltersVm addNicPrivateIpsLinkPublicIpIdsItem(String nicPrivateIpsLinkPublicIpIdsItem) {
        if (this.nicPrivateIpsLinkPublicIpIds == null) {
            this.nicPrivateIpsLinkPublicIpIds = new ArrayList<>();
        }
        this.nicPrivateIpsLinkPublicIpIds.add(nicPrivateIpsLinkPublicIpIdsItem);
        return this;
    }

    /**
     * The public IPs associated with the private IPs.
     *
     * @return nicPrivateIpsLinkPublicIpIds
     */
    @javax.annotation.Nullable
    public List<String> getNicPrivateIpsLinkPublicIpIds() {
        return nicPrivateIpsLinkPublicIpIds;
    }

    public void setNicPrivateIpsLinkPublicIpIds(List<String> nicPrivateIpsLinkPublicIpIds) {
        this.nicPrivateIpsLinkPublicIpIds = nicPrivateIpsLinkPublicIpIds;
    }

    public FiltersVm nicPrivateIpsPrimaryIp(Boolean nicPrivateIpsPrimaryIp) {

        this.nicPrivateIpsPrimaryIp = nicPrivateIpsPrimaryIp;
        return this;
    }

    /**
     * Whether the private IPs are the primary IPs associated with the NICs.
     *
     * @return nicPrivateIpsPrimaryIp
     */
    @javax.annotation.Nullable
    public Boolean getNicPrivateIpsPrimaryIp() {
        return nicPrivateIpsPrimaryIp;
    }

    public void setNicPrivateIpsPrimaryIp(Boolean nicPrivateIpsPrimaryIp) {
        this.nicPrivateIpsPrimaryIp = nicPrivateIpsPrimaryIp;
    }

    public FiltersVm nicPrivateIpsPrivateIps(List<String> nicPrivateIpsPrivateIps) {

        this.nicPrivateIpsPrivateIps = nicPrivateIpsPrivateIps;
        return this;
    }

    public FiltersVm addNicPrivateIpsPrivateIpsItem(String nicPrivateIpsPrivateIpsItem) {
        if (this.nicPrivateIpsPrivateIps == null) {
            this.nicPrivateIpsPrivateIps = new ArrayList<>();
        }
        this.nicPrivateIpsPrivateIps.add(nicPrivateIpsPrivateIpsItem);
        return this;
    }

    /**
     * The private IPs of the NICs.
     *
     * @return nicPrivateIpsPrivateIps
     */
    @javax.annotation.Nullable
    public List<String> getNicPrivateIpsPrivateIps() {
        return nicPrivateIpsPrivateIps;
    }

    public void setNicPrivateIpsPrivateIps(List<String> nicPrivateIpsPrivateIps) {
        this.nicPrivateIpsPrivateIps = nicPrivateIpsPrivateIps;
    }

    public FiltersVm nicSecurityGroupIds(List<String> nicSecurityGroupIds) {

        this.nicSecurityGroupIds = nicSecurityGroupIds;
        return this;
    }

    public FiltersVm addNicSecurityGroupIdsItem(String nicSecurityGroupIdsItem) {
        if (this.nicSecurityGroupIds == null) {
            this.nicSecurityGroupIds = new ArrayList<>();
        }
        this.nicSecurityGroupIds.add(nicSecurityGroupIdsItem);
        return this;
    }

    /**
     * The IDs of the security groups associated with the NICs.
     *
     * @return nicSecurityGroupIds
     */
    @javax.annotation.Nullable
    public List<String> getNicSecurityGroupIds() {
        return nicSecurityGroupIds;
    }

    public void setNicSecurityGroupIds(List<String> nicSecurityGroupIds) {
        this.nicSecurityGroupIds = nicSecurityGroupIds;
    }

    public FiltersVm nicSecurityGroupNames(List<String> nicSecurityGroupNames) {

        this.nicSecurityGroupNames = nicSecurityGroupNames;
        return this;
    }

    public FiltersVm addNicSecurityGroupNamesItem(String nicSecurityGroupNamesItem) {
        if (this.nicSecurityGroupNames == null) {
            this.nicSecurityGroupNames = new ArrayList<>();
        }
        this.nicSecurityGroupNames.add(nicSecurityGroupNamesItem);
        return this;
    }

    /**
     * The names of the security groups associated with the NICs.
     *
     * @return nicSecurityGroupNames
     */
    @javax.annotation.Nullable
    public List<String> getNicSecurityGroupNames() {
        return nicSecurityGroupNames;
    }

    public void setNicSecurityGroupNames(List<String> nicSecurityGroupNames) {
        this.nicSecurityGroupNames = nicSecurityGroupNames;
    }

    public FiltersVm nicStates(List<String> nicStates) {

        this.nicStates = nicStates;
        return this;
    }

    public FiltersVm addNicStatesItem(String nicStatesItem) {
        if (this.nicStates == null) {
            this.nicStates = new ArrayList<>();
        }
        this.nicStates.add(nicStatesItem);
        return this;
    }

    /**
     * The states of the NICs (&#x60;available&#x60; \\| &#x60;in-use&#x60;).
     *
     * @return nicStates
     */
    @javax.annotation.Nullable
    public List<String> getNicStates() {
        return nicStates;
    }

    public void setNicStates(List<String> nicStates) {
        this.nicStates = nicStates;
    }

    public FiltersVm nicSubnetIds(List<String> nicSubnetIds) {

        this.nicSubnetIds = nicSubnetIds;
        return this;
    }

    public FiltersVm addNicSubnetIdsItem(String nicSubnetIdsItem) {
        if (this.nicSubnetIds == null) {
            this.nicSubnetIds = new ArrayList<>();
        }
        this.nicSubnetIds.add(nicSubnetIdsItem);
        return this;
    }

    /**
     * The IDs of the Subnets for the NICs.
     *
     * @return nicSubnetIds
     */
    @javax.annotation.Nullable
    public List<String> getNicSubnetIds() {
        return nicSubnetIds;
    }

    public void setNicSubnetIds(List<String> nicSubnetIds) {
        this.nicSubnetIds = nicSubnetIds;
    }

    public FiltersVm nicSubregionNames(List<String> nicSubregionNames) {

        this.nicSubregionNames = nicSubregionNames;
        return this;
    }

    public FiltersVm addNicSubregionNamesItem(String nicSubregionNamesItem) {
        if (this.nicSubregionNames == null) {
            this.nicSubregionNames = new ArrayList<>();
        }
        this.nicSubregionNames.add(nicSubregionNamesItem);
        return this;
    }

    /**
     * The Subregions where the NICs are located.
     *
     * @return nicSubregionNames
     */
    @javax.annotation.Nullable
    public List<String> getNicSubregionNames() {
        return nicSubregionNames;
    }

    public void setNicSubregionNames(List<String> nicSubregionNames) {
        this.nicSubregionNames = nicSubregionNames;
    }

    public FiltersVm platforms(List<String> platforms) {

        this.platforms = platforms;
        return this;
    }

    public FiltersVm addPlatformsItem(String platformsItem) {
        if (this.platforms == null) {
            this.platforms = new ArrayList<>();
        }
        this.platforms.add(platformsItem);
        return this;
    }

    /**
     * The platforms. Use windows if you have Windows VMs. Otherwise, leave this filter blank.
     *
     * @return platforms
     */
    @javax.annotation.Nullable
    public List<String> getPlatforms() {
        return platforms;
    }

    public void setPlatforms(List<String> platforms) {
        this.platforms = platforms;
    }

    public FiltersVm privateIps(List<String> privateIps) {

        this.privateIps = privateIps;
        return this;
    }

    public FiltersVm addPrivateIpsItem(String privateIpsItem) {
        if (this.privateIps == null) {
            this.privateIps = new ArrayList<>();
        }
        this.privateIps.add(privateIpsItem);
        return this;
    }

    /**
     * The private IPs of the VMs.
     *
     * @return privateIps
     */
    @javax.annotation.Nullable
    public List<String> getPrivateIps() {
        return privateIps;
    }

    public void setPrivateIps(List<String> privateIps) {
        this.privateIps = privateIps;
    }

    public FiltersVm productCodes(List<String> productCodes) {

        this.productCodes = productCodes;
        return this;
    }

    public FiltersVm addProductCodesItem(String productCodesItem) {
        if (this.productCodes == null) {
            this.productCodes = new ArrayList<>();
        }
        this.productCodes.add(productCodesItem);
        return this;
    }

    /**
     * The product codes associated with the OMI used to create the VMs.
     *
     * @return productCodes
     */
    @javax.annotation.Nullable
    public List<String> getProductCodes() {
        return productCodes;
    }

    public void setProductCodes(List<String> productCodes) {
        this.productCodes = productCodes;
    }

    public FiltersVm publicIps(List<String> publicIps) {

        this.publicIps = publicIps;
        return this;
    }

    public FiltersVm addPublicIpsItem(String publicIpsItem) {
        if (this.publicIps == null) {
            this.publicIps = new ArrayList<>();
        }
        this.publicIps.add(publicIpsItem);
        return this;
    }

    /**
     * The public IPs of the VMs.
     *
     * @return publicIps
     */
    @javax.annotation.Nullable
    public List<String> getPublicIps() {
        return publicIps;
    }

    public void setPublicIps(List<String> publicIps) {
        this.publicIps = publicIps;
    }

    public FiltersVm reservationIds(List<String> reservationIds) {

        this.reservationIds = reservationIds;
        return this;
    }

    public FiltersVm addReservationIdsItem(String reservationIdsItem) {
        if (this.reservationIds == null) {
            this.reservationIds = new ArrayList<>();
        }
        this.reservationIds.add(reservationIdsItem);
        return this;
    }

    /**
     * The IDs of the reservation of the VMs, created every time you launch VMs. These reservation
     * IDs can be associated with several VMs when you lauch a group of VMs using the same launch
     * request.
     *
     * @return reservationIds
     */
    @javax.annotation.Nullable
    public List<String> getReservationIds() {
        return reservationIds;
    }

    public void setReservationIds(List<String> reservationIds) {
        this.reservationIds = reservationIds;
    }

    public FiltersVm rootDeviceNames(List<String> rootDeviceNames) {

        this.rootDeviceNames = rootDeviceNames;
        return this;
    }

    public FiltersVm addRootDeviceNamesItem(String rootDeviceNamesItem) {
        if (this.rootDeviceNames == null) {
            this.rootDeviceNames = new ArrayList<>();
        }
        this.rootDeviceNames.add(rootDeviceNamesItem);
        return this;
    }

    /**
     * The names of the root devices for the VMs (for example, &#x60;/dev/sda1&#x60;)
     *
     * @return rootDeviceNames
     */
    @javax.annotation.Nullable
    public List<String> getRootDeviceNames() {
        return rootDeviceNames;
    }

    public void setRootDeviceNames(List<String> rootDeviceNames) {
        this.rootDeviceNames = rootDeviceNames;
    }

    public FiltersVm rootDeviceTypes(List<String> rootDeviceTypes) {

        this.rootDeviceTypes = rootDeviceTypes;
        return this;
    }

    public FiltersVm addRootDeviceTypesItem(String rootDeviceTypesItem) {
        if (this.rootDeviceTypes == null) {
            this.rootDeviceTypes = new ArrayList<>();
        }
        this.rootDeviceTypes.add(rootDeviceTypesItem);
        return this;
    }

    /**
     * The root devices types used by the VMs (always &#x60;ebs&#x60;)
     *
     * @return rootDeviceTypes
     */
    @javax.annotation.Nullable
    public List<String> getRootDeviceTypes() {
        return rootDeviceTypes;
    }

    public void setRootDeviceTypes(List<String> rootDeviceTypes) {
        this.rootDeviceTypes = rootDeviceTypes;
    }

    public FiltersVm securityGroupIds(List<String> securityGroupIds) {

        this.securityGroupIds = securityGroupIds;
        return this;
    }

    public FiltersVm addSecurityGroupIdsItem(String securityGroupIdsItem) {
        if (this.securityGroupIds == null) {
            this.securityGroupIds = new ArrayList<>();
        }
        this.securityGroupIds.add(securityGroupIdsItem);
        return this;
    }

    /**
     * The IDs of the security groups for the VMs (only in the public Cloud).
     *
     * @return securityGroupIds
     */
    @javax.annotation.Nullable
    public List<String> getSecurityGroupIds() {
        return securityGroupIds;
    }

    public void setSecurityGroupIds(List<String> securityGroupIds) {
        this.securityGroupIds = securityGroupIds;
    }

    public FiltersVm securityGroupNames(List<String> securityGroupNames) {

        this.securityGroupNames = securityGroupNames;
        return this;
    }

    public FiltersVm addSecurityGroupNamesItem(String securityGroupNamesItem) {
        if (this.securityGroupNames == null) {
            this.securityGroupNames = new ArrayList<>();
        }
        this.securityGroupNames.add(securityGroupNamesItem);
        return this;
    }

    /**
     * The names of the security groups for the VMs (only in the public Cloud).
     *
     * @return securityGroupNames
     */
    @javax.annotation.Nullable
    public List<String> getSecurityGroupNames() {
        return securityGroupNames;
    }

    public void setSecurityGroupNames(List<String> securityGroupNames) {
        this.securityGroupNames = securityGroupNames;
    }

    public FiltersVm stateReasonCodes(List<Integer> stateReasonCodes) {

        this.stateReasonCodes = stateReasonCodes;
        return this;
    }

    public FiltersVm addStateReasonCodesItem(Integer stateReasonCodesItem) {
        if (this.stateReasonCodes == null) {
            this.stateReasonCodes = new ArrayList<>();
        }
        this.stateReasonCodes.add(stateReasonCodesItem);
        return this;
    }

    /**
     * The reason codes for the state changes.
     *
     * @return stateReasonCodes
     */
    @javax.annotation.Nullable
    public List<Integer> getStateReasonCodes() {
        return stateReasonCodes;
    }

    public void setStateReasonCodes(List<Integer> stateReasonCodes) {
        this.stateReasonCodes = stateReasonCodes;
    }

    public FiltersVm stateReasonMessages(List<String> stateReasonMessages) {

        this.stateReasonMessages = stateReasonMessages;
        return this;
    }

    public FiltersVm addStateReasonMessagesItem(String stateReasonMessagesItem) {
        if (this.stateReasonMessages == null) {
            this.stateReasonMessages = new ArrayList<>();
        }
        this.stateReasonMessages.add(stateReasonMessagesItem);
        return this;
    }

    /**
     * The messages describing the state changes.
     *
     * @return stateReasonMessages
     */
    @javax.annotation.Nullable
    public List<String> getStateReasonMessages() {
        return stateReasonMessages;
    }

    public void setStateReasonMessages(List<String> stateReasonMessages) {
        this.stateReasonMessages = stateReasonMessages;
    }

    public FiltersVm stateReasons(List<String> stateReasons) {

        this.stateReasons = stateReasons;
        return this;
    }

    public FiltersVm addStateReasonsItem(String stateReasonsItem) {
        if (this.stateReasons == null) {
            this.stateReasons = new ArrayList<>();
        }
        this.stateReasons.add(stateReasonsItem);
        return this;
    }

    /**
     * The reasons explaining the current states of the VMs. This filter is like the
     * &#x60;StateReasonCodes&#x60; one.
     *
     * @return stateReasons
     */
    @javax.annotation.Nullable
    public List<String> getStateReasons() {
        return stateReasons;
    }

    public void setStateReasons(List<String> stateReasons) {
        this.stateReasons = stateReasons;
    }

    public FiltersVm subnetIds(List<String> subnetIds) {

        this.subnetIds = subnetIds;
        return this;
    }

    public FiltersVm addSubnetIdsItem(String subnetIdsItem) {
        if (this.subnetIds == null) {
            this.subnetIds = new ArrayList<>();
        }
        this.subnetIds.add(subnetIdsItem);
        return this;
    }

    /**
     * The IDs of the Subnets for the VMs.
     *
     * @return subnetIds
     */
    @javax.annotation.Nullable
    public List<String> getSubnetIds() {
        return subnetIds;
    }

    public void setSubnetIds(List<String> subnetIds) {
        this.subnetIds = subnetIds;
    }

    public FiltersVm subregionNames(List<String> subregionNames) {

        this.subregionNames = subregionNames;
        return this;
    }

    public FiltersVm addSubregionNamesItem(String subregionNamesItem) {
        if (this.subregionNames == null) {
            this.subregionNames = new ArrayList<>();
        }
        this.subregionNames.add(subregionNamesItem);
        return this;
    }

    /**
     * The names of the Subregions of the VMs.
     *
     * @return subregionNames
     */
    @javax.annotation.Nullable
    public List<String> getSubregionNames() {
        return subregionNames;
    }

    public void setSubregionNames(List<String> subregionNames) {
        this.subregionNames = subregionNames;
    }

    public FiltersVm tagKeys(List<String> tagKeys) {

        this.tagKeys = tagKeys;
        return this;
    }

    public FiltersVm addTagKeysItem(String tagKeysItem) {
        if (this.tagKeys == null) {
            this.tagKeys = new ArrayList<>();
        }
        this.tagKeys.add(tagKeysItem);
        return this;
    }

    /**
     * The keys of the tags associated with the VMs.
     *
     * @return tagKeys
     */
    @javax.annotation.Nullable
    public List<String> getTagKeys() {
        return tagKeys;
    }

    public void setTagKeys(List<String> tagKeys) {
        this.tagKeys = tagKeys;
    }

    public FiltersVm tagValues(List<String> tagValues) {

        this.tagValues = tagValues;
        return this;
    }

    public FiltersVm addTagValuesItem(String tagValuesItem) {
        if (this.tagValues == null) {
            this.tagValues = new ArrayList<>();
        }
        this.tagValues.add(tagValuesItem);
        return this;
    }

    /**
     * The values of the tags associated with the VMs.
     *
     * @return tagValues
     */
    @javax.annotation.Nullable
    public List<String> getTagValues() {
        return tagValues;
    }

    public void setTagValues(List<String> tagValues) {
        this.tagValues = tagValues;
    }

    public FiltersVm tags(List<String> tags) {

        this.tags = tags;
        return this;
    }

    public FiltersVm addTagsItem(String tagsItem) {
        if (this.tags == null) {
            this.tags = new ArrayList<>();
        }
        this.tags.add(tagsItem);
        return this;
    }

    /**
     * The key/value combination of the tags associated with the VMs, in the following format:
     * &amp;quot;Filters&amp;quot;:{&amp;quot;Tags&amp;quot;:[&amp;quot;TAGKEY&#x3D;TAGVALUE&amp;quot;]}.
     *
     * @return tags
     */
    @javax.annotation.Nullable
    public List<String> getTags() {
        return tags;
    }

    public void setTags(List<String> tags) {
        this.tags = tags;
    }

    public FiltersVm tenancies(List<String> tenancies) {

        this.tenancies = tenancies;
        return this;
    }

    public FiltersVm addTenanciesItem(String tenanciesItem) {
        if (this.tenancies == null) {
            this.tenancies = new ArrayList<>();
        }
        this.tenancies.add(tenanciesItem);
        return this;
    }

    /**
     * The tenancies of the VMs (&#x60;dedicated&#x60; \\| &#x60;default&#x60; \\|
     * &#x60;host&#x60;).
     *
     * @return tenancies
     */
    @javax.annotation.Nullable
    public List<String> getTenancies() {
        return tenancies;
    }

    public void setTenancies(List<String> tenancies) {
        this.tenancies = tenancies;
    }

    public FiltersVm vmIds(List<String> vmIds) {

        this.vmIds = vmIds;
        return this;
    }

    public FiltersVm addVmIdsItem(String vmIdsItem) {
        if (this.vmIds == null) {
            this.vmIds = new ArrayList<>();
        }
        this.vmIds.add(vmIdsItem);
        return this;
    }

    /**
     * One or more IDs of VMs.
     *
     * @return vmIds
     */
    @javax.annotation.Nullable
    public List<String> getVmIds() {
        return vmIds;
    }

    public void setVmIds(List<String> vmIds) {
        this.vmIds = vmIds;
    }

    public FiltersVm vmSecurityGroupIds(List<String> vmSecurityGroupIds) {

        this.vmSecurityGroupIds = vmSecurityGroupIds;
        return this;
    }

    public FiltersVm addVmSecurityGroupIdsItem(String vmSecurityGroupIdsItem) {
        if (this.vmSecurityGroupIds == null) {
            this.vmSecurityGroupIds = new ArrayList<>();
        }
        this.vmSecurityGroupIds.add(vmSecurityGroupIdsItem);
        return this;
    }

    /**
     * The IDs of the security groups for the VMs.
     *
     * @return vmSecurityGroupIds
     */
    @javax.annotation.Nullable
    public List<String> getVmSecurityGroupIds() {
        return vmSecurityGroupIds;
    }

    public void setVmSecurityGroupIds(List<String> vmSecurityGroupIds) {
        this.vmSecurityGroupIds = vmSecurityGroupIds;
    }

    public FiltersVm vmSecurityGroupNames(List<String> vmSecurityGroupNames) {

        this.vmSecurityGroupNames = vmSecurityGroupNames;
        return this;
    }

    public FiltersVm addVmSecurityGroupNamesItem(String vmSecurityGroupNamesItem) {
        if (this.vmSecurityGroupNames == null) {
            this.vmSecurityGroupNames = new ArrayList<>();
        }
        this.vmSecurityGroupNames.add(vmSecurityGroupNamesItem);
        return this;
    }

    /**
     * The names of the security group for the VMs.
     *
     * @return vmSecurityGroupNames
     */
    @javax.annotation.Nullable
    public List<String> getVmSecurityGroupNames() {
        return vmSecurityGroupNames;
    }

    public void setVmSecurityGroupNames(List<String> vmSecurityGroupNames) {
        this.vmSecurityGroupNames = vmSecurityGroupNames;
    }

    public FiltersVm vmStateCodes(List<Integer> vmStateCodes) {

        this.vmStateCodes = vmStateCodes;
        return this;
    }

    public FiltersVm addVmStateCodesItem(Integer vmStateCodesItem) {
        if (this.vmStateCodes == null) {
            this.vmStateCodes = new ArrayList<>();
        }
        this.vmStateCodes.add(vmStateCodesItem);
        return this;
    }

    /**
     * The state codes of the VMs: &#x60;-1&#x60; (quarantine), &#x60;0&#x60; (pending),
     * &#x60;16&#x60; (running), &#x60;32&#x60; (shutting-down), &#x60;48&#x60; (terminated),
     * &#x60;64&#x60; (stopping), and &#x60;80&#x60; (stopped).
     *
     * @return vmStateCodes
     */
    @javax.annotation.Nullable
    public List<Integer> getVmStateCodes() {
        return vmStateCodes;
    }

    public void setVmStateCodes(List<Integer> vmStateCodes) {
        this.vmStateCodes = vmStateCodes;
    }

    public FiltersVm vmStateNames(List<String> vmStateNames) {

        this.vmStateNames = vmStateNames;
        return this;
    }

    public FiltersVm addVmStateNamesItem(String vmStateNamesItem) {
        if (this.vmStateNames == null) {
            this.vmStateNames = new ArrayList<>();
        }
        this.vmStateNames.add(vmStateNamesItem);
        return this;
    }

    /**
     * The state names of the VMs (&#x60;pending&#x60; \\| &#x60;running&#x60; \\|
     * &#x60;stopping&#x60; \\| &#x60;stopped&#x60; \\| &#x60;shutting-down&#x60; \\|
     * &#x60;terminated&#x60; \\| &#x60;quarantine&#x60;).
     *
     * @return vmStateNames
     */
    @javax.annotation.Nullable
    public List<String> getVmStateNames() {
        return vmStateNames;
    }

    public void setVmStateNames(List<String> vmStateNames) {
        this.vmStateNames = vmStateNames;
    }

    public FiltersVm vmTypes(List<String> vmTypes) {

        this.vmTypes = vmTypes;
        return this;
    }

    public FiltersVm addVmTypesItem(String vmTypesItem) {
        if (this.vmTypes == null) {
            this.vmTypes = new ArrayList<>();
        }
        this.vmTypes.add(vmTypesItem);
        return this;
    }

    /**
     * The VM types (for example, t2.micro). For more information, see [VM
     * Types](https://docs.outscale.com/en/userguide/VM-Types.html).
     *
     * @return vmTypes
     */
    @javax.annotation.Nullable
    public List<String> getVmTypes() {
        return vmTypes;
    }

    public void setVmTypes(List<String> vmTypes) {
        this.vmTypes = vmTypes;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FiltersVm filtersVm = (FiltersVm) o;
        return Objects.equals(this.architectures, filtersVm.architectures)
                && Objects.equals(
                        this.blockDeviceMappingDeleteOnVmDeletion,
                        filtersVm.blockDeviceMappingDeleteOnVmDeletion)
                && Objects.equals(
                        this.blockDeviceMappingDeviceNames, filtersVm.blockDeviceMappingDeviceNames)
                && Objects.equals(
                        this.blockDeviceMappingLinkDates, filtersVm.blockDeviceMappingLinkDates)
                && Objects.equals(this.blockDeviceMappingStates, filtersVm.blockDeviceMappingStates)
                && Objects.equals(
                        this.blockDeviceMappingVolumeIds, filtersVm.blockDeviceMappingVolumeIds)
                && Objects.equals(this.clientTokens, filtersVm.clientTokens)
                && Objects.equals(this.creationDates, filtersVm.creationDates)
                && Objects.equals(this.imageIds, filtersVm.imageIds)
                && Objects.equals(this.isSourceDestChecked, filtersVm.isSourceDestChecked)
                && Objects.equals(this.keypairNames, filtersVm.keypairNames)
                && Objects.equals(this.launchNumbers, filtersVm.launchNumbers)
                && Objects.equals(this.lifecycles, filtersVm.lifecycles)
                && Objects.equals(this.netIds, filtersVm.netIds)
                && Objects.equals(this.nicAccountIds, filtersVm.nicAccountIds)
                && Objects.equals(this.nicDescriptions, filtersVm.nicDescriptions)
                && Objects.equals(this.nicIsSourceDestChecked, filtersVm.nicIsSourceDestChecked)
                && Objects.equals(
                        this.nicLinkNicDeleteOnVmDeletion, filtersVm.nicLinkNicDeleteOnVmDeletion)
                && Objects.equals(this.nicLinkNicDeviceNumbers, filtersVm.nicLinkNicDeviceNumbers)
                && Objects.equals(this.nicLinkNicLinkNicDates, filtersVm.nicLinkNicLinkNicDates)
                && Objects.equals(this.nicLinkNicLinkNicIds, filtersVm.nicLinkNicLinkNicIds)
                && Objects.equals(this.nicLinkNicStates, filtersVm.nicLinkNicStates)
                && Objects.equals(this.nicLinkNicVmAccountIds, filtersVm.nicLinkNicVmAccountIds)
                && Objects.equals(this.nicLinkNicVmIds, filtersVm.nicLinkNicVmIds)
                && Objects.equals(
                        this.nicLinkPublicIpAccountIds, filtersVm.nicLinkPublicIpAccountIds)
                && Objects.equals(
                        this.nicLinkPublicIpLinkPublicIpIds,
                        filtersVm.nicLinkPublicIpLinkPublicIpIds)
                && Objects.equals(
                        this.nicLinkPublicIpPublicIpIds, filtersVm.nicLinkPublicIpPublicIpIds)
                && Objects.equals(this.nicLinkPublicIpPublicIps, filtersVm.nicLinkPublicIpPublicIps)
                && Objects.equals(this.nicMacAddresses, filtersVm.nicMacAddresses)
                && Objects.equals(this.nicNetIds, filtersVm.nicNetIds)
                && Objects.equals(this.nicNicIds, filtersVm.nicNicIds)
                && Objects.equals(
                        this.nicPrivateIpsLinkPublicIpAccountIds,
                        filtersVm.nicPrivateIpsLinkPublicIpAccountIds)
                && Objects.equals(
                        this.nicPrivateIpsLinkPublicIpIds, filtersVm.nicPrivateIpsLinkPublicIpIds)
                && Objects.equals(this.nicPrivateIpsPrimaryIp, filtersVm.nicPrivateIpsPrimaryIp)
                && Objects.equals(this.nicPrivateIpsPrivateIps, filtersVm.nicPrivateIpsPrivateIps)
                && Objects.equals(this.nicSecurityGroupIds, filtersVm.nicSecurityGroupIds)
                && Objects.equals(this.nicSecurityGroupNames, filtersVm.nicSecurityGroupNames)
                && Objects.equals(this.nicStates, filtersVm.nicStates)
                && Objects.equals(this.nicSubnetIds, filtersVm.nicSubnetIds)
                && Objects.equals(this.nicSubregionNames, filtersVm.nicSubregionNames)
                && Objects.equals(this.platforms, filtersVm.platforms)
                && Objects.equals(this.privateIps, filtersVm.privateIps)
                && Objects.equals(this.productCodes, filtersVm.productCodes)
                && Objects.equals(this.publicIps, filtersVm.publicIps)
                && Objects.equals(this.reservationIds, filtersVm.reservationIds)
                && Objects.equals(this.rootDeviceNames, filtersVm.rootDeviceNames)
                && Objects.equals(this.rootDeviceTypes, filtersVm.rootDeviceTypes)
                && Objects.equals(this.securityGroupIds, filtersVm.securityGroupIds)
                && Objects.equals(this.securityGroupNames, filtersVm.securityGroupNames)
                && Objects.equals(this.stateReasonCodes, filtersVm.stateReasonCodes)
                && Objects.equals(this.stateReasonMessages, filtersVm.stateReasonMessages)
                && Objects.equals(this.stateReasons, filtersVm.stateReasons)
                && Objects.equals(this.subnetIds, filtersVm.subnetIds)
                && Objects.equals(this.subregionNames, filtersVm.subregionNames)
                && Objects.equals(this.tagKeys, filtersVm.tagKeys)
                && Objects.equals(this.tagValues, filtersVm.tagValues)
                && Objects.equals(this.tags, filtersVm.tags)
                && Objects.equals(this.tenancies, filtersVm.tenancies)
                && Objects.equals(this.vmIds, filtersVm.vmIds)
                && Objects.equals(this.vmSecurityGroupIds, filtersVm.vmSecurityGroupIds)
                && Objects.equals(this.vmSecurityGroupNames, filtersVm.vmSecurityGroupNames)
                && Objects.equals(this.vmStateCodes, filtersVm.vmStateCodes)
                && Objects.equals(this.vmStateNames, filtersVm.vmStateNames)
                && Objects.equals(this.vmTypes, filtersVm.vmTypes);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                architectures,
                blockDeviceMappingDeleteOnVmDeletion,
                blockDeviceMappingDeviceNames,
                blockDeviceMappingLinkDates,
                blockDeviceMappingStates,
                blockDeviceMappingVolumeIds,
                clientTokens,
                creationDates,
                imageIds,
                isSourceDestChecked,
                keypairNames,
                launchNumbers,
                lifecycles,
                netIds,
                nicAccountIds,
                nicDescriptions,
                nicIsSourceDestChecked,
                nicLinkNicDeleteOnVmDeletion,
                nicLinkNicDeviceNumbers,
                nicLinkNicLinkNicDates,
                nicLinkNicLinkNicIds,
                nicLinkNicStates,
                nicLinkNicVmAccountIds,
                nicLinkNicVmIds,
                nicLinkPublicIpAccountIds,
                nicLinkPublicIpLinkPublicIpIds,
                nicLinkPublicIpPublicIpIds,
                nicLinkPublicIpPublicIps,
                nicMacAddresses,
                nicNetIds,
                nicNicIds,
                nicPrivateIpsLinkPublicIpAccountIds,
                nicPrivateIpsLinkPublicIpIds,
                nicPrivateIpsPrimaryIp,
                nicPrivateIpsPrivateIps,
                nicSecurityGroupIds,
                nicSecurityGroupNames,
                nicStates,
                nicSubnetIds,
                nicSubregionNames,
                platforms,
                privateIps,
                productCodes,
                publicIps,
                reservationIds,
                rootDeviceNames,
                rootDeviceTypes,
                securityGroupIds,
                securityGroupNames,
                stateReasonCodes,
                stateReasonMessages,
                stateReasons,
                subnetIds,
                subregionNames,
                tagKeys,
                tagValues,
                tags,
                tenancies,
                vmIds,
                vmSecurityGroupIds,
                vmSecurityGroupNames,
                vmStateCodes,
                vmStateNames,
                vmTypes);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class FiltersVm {\n");
        sb.append("    architectures: ").append(toIndentedString(architectures)).append("\n");
        sb.append("    blockDeviceMappingDeleteOnVmDeletion: ")
                .append(toIndentedString(blockDeviceMappingDeleteOnVmDeletion))
                .append("\n");
        sb.append("    blockDeviceMappingDeviceNames: ")
                .append(toIndentedString(blockDeviceMappingDeviceNames))
                .append("\n");
        sb.append("    blockDeviceMappingLinkDates: ")
                .append(toIndentedString(blockDeviceMappingLinkDates))
                .append("\n");
        sb.append("    blockDeviceMappingStates: ")
                .append(toIndentedString(blockDeviceMappingStates))
                .append("\n");
        sb.append("    blockDeviceMappingVolumeIds: ")
                .append(toIndentedString(blockDeviceMappingVolumeIds))
                .append("\n");
        sb.append("    clientTokens: ").append(toIndentedString(clientTokens)).append("\n");
        sb.append("    creationDates: ").append(toIndentedString(creationDates)).append("\n");
        sb.append("    imageIds: ").append(toIndentedString(imageIds)).append("\n");
        sb.append("    isSourceDestChecked: ")
                .append(toIndentedString(isSourceDestChecked))
                .append("\n");
        sb.append("    keypairNames: ").append(toIndentedString(keypairNames)).append("\n");
        sb.append("    launchNumbers: ").append(toIndentedString(launchNumbers)).append("\n");
        sb.append("    lifecycles: ").append(toIndentedString(lifecycles)).append("\n");
        sb.append("    netIds: ").append(toIndentedString(netIds)).append("\n");
        sb.append("    nicAccountIds: ").append(toIndentedString(nicAccountIds)).append("\n");
        sb.append("    nicDescriptions: ").append(toIndentedString(nicDescriptions)).append("\n");
        sb.append("    nicIsSourceDestChecked: ")
                .append(toIndentedString(nicIsSourceDestChecked))
                .append("\n");
        sb.append("    nicLinkNicDeleteOnVmDeletion: ")
                .append(toIndentedString(nicLinkNicDeleteOnVmDeletion))
                .append("\n");
        sb.append("    nicLinkNicDeviceNumbers: ")
                .append(toIndentedString(nicLinkNicDeviceNumbers))
                .append("\n");
        sb.append("    nicLinkNicLinkNicDates: ")
                .append(toIndentedString(nicLinkNicLinkNicDates))
                .append("\n");
        sb.append("    nicLinkNicLinkNicIds: ")
                .append(toIndentedString(nicLinkNicLinkNicIds))
                .append("\n");
        sb.append("    nicLinkNicStates: ").append(toIndentedString(nicLinkNicStates)).append("\n");
        sb.append("    nicLinkNicVmAccountIds: ")
                .append(toIndentedString(nicLinkNicVmAccountIds))
                .append("\n");
        sb.append("    nicLinkNicVmIds: ").append(toIndentedString(nicLinkNicVmIds)).append("\n");
        sb.append("    nicLinkPublicIpAccountIds: ")
                .append(toIndentedString(nicLinkPublicIpAccountIds))
                .append("\n");
        sb.append("    nicLinkPublicIpLinkPublicIpIds: ")
                .append(toIndentedString(nicLinkPublicIpLinkPublicIpIds))
                .append("\n");
        sb.append("    nicLinkPublicIpPublicIpIds: ")
                .append(toIndentedString(nicLinkPublicIpPublicIpIds))
                .append("\n");
        sb.append("    nicLinkPublicIpPublicIps: ")
                .append(toIndentedString(nicLinkPublicIpPublicIps))
                .append("\n");
        sb.append("    nicMacAddresses: ").append(toIndentedString(nicMacAddresses)).append("\n");
        sb.append("    nicNetIds: ").append(toIndentedString(nicNetIds)).append("\n");
        sb.append("    nicNicIds: ").append(toIndentedString(nicNicIds)).append("\n");
        sb.append("    nicPrivateIpsLinkPublicIpAccountIds: ")
                .append(toIndentedString(nicPrivateIpsLinkPublicIpAccountIds))
                .append("\n");
        sb.append("    nicPrivateIpsLinkPublicIpIds: ")
                .append(toIndentedString(nicPrivateIpsLinkPublicIpIds))
                .append("\n");
        sb.append("    nicPrivateIpsPrimaryIp: ")
                .append(toIndentedString(nicPrivateIpsPrimaryIp))
                .append("\n");
        sb.append("    nicPrivateIpsPrivateIps: ")
                .append(toIndentedString(nicPrivateIpsPrivateIps))
                .append("\n");
        sb.append("    nicSecurityGroupIds: ")
                .append(toIndentedString(nicSecurityGroupIds))
                .append("\n");
        sb.append("    nicSecurityGroupNames: ")
                .append(toIndentedString(nicSecurityGroupNames))
                .append("\n");
        sb.append("    nicStates: ").append(toIndentedString(nicStates)).append("\n");
        sb.append("    nicSubnetIds: ").append(toIndentedString(nicSubnetIds)).append("\n");
        sb.append("    nicSubregionNames: ")
                .append(toIndentedString(nicSubregionNames))
                .append("\n");
        sb.append("    platforms: ").append(toIndentedString(platforms)).append("\n");
        sb.append("    privateIps: ").append(toIndentedString(privateIps)).append("\n");
        sb.append("    productCodes: ").append(toIndentedString(productCodes)).append("\n");
        sb.append("    publicIps: ").append(toIndentedString(publicIps)).append("\n");
        sb.append("    reservationIds: ").append(toIndentedString(reservationIds)).append("\n");
        sb.append("    rootDeviceNames: ").append(toIndentedString(rootDeviceNames)).append("\n");
        sb.append("    rootDeviceTypes: ").append(toIndentedString(rootDeviceTypes)).append("\n");
        sb.append("    securityGroupIds: ").append(toIndentedString(securityGroupIds)).append("\n");
        sb.append("    securityGroupNames: ")
                .append(toIndentedString(securityGroupNames))
                .append("\n");
        sb.append("    stateReasonCodes: ").append(toIndentedString(stateReasonCodes)).append("\n");
        sb.append("    stateReasonMessages: ")
                .append(toIndentedString(stateReasonMessages))
                .append("\n");
        sb.append("    stateReasons: ").append(toIndentedString(stateReasons)).append("\n");
        sb.append("    subnetIds: ").append(toIndentedString(subnetIds)).append("\n");
        sb.append("    subregionNames: ").append(toIndentedString(subregionNames)).append("\n");
        sb.append("    tagKeys: ").append(toIndentedString(tagKeys)).append("\n");
        sb.append("    tagValues: ").append(toIndentedString(tagValues)).append("\n");
        sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
        sb.append("    tenancies: ").append(toIndentedString(tenancies)).append("\n");
        sb.append("    vmIds: ").append(toIndentedString(vmIds)).append("\n");
        sb.append("    vmSecurityGroupIds: ")
                .append(toIndentedString(vmSecurityGroupIds))
                .append("\n");
        sb.append("    vmSecurityGroupNames: ")
                .append(toIndentedString(vmSecurityGroupNames))
                .append("\n");
        sb.append("    vmStateCodes: ").append(toIndentedString(vmStateCodes)).append("\n");
        sb.append("    vmStateNames: ").append(toIndentedString(vmStateNames)).append("\n");
        sb.append("    vmTypes: ").append(toIndentedString(vmTypes)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("Architectures");
        openapiFields.add("BlockDeviceMappingDeleteOnVmDeletion");
        openapiFields.add("BlockDeviceMappingDeviceNames");
        openapiFields.add("BlockDeviceMappingLinkDates");
        openapiFields.add("BlockDeviceMappingStates");
        openapiFields.add("BlockDeviceMappingVolumeIds");
        openapiFields.add("ClientTokens");
        openapiFields.add("CreationDates");
        openapiFields.add("ImageIds");
        openapiFields.add("IsSourceDestChecked");
        openapiFields.add("KeypairNames");
        openapiFields.add("LaunchNumbers");
        openapiFields.add("Lifecycles");
        openapiFields.add("NetIds");
        openapiFields.add("NicAccountIds");
        openapiFields.add("NicDescriptions");
        openapiFields.add("NicIsSourceDestChecked");
        openapiFields.add("NicLinkNicDeleteOnVmDeletion");
        openapiFields.add("NicLinkNicDeviceNumbers");
        openapiFields.add("NicLinkNicLinkNicDates");
        openapiFields.add("NicLinkNicLinkNicIds");
        openapiFields.add("NicLinkNicStates");
        openapiFields.add("NicLinkNicVmAccountIds");
        openapiFields.add("NicLinkNicVmIds");
        openapiFields.add("NicLinkPublicIpAccountIds");
        openapiFields.add("NicLinkPublicIpLinkPublicIpIds");
        openapiFields.add("NicLinkPublicIpPublicIpIds");
        openapiFields.add("NicLinkPublicIpPublicIps");
        openapiFields.add("NicMacAddresses");
        openapiFields.add("NicNetIds");
        openapiFields.add("NicNicIds");
        openapiFields.add("NicPrivateIpsLinkPublicIpAccountIds");
        openapiFields.add("NicPrivateIpsLinkPublicIpIds");
        openapiFields.add("NicPrivateIpsPrimaryIp");
        openapiFields.add("NicPrivateIpsPrivateIps");
        openapiFields.add("NicSecurityGroupIds");
        openapiFields.add("NicSecurityGroupNames");
        openapiFields.add("NicStates");
        openapiFields.add("NicSubnetIds");
        openapiFields.add("NicSubregionNames");
        openapiFields.add("Platforms");
        openapiFields.add("PrivateIps");
        openapiFields.add("ProductCodes");
        openapiFields.add("PublicIps");
        openapiFields.add("ReservationIds");
        openapiFields.add("RootDeviceNames");
        openapiFields.add("RootDeviceTypes");
        openapiFields.add("SecurityGroupIds");
        openapiFields.add("SecurityGroupNames");
        openapiFields.add("StateReasonCodes");
        openapiFields.add("StateReasonMessages");
        openapiFields.add("StateReasons");
        openapiFields.add("SubnetIds");
        openapiFields.add("SubregionNames");
        openapiFields.add("TagKeys");
        openapiFields.add("TagValues");
        openapiFields.add("Tags");
        openapiFields.add("Tenancies");
        openapiFields.add("VmIds");
        openapiFields.add("VmSecurityGroupIds");
        openapiFields.add("VmSecurityGroupNames");
        openapiFields.add("VmStateCodes");
        openapiFields.add("VmStateNames");
        openapiFields.add("VmTypes");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to FiltersVm
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!FiltersVm.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in FiltersVm is not found in the empty"
                                        + " JSON string",
                                FiltersVm.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!FiltersVm.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `FiltersVm` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("Architectures") != null && !jsonObj.get("Architectures").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `Architectures` to be an array in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("Architectures").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("BlockDeviceMappingDeviceNames") != null
                && !jsonObj.get("BlockDeviceMappingDeviceNames").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `BlockDeviceMappingDeviceNames` to be an array in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("BlockDeviceMappingDeviceNames").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("BlockDeviceMappingLinkDates") != null
                && !jsonObj.get("BlockDeviceMappingLinkDates").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `BlockDeviceMappingLinkDates` to be an array in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("BlockDeviceMappingLinkDates").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("BlockDeviceMappingStates") != null
                && !jsonObj.get("BlockDeviceMappingStates").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `BlockDeviceMappingStates` to be an array in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("BlockDeviceMappingStates").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("BlockDeviceMappingVolumeIds") != null
                && !jsonObj.get("BlockDeviceMappingVolumeIds").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `BlockDeviceMappingVolumeIds` to be an array in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("BlockDeviceMappingVolumeIds").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("ClientTokens") != null && !jsonObj.get("ClientTokens").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `ClientTokens` to be an array in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("ClientTokens").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("CreationDates") != null && !jsonObj.get("CreationDates").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `CreationDates` to be an array in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("CreationDates").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("ImageIds") != null && !jsonObj.get("ImageIds").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `ImageIds` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("ImageIds").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("KeypairNames") != null && !jsonObj.get("KeypairNames").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `KeypairNames` to be an array in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("KeypairNames").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("LaunchNumbers") != null && !jsonObj.get("LaunchNumbers").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `LaunchNumbers` to be an array in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("LaunchNumbers").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("Lifecycles") != null && !jsonObj.get("Lifecycles").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `Lifecycles` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("Lifecycles").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("NetIds") != null && !jsonObj.get("NetIds").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `NetIds` to be an array in the JSON string but got"
                                    + " `%s`",
                            jsonObj.get("NetIds").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("NicAccountIds") != null && !jsonObj.get("NicAccountIds").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `NicAccountIds` to be an array in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("NicAccountIds").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("NicDescriptions") != null
                && !jsonObj.get("NicDescriptions").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `NicDescriptions` to be an array in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("NicDescriptions").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("NicLinkNicDeviceNumbers") != null
                && !jsonObj.get("NicLinkNicDeviceNumbers").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `NicLinkNicDeviceNumbers` to be an array in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("NicLinkNicDeviceNumbers").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("NicLinkNicLinkNicDates") != null
                && !jsonObj.get("NicLinkNicLinkNicDates").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `NicLinkNicLinkNicDates` to be an array in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("NicLinkNicLinkNicDates").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("NicLinkNicLinkNicIds") != null
                && !jsonObj.get("NicLinkNicLinkNicIds").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `NicLinkNicLinkNicIds` to be an array in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("NicLinkNicLinkNicIds").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("NicLinkNicStates") != null
                && !jsonObj.get("NicLinkNicStates").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `NicLinkNicStates` to be an array in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("NicLinkNicStates").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("NicLinkNicVmAccountIds") != null
                && !jsonObj.get("NicLinkNicVmAccountIds").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `NicLinkNicVmAccountIds` to be an array in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("NicLinkNicVmAccountIds").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("NicLinkNicVmIds") != null
                && !jsonObj.get("NicLinkNicVmIds").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `NicLinkNicVmIds` to be an array in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("NicLinkNicVmIds").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("NicLinkPublicIpAccountIds") != null
                && !jsonObj.get("NicLinkPublicIpAccountIds").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `NicLinkPublicIpAccountIds` to be an array in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("NicLinkPublicIpAccountIds").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("NicLinkPublicIpLinkPublicIpIds") != null
                && !jsonObj.get("NicLinkPublicIpLinkPublicIpIds").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `NicLinkPublicIpLinkPublicIpIds` to be an array in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("NicLinkPublicIpLinkPublicIpIds").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("NicLinkPublicIpPublicIpIds") != null
                && !jsonObj.get("NicLinkPublicIpPublicIpIds").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `NicLinkPublicIpPublicIpIds` to be an array in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("NicLinkPublicIpPublicIpIds").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("NicLinkPublicIpPublicIps") != null
                && !jsonObj.get("NicLinkPublicIpPublicIps").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `NicLinkPublicIpPublicIps` to be an array in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("NicLinkPublicIpPublicIps").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("NicMacAddresses") != null
                && !jsonObj.get("NicMacAddresses").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `NicMacAddresses` to be an array in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("NicMacAddresses").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("NicNetIds") != null && !jsonObj.get("NicNetIds").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `NicNetIds` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("NicNetIds").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("NicNicIds") != null && !jsonObj.get("NicNicIds").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `NicNicIds` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("NicNicIds").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("NicPrivateIpsLinkPublicIpAccountIds") != null
                && !jsonObj.get("NicPrivateIpsLinkPublicIpAccountIds").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `NicPrivateIpsLinkPublicIpAccountIds` to be an"
                                    + " array in the JSON string but got `%s`",
                            jsonObj.get("NicPrivateIpsLinkPublicIpAccountIds").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("NicPrivateIpsLinkPublicIpIds") != null
                && !jsonObj.get("NicPrivateIpsLinkPublicIpIds").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `NicPrivateIpsLinkPublicIpIds` to be an array in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("NicPrivateIpsLinkPublicIpIds").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("NicPrivateIpsPrivateIps") != null
                && !jsonObj.get("NicPrivateIpsPrivateIps").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `NicPrivateIpsPrivateIps` to be an array in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("NicPrivateIpsPrivateIps").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("NicSecurityGroupIds") != null
                && !jsonObj.get("NicSecurityGroupIds").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `NicSecurityGroupIds` to be an array in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("NicSecurityGroupIds").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("NicSecurityGroupNames") != null
                && !jsonObj.get("NicSecurityGroupNames").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `NicSecurityGroupNames` to be an array in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("NicSecurityGroupNames").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("NicStates") != null && !jsonObj.get("NicStates").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `NicStates` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("NicStates").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("NicSubnetIds") != null && !jsonObj.get("NicSubnetIds").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `NicSubnetIds` to be an array in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("NicSubnetIds").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("NicSubregionNames") != null
                && !jsonObj.get("NicSubregionNames").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `NicSubregionNames` to be an array in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("NicSubregionNames").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("Platforms") != null && !jsonObj.get("Platforms").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `Platforms` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("Platforms").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("PrivateIps") != null && !jsonObj.get("PrivateIps").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `PrivateIps` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("PrivateIps").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("ProductCodes") != null && !jsonObj.get("ProductCodes").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `ProductCodes` to be an array in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("ProductCodes").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("PublicIps") != null && !jsonObj.get("PublicIps").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `PublicIps` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("PublicIps").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("ReservationIds") != null && !jsonObj.get("ReservationIds").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `ReservationIds` to be an array in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("ReservationIds").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("RootDeviceNames") != null
                && !jsonObj.get("RootDeviceNames").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `RootDeviceNames` to be an array in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("RootDeviceNames").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("RootDeviceTypes") != null
                && !jsonObj.get("RootDeviceTypes").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `RootDeviceTypes` to be an array in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("RootDeviceTypes").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("SecurityGroupIds") != null
                && !jsonObj.get("SecurityGroupIds").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `SecurityGroupIds` to be an array in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("SecurityGroupIds").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("SecurityGroupNames") != null
                && !jsonObj.get("SecurityGroupNames").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `SecurityGroupNames` to be an array in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("SecurityGroupNames").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("StateReasonCodes") != null
                && !jsonObj.get("StateReasonCodes").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `StateReasonCodes` to be an array in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("StateReasonCodes").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("StateReasonMessages") != null
                && !jsonObj.get("StateReasonMessages").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `StateReasonMessages` to be an array in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("StateReasonMessages").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("StateReasons") != null && !jsonObj.get("StateReasons").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `StateReasons` to be an array in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("StateReasons").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("SubnetIds") != null && !jsonObj.get("SubnetIds").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `SubnetIds` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("SubnetIds").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("SubregionNames") != null && !jsonObj.get("SubregionNames").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `SubregionNames` to be an array in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("SubregionNames").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("TagKeys") != null && !jsonObj.get("TagKeys").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `TagKeys` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("TagKeys").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("TagValues") != null && !jsonObj.get("TagValues").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `TagValues` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("TagValues").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `Tags` to be an array in the JSON string but got"
                                    + " `%s`",
                            jsonObj.get("Tags").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("Tenancies") != null && !jsonObj.get("Tenancies").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `Tenancies` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("Tenancies").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("VmIds") != null && !jsonObj.get("VmIds").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `VmIds` to be an array in the JSON string but got"
                                    + " `%s`",
                            jsonObj.get("VmIds").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("VmSecurityGroupIds") != null
                && !jsonObj.get("VmSecurityGroupIds").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `VmSecurityGroupIds` to be an array in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("VmSecurityGroupIds").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("VmSecurityGroupNames") != null
                && !jsonObj.get("VmSecurityGroupNames").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `VmSecurityGroupNames` to be an array in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("VmSecurityGroupNames").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("VmStateCodes") != null && !jsonObj.get("VmStateCodes").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `VmStateCodes` to be an array in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("VmStateCodes").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("VmStateNames") != null && !jsonObj.get("VmStateNames").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `VmStateNames` to be an array in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("VmStateNames").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("VmTypes") != null && !jsonObj.get("VmTypes").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `VmTypes` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("VmTypes").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!FiltersVm.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'FiltersVm' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<FiltersVm> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(FiltersVm.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<FiltersVm>() {
                        @Override
                        public void write(JsonWriter out, FiltersVm value) throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public FiltersVm read(JsonReader in) throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of FiltersVm given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of FiltersVm
     * @throws IOException if the JSON string is invalid with respect to FiltersVm
     */
    public static FiltersVm fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, FiltersVm.class);
    }

    /**
     * Convert an instance of FiltersVm to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
