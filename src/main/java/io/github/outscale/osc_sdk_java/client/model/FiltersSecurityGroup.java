/*
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> Throttling: To protect against overloads, the number of identical requests allowed in a given time period is limited.<br /> Brute force: To protect against brute force attacks, the number of failed authentication attempts in a given time period is limited.<br /><br /> You can learn more about errors returned by the API in the dedicated [errors page](api/errors).<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).<br /> # Authentication Schemes ### Access Key/Secret Key The main way to authenticate your requests to the OUTSCALE API is to use an access key and a secret key.<br /> The mechanism behind this is based on AWS Signature Version 4, whose technical implementation details are described in [Signature of API Requests](https://docs.outscale.com/en/userguide/Signature-of-API-Requests.html).<br /><br /> In practice, the way to specify your access key and secret key depends on the tool or SDK you want to use to interact with the API.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify your access key, secret key, and the Region of your account. > 2. You then specify the `--profile` option when executing OSC CLI commands. >  > For more information, see [Installing and Configuring OSC CLI](https://docs.outscale.com/en/userguide/Installing-and-Configuring-OSC-CLI.html).  See the code samples in each section of this documentation for specific examples in different programming languages.<br /> For more information about access keys, see [About Access Keys](https://docs.outscale.com/en/userguide/About-Access-Keys.html). ### Login/Password For certain API actions, you can also use basic authentication with the login (email address) and password of your TINA account.<br /> This is useful only in special circumstances, for example if you do not know your access key/secret key and want to retrieve them programmatically.<br /> In most cases, however, you can use the Cockpit web interface to retrieve them.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify the Region of your account, but you leave the access key value and secret key value empty (`&quot;&quot;`). > 2. You then specify the `--profile`, `--authentication-method`, `--login`, and `--password` options when executing OSC CLI commands.  See the code samples in each section of this documentation for specific examples in different programming languages. ### No Authentication A few API actions do not require any authentication. They are indicated as such in this documentation.<br /> ### Other Security Mechanisms In parallel with the authentication schemes, you can add other security mechanisms to your OUTSCALE account, for example to restrict API requests by IP or other criteria.<br /> For more information, see [Managing Your API Accesses](https://docs.outscale.com/en/userguide/Managing-Your-API-Accesses.html).
 *
 * The version of the OpenAPI document: 1.28.7
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.github.outscale.osc_sdk_java.client.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.outscale.osc_sdk_java.client.JSON;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/** One or more filters. */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FiltersSecurityGroup {
    public static final String SERIALIZED_NAME_DESCRIPTIONS = "Descriptions";

    @SerializedName(SERIALIZED_NAME_DESCRIPTIONS)
    private List<String> descriptions = null;

    public static final String SERIALIZED_NAME_INBOUND_RULE_ACCOUNT_IDS = "InboundRuleAccountIds";

    @SerializedName(SERIALIZED_NAME_INBOUND_RULE_ACCOUNT_IDS)
    private List<String> inboundRuleAccountIds = null;

    public static final String SERIALIZED_NAME_INBOUND_RULE_FROM_PORT_RANGES =
            "InboundRuleFromPortRanges";

    @SerializedName(SERIALIZED_NAME_INBOUND_RULE_FROM_PORT_RANGES)
    private List<Integer> inboundRuleFromPortRanges = null;

    public static final String SERIALIZED_NAME_INBOUND_RULE_IP_RANGES = "InboundRuleIpRanges";

    @SerializedName(SERIALIZED_NAME_INBOUND_RULE_IP_RANGES)
    private List<String> inboundRuleIpRanges = null;

    public static final String SERIALIZED_NAME_INBOUND_RULE_PROTOCOLS = "InboundRuleProtocols";

    @SerializedName(SERIALIZED_NAME_INBOUND_RULE_PROTOCOLS)
    private List<String> inboundRuleProtocols = null;

    public static final String SERIALIZED_NAME_INBOUND_RULE_SECURITY_GROUP_IDS =
            "InboundRuleSecurityGroupIds";

    @SerializedName(SERIALIZED_NAME_INBOUND_RULE_SECURITY_GROUP_IDS)
    private List<String> inboundRuleSecurityGroupIds = null;

    public static final String SERIALIZED_NAME_INBOUND_RULE_SECURITY_GROUP_NAMES =
            "InboundRuleSecurityGroupNames";

    @SerializedName(SERIALIZED_NAME_INBOUND_RULE_SECURITY_GROUP_NAMES)
    private List<String> inboundRuleSecurityGroupNames = null;

    public static final String SERIALIZED_NAME_INBOUND_RULE_TO_PORT_RANGES =
            "InboundRuleToPortRanges";

    @SerializedName(SERIALIZED_NAME_INBOUND_RULE_TO_PORT_RANGES)
    private List<Integer> inboundRuleToPortRanges = null;

    public static final String SERIALIZED_NAME_NET_IDS = "NetIds";

    @SerializedName(SERIALIZED_NAME_NET_IDS)
    private List<String> netIds = null;

    public static final String SERIALIZED_NAME_OUTBOUND_RULE_ACCOUNT_IDS = "OutboundRuleAccountIds";

    @SerializedName(SERIALIZED_NAME_OUTBOUND_RULE_ACCOUNT_IDS)
    private List<String> outboundRuleAccountIds = null;

    public static final String SERIALIZED_NAME_OUTBOUND_RULE_FROM_PORT_RANGES =
            "OutboundRuleFromPortRanges";

    @SerializedName(SERIALIZED_NAME_OUTBOUND_RULE_FROM_PORT_RANGES)
    private List<Integer> outboundRuleFromPortRanges = null;

    public static final String SERIALIZED_NAME_OUTBOUND_RULE_IP_RANGES = "OutboundRuleIpRanges";

    @SerializedName(SERIALIZED_NAME_OUTBOUND_RULE_IP_RANGES)
    private List<String> outboundRuleIpRanges = null;

    public static final String SERIALIZED_NAME_OUTBOUND_RULE_PROTOCOLS = "OutboundRuleProtocols";

    @SerializedName(SERIALIZED_NAME_OUTBOUND_RULE_PROTOCOLS)
    private List<String> outboundRuleProtocols = null;

    public static final String SERIALIZED_NAME_OUTBOUND_RULE_SECURITY_GROUP_IDS =
            "OutboundRuleSecurityGroupIds";

    @SerializedName(SERIALIZED_NAME_OUTBOUND_RULE_SECURITY_GROUP_IDS)
    private List<String> outboundRuleSecurityGroupIds = null;

    public static final String SERIALIZED_NAME_OUTBOUND_RULE_SECURITY_GROUP_NAMES =
            "OutboundRuleSecurityGroupNames";

    @SerializedName(SERIALIZED_NAME_OUTBOUND_RULE_SECURITY_GROUP_NAMES)
    private List<String> outboundRuleSecurityGroupNames = null;

    public static final String SERIALIZED_NAME_OUTBOUND_RULE_TO_PORT_RANGES =
            "OutboundRuleToPortRanges";

    @SerializedName(SERIALIZED_NAME_OUTBOUND_RULE_TO_PORT_RANGES)
    private List<Integer> outboundRuleToPortRanges = null;

    public static final String SERIALIZED_NAME_SECURITY_GROUP_IDS = "SecurityGroupIds";

    @SerializedName(SERIALIZED_NAME_SECURITY_GROUP_IDS)
    private List<String> securityGroupIds = null;

    public static final String SERIALIZED_NAME_SECURITY_GROUP_NAMES = "SecurityGroupNames";

    @SerializedName(SERIALIZED_NAME_SECURITY_GROUP_NAMES)
    private List<String> securityGroupNames = null;

    public static final String SERIALIZED_NAME_TAG_KEYS = "TagKeys";

    @SerializedName(SERIALIZED_NAME_TAG_KEYS)
    private List<String> tagKeys = null;

    public static final String SERIALIZED_NAME_TAG_VALUES = "TagValues";

    @SerializedName(SERIALIZED_NAME_TAG_VALUES)
    private List<String> tagValues = null;

    public static final String SERIALIZED_NAME_TAGS = "Tags";

    @SerializedName(SERIALIZED_NAME_TAGS)
    private List<String> tags = null;

    public FiltersSecurityGroup() {}

    public FiltersSecurityGroup descriptions(List<String> descriptions) {

        this.descriptions = descriptions;
        return this;
    }

    public FiltersSecurityGroup addDescriptionsItem(String descriptionsItem) {
        if (this.descriptions == null) {
            this.descriptions = new ArrayList<>();
        }
        this.descriptions.add(descriptionsItem);
        return this;
    }

    /**
     * The descriptions of the security groups.
     *
     * @return descriptions
     */
    @javax.annotation.Nullable
    public List<String> getDescriptions() {
        return descriptions;
    }

    public void setDescriptions(List<String> descriptions) {
        this.descriptions = descriptions;
    }

    public FiltersSecurityGroup inboundRuleAccountIds(List<String> inboundRuleAccountIds) {

        this.inboundRuleAccountIds = inboundRuleAccountIds;
        return this;
    }

    public FiltersSecurityGroup addInboundRuleAccountIdsItem(String inboundRuleAccountIdsItem) {
        if (this.inboundRuleAccountIds == null) {
            this.inboundRuleAccountIds = new ArrayList<>();
        }
        this.inboundRuleAccountIds.add(inboundRuleAccountIdsItem);
        return this;
    }

    /**
     * The account IDs that have been granted permissions.
     *
     * @return inboundRuleAccountIds
     */
    @javax.annotation.Nullable
    public List<String> getInboundRuleAccountIds() {
        return inboundRuleAccountIds;
    }

    public void setInboundRuleAccountIds(List<String> inboundRuleAccountIds) {
        this.inboundRuleAccountIds = inboundRuleAccountIds;
    }

    public FiltersSecurityGroup inboundRuleFromPortRanges(List<Integer> inboundRuleFromPortRanges) {

        this.inboundRuleFromPortRanges = inboundRuleFromPortRanges;
        return this;
    }

    public FiltersSecurityGroup addInboundRuleFromPortRangesItem(
            Integer inboundRuleFromPortRangesItem) {
        if (this.inboundRuleFromPortRanges == null) {
            this.inboundRuleFromPortRanges = new ArrayList<>();
        }
        this.inboundRuleFromPortRanges.add(inboundRuleFromPortRangesItem);
        return this;
    }

    /**
     * The beginnings of the port ranges for the TCP and UDP protocols, or the ICMP type numbers.
     *
     * @return inboundRuleFromPortRanges
     */
    @javax.annotation.Nullable
    public List<Integer> getInboundRuleFromPortRanges() {
        return inboundRuleFromPortRanges;
    }

    public void setInboundRuleFromPortRanges(List<Integer> inboundRuleFromPortRanges) {
        this.inboundRuleFromPortRanges = inboundRuleFromPortRanges;
    }

    public FiltersSecurityGroup inboundRuleIpRanges(List<String> inboundRuleIpRanges) {

        this.inboundRuleIpRanges = inboundRuleIpRanges;
        return this;
    }

    public FiltersSecurityGroup addInboundRuleIpRangesItem(String inboundRuleIpRangesItem) {
        if (this.inboundRuleIpRanges == null) {
            this.inboundRuleIpRanges = new ArrayList<>();
        }
        this.inboundRuleIpRanges.add(inboundRuleIpRangesItem);
        return this;
    }

    /**
     * The IP ranges that have been granted permissions, in CIDR notation (for example,
     * &#x60;10.0.0.0/24&#x60;).
     *
     * @return inboundRuleIpRanges
     */
    @javax.annotation.Nullable
    public List<String> getInboundRuleIpRanges() {
        return inboundRuleIpRanges;
    }

    public void setInboundRuleIpRanges(List<String> inboundRuleIpRanges) {
        this.inboundRuleIpRanges = inboundRuleIpRanges;
    }

    public FiltersSecurityGroup inboundRuleProtocols(List<String> inboundRuleProtocols) {

        this.inboundRuleProtocols = inboundRuleProtocols;
        return this;
    }

    public FiltersSecurityGroup addInboundRuleProtocolsItem(String inboundRuleProtocolsItem) {
        if (this.inboundRuleProtocols == null) {
            this.inboundRuleProtocols = new ArrayList<>();
        }
        this.inboundRuleProtocols.add(inboundRuleProtocolsItem);
        return this;
    }

    /**
     * The IP protocols for the permissions (&#x60;tcp&#x60; \\| &#x60;udp&#x60; \\|
     * &#x60;icmp&#x60;, or a protocol number, or &#x60;-1&#x60; for all protocols).
     *
     * @return inboundRuleProtocols
     */
    @javax.annotation.Nullable
    public List<String> getInboundRuleProtocols() {
        return inboundRuleProtocols;
    }

    public void setInboundRuleProtocols(List<String> inboundRuleProtocols) {
        this.inboundRuleProtocols = inboundRuleProtocols;
    }

    public FiltersSecurityGroup inboundRuleSecurityGroupIds(
            List<String> inboundRuleSecurityGroupIds) {

        this.inboundRuleSecurityGroupIds = inboundRuleSecurityGroupIds;
        return this;
    }

    public FiltersSecurityGroup addInboundRuleSecurityGroupIdsItem(
            String inboundRuleSecurityGroupIdsItem) {
        if (this.inboundRuleSecurityGroupIds == null) {
            this.inboundRuleSecurityGroupIds = new ArrayList<>();
        }
        this.inboundRuleSecurityGroupIds.add(inboundRuleSecurityGroupIdsItem);
        return this;
    }

    /**
     * The IDs of the security groups that have been granted permissions.
     *
     * @return inboundRuleSecurityGroupIds
     */
    @javax.annotation.Nullable
    public List<String> getInboundRuleSecurityGroupIds() {
        return inboundRuleSecurityGroupIds;
    }

    public void setInboundRuleSecurityGroupIds(List<String> inboundRuleSecurityGroupIds) {
        this.inboundRuleSecurityGroupIds = inboundRuleSecurityGroupIds;
    }

    public FiltersSecurityGroup inboundRuleSecurityGroupNames(
            List<String> inboundRuleSecurityGroupNames) {

        this.inboundRuleSecurityGroupNames = inboundRuleSecurityGroupNames;
        return this;
    }

    public FiltersSecurityGroup addInboundRuleSecurityGroupNamesItem(
            String inboundRuleSecurityGroupNamesItem) {
        if (this.inboundRuleSecurityGroupNames == null) {
            this.inboundRuleSecurityGroupNames = new ArrayList<>();
        }
        this.inboundRuleSecurityGroupNames.add(inboundRuleSecurityGroupNamesItem);
        return this;
    }

    /**
     * The names of the security groups that have been granted permissions.
     *
     * @return inboundRuleSecurityGroupNames
     */
    @javax.annotation.Nullable
    public List<String> getInboundRuleSecurityGroupNames() {
        return inboundRuleSecurityGroupNames;
    }

    public void setInboundRuleSecurityGroupNames(List<String> inboundRuleSecurityGroupNames) {
        this.inboundRuleSecurityGroupNames = inboundRuleSecurityGroupNames;
    }

    public FiltersSecurityGroup inboundRuleToPortRanges(List<Integer> inboundRuleToPortRanges) {

        this.inboundRuleToPortRanges = inboundRuleToPortRanges;
        return this;
    }

    public FiltersSecurityGroup addInboundRuleToPortRangesItem(
            Integer inboundRuleToPortRangesItem) {
        if (this.inboundRuleToPortRanges == null) {
            this.inboundRuleToPortRanges = new ArrayList<>();
        }
        this.inboundRuleToPortRanges.add(inboundRuleToPortRangesItem);
        return this;
    }

    /**
     * The ends of the port ranges for the TCP and UDP protocols, or the ICMP code numbers.
     *
     * @return inboundRuleToPortRanges
     */
    @javax.annotation.Nullable
    public List<Integer> getInboundRuleToPortRanges() {
        return inboundRuleToPortRanges;
    }

    public void setInboundRuleToPortRanges(List<Integer> inboundRuleToPortRanges) {
        this.inboundRuleToPortRanges = inboundRuleToPortRanges;
    }

    public FiltersSecurityGroup netIds(List<String> netIds) {

        this.netIds = netIds;
        return this;
    }

    public FiltersSecurityGroup addNetIdsItem(String netIdsItem) {
        if (this.netIds == null) {
            this.netIds = new ArrayList<>();
        }
        this.netIds.add(netIdsItem);
        return this;
    }

    /**
     * The IDs of the Nets specified when the security groups were created.
     *
     * @return netIds
     */
    @javax.annotation.Nullable
    public List<String> getNetIds() {
        return netIds;
    }

    public void setNetIds(List<String> netIds) {
        this.netIds = netIds;
    }

    public FiltersSecurityGroup outboundRuleAccountIds(List<String> outboundRuleAccountIds) {

        this.outboundRuleAccountIds = outboundRuleAccountIds;
        return this;
    }

    public FiltersSecurityGroup addOutboundRuleAccountIdsItem(String outboundRuleAccountIdsItem) {
        if (this.outboundRuleAccountIds == null) {
            this.outboundRuleAccountIds = new ArrayList<>();
        }
        this.outboundRuleAccountIds.add(outboundRuleAccountIdsItem);
        return this;
    }

    /**
     * The account IDs that have been granted permissions.
     *
     * @return outboundRuleAccountIds
     */
    @javax.annotation.Nullable
    public List<String> getOutboundRuleAccountIds() {
        return outboundRuleAccountIds;
    }

    public void setOutboundRuleAccountIds(List<String> outboundRuleAccountIds) {
        this.outboundRuleAccountIds = outboundRuleAccountIds;
    }

    public FiltersSecurityGroup outboundRuleFromPortRanges(
            List<Integer> outboundRuleFromPortRanges) {

        this.outboundRuleFromPortRanges = outboundRuleFromPortRanges;
        return this;
    }

    public FiltersSecurityGroup addOutboundRuleFromPortRangesItem(
            Integer outboundRuleFromPortRangesItem) {
        if (this.outboundRuleFromPortRanges == null) {
            this.outboundRuleFromPortRanges = new ArrayList<>();
        }
        this.outboundRuleFromPortRanges.add(outboundRuleFromPortRangesItem);
        return this;
    }

    /**
     * The beginnings of the port ranges for the TCP and UDP protocols, or the ICMP type numbers.
     *
     * @return outboundRuleFromPortRanges
     */
    @javax.annotation.Nullable
    public List<Integer> getOutboundRuleFromPortRanges() {
        return outboundRuleFromPortRanges;
    }

    public void setOutboundRuleFromPortRanges(List<Integer> outboundRuleFromPortRanges) {
        this.outboundRuleFromPortRanges = outboundRuleFromPortRanges;
    }

    public FiltersSecurityGroup outboundRuleIpRanges(List<String> outboundRuleIpRanges) {

        this.outboundRuleIpRanges = outboundRuleIpRanges;
        return this;
    }

    public FiltersSecurityGroup addOutboundRuleIpRangesItem(String outboundRuleIpRangesItem) {
        if (this.outboundRuleIpRanges == null) {
            this.outboundRuleIpRanges = new ArrayList<>();
        }
        this.outboundRuleIpRanges.add(outboundRuleIpRangesItem);
        return this;
    }

    /**
     * The IP ranges that have been granted permissions, in CIDR notation (for example,
     * &#x60;10.0.0.0/24&#x60;).
     *
     * @return outboundRuleIpRanges
     */
    @javax.annotation.Nullable
    public List<String> getOutboundRuleIpRanges() {
        return outboundRuleIpRanges;
    }

    public void setOutboundRuleIpRanges(List<String> outboundRuleIpRanges) {
        this.outboundRuleIpRanges = outboundRuleIpRanges;
    }

    public FiltersSecurityGroup outboundRuleProtocols(List<String> outboundRuleProtocols) {

        this.outboundRuleProtocols = outboundRuleProtocols;
        return this;
    }

    public FiltersSecurityGroup addOutboundRuleProtocolsItem(String outboundRuleProtocolsItem) {
        if (this.outboundRuleProtocols == null) {
            this.outboundRuleProtocols = new ArrayList<>();
        }
        this.outboundRuleProtocols.add(outboundRuleProtocolsItem);
        return this;
    }

    /**
     * The IP protocols for the permissions (&#x60;tcp&#x60; \\| &#x60;udp&#x60; \\|
     * &#x60;icmp&#x60;, or a protocol number, or &#x60;-1&#x60; for all protocols).
     *
     * @return outboundRuleProtocols
     */
    @javax.annotation.Nullable
    public List<String> getOutboundRuleProtocols() {
        return outboundRuleProtocols;
    }

    public void setOutboundRuleProtocols(List<String> outboundRuleProtocols) {
        this.outboundRuleProtocols = outboundRuleProtocols;
    }

    public FiltersSecurityGroup outboundRuleSecurityGroupIds(
            List<String> outboundRuleSecurityGroupIds) {

        this.outboundRuleSecurityGroupIds = outboundRuleSecurityGroupIds;
        return this;
    }

    public FiltersSecurityGroup addOutboundRuleSecurityGroupIdsItem(
            String outboundRuleSecurityGroupIdsItem) {
        if (this.outboundRuleSecurityGroupIds == null) {
            this.outboundRuleSecurityGroupIds = new ArrayList<>();
        }
        this.outboundRuleSecurityGroupIds.add(outboundRuleSecurityGroupIdsItem);
        return this;
    }

    /**
     * The IDs of the security groups that have been granted permissions.
     *
     * @return outboundRuleSecurityGroupIds
     */
    @javax.annotation.Nullable
    public List<String> getOutboundRuleSecurityGroupIds() {
        return outboundRuleSecurityGroupIds;
    }

    public void setOutboundRuleSecurityGroupIds(List<String> outboundRuleSecurityGroupIds) {
        this.outboundRuleSecurityGroupIds = outboundRuleSecurityGroupIds;
    }

    public FiltersSecurityGroup outboundRuleSecurityGroupNames(
            List<String> outboundRuleSecurityGroupNames) {

        this.outboundRuleSecurityGroupNames = outboundRuleSecurityGroupNames;
        return this;
    }

    public FiltersSecurityGroup addOutboundRuleSecurityGroupNamesItem(
            String outboundRuleSecurityGroupNamesItem) {
        if (this.outboundRuleSecurityGroupNames == null) {
            this.outboundRuleSecurityGroupNames = new ArrayList<>();
        }
        this.outboundRuleSecurityGroupNames.add(outboundRuleSecurityGroupNamesItem);
        return this;
    }

    /**
     * The names of the security groups that have been granted permissions.
     *
     * @return outboundRuleSecurityGroupNames
     */
    @javax.annotation.Nullable
    public List<String> getOutboundRuleSecurityGroupNames() {
        return outboundRuleSecurityGroupNames;
    }

    public void setOutboundRuleSecurityGroupNames(List<String> outboundRuleSecurityGroupNames) {
        this.outboundRuleSecurityGroupNames = outboundRuleSecurityGroupNames;
    }

    public FiltersSecurityGroup outboundRuleToPortRanges(List<Integer> outboundRuleToPortRanges) {

        this.outboundRuleToPortRanges = outboundRuleToPortRanges;
        return this;
    }

    public FiltersSecurityGroup addOutboundRuleToPortRangesItem(
            Integer outboundRuleToPortRangesItem) {
        if (this.outboundRuleToPortRanges == null) {
            this.outboundRuleToPortRanges = new ArrayList<>();
        }
        this.outboundRuleToPortRanges.add(outboundRuleToPortRangesItem);
        return this;
    }

    /**
     * The ends of the port ranges for the TCP and UDP protocols, or the ICMP code numbers.
     *
     * @return outboundRuleToPortRanges
     */
    @javax.annotation.Nullable
    public List<Integer> getOutboundRuleToPortRanges() {
        return outboundRuleToPortRanges;
    }

    public void setOutboundRuleToPortRanges(List<Integer> outboundRuleToPortRanges) {
        this.outboundRuleToPortRanges = outboundRuleToPortRanges;
    }

    public FiltersSecurityGroup securityGroupIds(List<String> securityGroupIds) {

        this.securityGroupIds = securityGroupIds;
        return this;
    }

    public FiltersSecurityGroup addSecurityGroupIdsItem(String securityGroupIdsItem) {
        if (this.securityGroupIds == null) {
            this.securityGroupIds = new ArrayList<>();
        }
        this.securityGroupIds.add(securityGroupIdsItem);
        return this;
    }

    /**
     * The IDs of the security groups.
     *
     * @return securityGroupIds
     */
    @javax.annotation.Nullable
    public List<String> getSecurityGroupIds() {
        return securityGroupIds;
    }

    public void setSecurityGroupIds(List<String> securityGroupIds) {
        this.securityGroupIds = securityGroupIds;
    }

    public FiltersSecurityGroup securityGroupNames(List<String> securityGroupNames) {

        this.securityGroupNames = securityGroupNames;
        return this;
    }

    public FiltersSecurityGroup addSecurityGroupNamesItem(String securityGroupNamesItem) {
        if (this.securityGroupNames == null) {
            this.securityGroupNames = new ArrayList<>();
        }
        this.securityGroupNames.add(securityGroupNamesItem);
        return this;
    }

    /**
     * The names of the security groups.
     *
     * @return securityGroupNames
     */
    @javax.annotation.Nullable
    public List<String> getSecurityGroupNames() {
        return securityGroupNames;
    }

    public void setSecurityGroupNames(List<String> securityGroupNames) {
        this.securityGroupNames = securityGroupNames;
    }

    public FiltersSecurityGroup tagKeys(List<String> tagKeys) {

        this.tagKeys = tagKeys;
        return this;
    }

    public FiltersSecurityGroup addTagKeysItem(String tagKeysItem) {
        if (this.tagKeys == null) {
            this.tagKeys = new ArrayList<>();
        }
        this.tagKeys.add(tagKeysItem);
        return this;
    }

    /**
     * The keys of the tags associated with the security groups.
     *
     * @return tagKeys
     */
    @javax.annotation.Nullable
    public List<String> getTagKeys() {
        return tagKeys;
    }

    public void setTagKeys(List<String> tagKeys) {
        this.tagKeys = tagKeys;
    }

    public FiltersSecurityGroup tagValues(List<String> tagValues) {

        this.tagValues = tagValues;
        return this;
    }

    public FiltersSecurityGroup addTagValuesItem(String tagValuesItem) {
        if (this.tagValues == null) {
            this.tagValues = new ArrayList<>();
        }
        this.tagValues.add(tagValuesItem);
        return this;
    }

    /**
     * The values of the tags associated with the security groups.
     *
     * @return tagValues
     */
    @javax.annotation.Nullable
    public List<String> getTagValues() {
        return tagValues;
    }

    public void setTagValues(List<String> tagValues) {
        this.tagValues = tagValues;
    }

    public FiltersSecurityGroup tags(List<String> tags) {

        this.tags = tags;
        return this;
    }

    public FiltersSecurityGroup addTagsItem(String tagsItem) {
        if (this.tags == null) {
            this.tags = new ArrayList<>();
        }
        this.tags.add(tagsItem);
        return this;
    }

    /**
     * The key/value combination of the tags associated with the security groups, in the following
     * format:
     * &amp;quot;Filters&amp;quot;:{&amp;quot;Tags&amp;quot;:[&amp;quot;TAGKEY&#x3D;TAGVALUE&amp;quot;]}.
     *
     * @return tags
     */
    @javax.annotation.Nullable
    public List<String> getTags() {
        return tags;
    }

    public void setTags(List<String> tags) {
        this.tags = tags;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FiltersSecurityGroup filtersSecurityGroup = (FiltersSecurityGroup) o;
        return Objects.equals(this.descriptions, filtersSecurityGroup.descriptions)
                && Objects.equals(
                        this.inboundRuleAccountIds, filtersSecurityGroup.inboundRuleAccountIds)
                && Objects.equals(
                        this.inboundRuleFromPortRanges,
                        filtersSecurityGroup.inboundRuleFromPortRanges)
                && Objects.equals(
                        this.inboundRuleIpRanges, filtersSecurityGroup.inboundRuleIpRanges)
                && Objects.equals(
                        this.inboundRuleProtocols, filtersSecurityGroup.inboundRuleProtocols)
                && Objects.equals(
                        this.inboundRuleSecurityGroupIds,
                        filtersSecurityGroup.inboundRuleSecurityGroupIds)
                && Objects.equals(
                        this.inboundRuleSecurityGroupNames,
                        filtersSecurityGroup.inboundRuleSecurityGroupNames)
                && Objects.equals(
                        this.inboundRuleToPortRanges, filtersSecurityGroup.inboundRuleToPortRanges)
                && Objects.equals(this.netIds, filtersSecurityGroup.netIds)
                && Objects.equals(
                        this.outboundRuleAccountIds, filtersSecurityGroup.outboundRuleAccountIds)
                && Objects.equals(
                        this.outboundRuleFromPortRanges,
                        filtersSecurityGroup.outboundRuleFromPortRanges)
                && Objects.equals(
                        this.outboundRuleIpRanges, filtersSecurityGroup.outboundRuleIpRanges)
                && Objects.equals(
                        this.outboundRuleProtocols, filtersSecurityGroup.outboundRuleProtocols)
                && Objects.equals(
                        this.outboundRuleSecurityGroupIds,
                        filtersSecurityGroup.outboundRuleSecurityGroupIds)
                && Objects.equals(
                        this.outboundRuleSecurityGroupNames,
                        filtersSecurityGroup.outboundRuleSecurityGroupNames)
                && Objects.equals(
                        this.outboundRuleToPortRanges,
                        filtersSecurityGroup.outboundRuleToPortRanges)
                && Objects.equals(this.securityGroupIds, filtersSecurityGroup.securityGroupIds)
                && Objects.equals(this.securityGroupNames, filtersSecurityGroup.securityGroupNames)
                && Objects.equals(this.tagKeys, filtersSecurityGroup.tagKeys)
                && Objects.equals(this.tagValues, filtersSecurityGroup.tagValues)
                && Objects.equals(this.tags, filtersSecurityGroup.tags);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                descriptions,
                inboundRuleAccountIds,
                inboundRuleFromPortRanges,
                inboundRuleIpRanges,
                inboundRuleProtocols,
                inboundRuleSecurityGroupIds,
                inboundRuleSecurityGroupNames,
                inboundRuleToPortRanges,
                netIds,
                outboundRuleAccountIds,
                outboundRuleFromPortRanges,
                outboundRuleIpRanges,
                outboundRuleProtocols,
                outboundRuleSecurityGroupIds,
                outboundRuleSecurityGroupNames,
                outboundRuleToPortRanges,
                securityGroupIds,
                securityGroupNames,
                tagKeys,
                tagValues,
                tags);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class FiltersSecurityGroup {\n");
        sb.append("    descriptions: ").append(toIndentedString(descriptions)).append("\n");
        sb.append("    inboundRuleAccountIds: ")
                .append(toIndentedString(inboundRuleAccountIds))
                .append("\n");
        sb.append("    inboundRuleFromPortRanges: ")
                .append(toIndentedString(inboundRuleFromPortRanges))
                .append("\n");
        sb.append("    inboundRuleIpRanges: ")
                .append(toIndentedString(inboundRuleIpRanges))
                .append("\n");
        sb.append("    inboundRuleProtocols: ")
                .append(toIndentedString(inboundRuleProtocols))
                .append("\n");
        sb.append("    inboundRuleSecurityGroupIds: ")
                .append(toIndentedString(inboundRuleSecurityGroupIds))
                .append("\n");
        sb.append("    inboundRuleSecurityGroupNames: ")
                .append(toIndentedString(inboundRuleSecurityGroupNames))
                .append("\n");
        sb.append("    inboundRuleToPortRanges: ")
                .append(toIndentedString(inboundRuleToPortRanges))
                .append("\n");
        sb.append("    netIds: ").append(toIndentedString(netIds)).append("\n");
        sb.append("    outboundRuleAccountIds: ")
                .append(toIndentedString(outboundRuleAccountIds))
                .append("\n");
        sb.append("    outboundRuleFromPortRanges: ")
                .append(toIndentedString(outboundRuleFromPortRanges))
                .append("\n");
        sb.append("    outboundRuleIpRanges: ")
                .append(toIndentedString(outboundRuleIpRanges))
                .append("\n");
        sb.append("    outboundRuleProtocols: ")
                .append(toIndentedString(outboundRuleProtocols))
                .append("\n");
        sb.append("    outboundRuleSecurityGroupIds: ")
                .append(toIndentedString(outboundRuleSecurityGroupIds))
                .append("\n");
        sb.append("    outboundRuleSecurityGroupNames: ")
                .append(toIndentedString(outboundRuleSecurityGroupNames))
                .append("\n");
        sb.append("    outboundRuleToPortRanges: ")
                .append(toIndentedString(outboundRuleToPortRanges))
                .append("\n");
        sb.append("    securityGroupIds: ").append(toIndentedString(securityGroupIds)).append("\n");
        sb.append("    securityGroupNames: ")
                .append(toIndentedString(securityGroupNames))
                .append("\n");
        sb.append("    tagKeys: ").append(toIndentedString(tagKeys)).append("\n");
        sb.append("    tagValues: ").append(toIndentedString(tagValues)).append("\n");
        sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("Descriptions");
        openapiFields.add("InboundRuleAccountIds");
        openapiFields.add("InboundRuleFromPortRanges");
        openapiFields.add("InboundRuleIpRanges");
        openapiFields.add("InboundRuleProtocols");
        openapiFields.add("InboundRuleSecurityGroupIds");
        openapiFields.add("InboundRuleSecurityGroupNames");
        openapiFields.add("InboundRuleToPortRanges");
        openapiFields.add("NetIds");
        openapiFields.add("OutboundRuleAccountIds");
        openapiFields.add("OutboundRuleFromPortRanges");
        openapiFields.add("OutboundRuleIpRanges");
        openapiFields.add("OutboundRuleProtocols");
        openapiFields.add("OutboundRuleSecurityGroupIds");
        openapiFields.add("OutboundRuleSecurityGroupNames");
        openapiFields.add("OutboundRuleToPortRanges");
        openapiFields.add("SecurityGroupIds");
        openapiFields.add("SecurityGroupNames");
        openapiFields.add("TagKeys");
        openapiFields.add("TagValues");
        openapiFields.add("Tags");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to FiltersSecurityGroup
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!FiltersSecurityGroup.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in FiltersSecurityGroup is not found in"
                                        + " the empty JSON string",
                                FiltersSecurityGroup.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!FiltersSecurityGroup.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `FiltersSecurityGroup` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("Descriptions") != null && !jsonObj.get("Descriptions").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `Descriptions` to be an array in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("Descriptions").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("InboundRuleAccountIds") != null
                && !jsonObj.get("InboundRuleAccountIds").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `InboundRuleAccountIds` to be an array in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("InboundRuleAccountIds").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("InboundRuleFromPortRanges") != null
                && !jsonObj.get("InboundRuleFromPortRanges").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `InboundRuleFromPortRanges` to be an array in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("InboundRuleFromPortRanges").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("InboundRuleIpRanges") != null
                && !jsonObj.get("InboundRuleIpRanges").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `InboundRuleIpRanges` to be an array in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("InboundRuleIpRanges").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("InboundRuleProtocols") != null
                && !jsonObj.get("InboundRuleProtocols").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `InboundRuleProtocols` to be an array in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("InboundRuleProtocols").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("InboundRuleSecurityGroupIds") != null
                && !jsonObj.get("InboundRuleSecurityGroupIds").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `InboundRuleSecurityGroupIds` to be an array in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("InboundRuleSecurityGroupIds").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("InboundRuleSecurityGroupNames") != null
                && !jsonObj.get("InboundRuleSecurityGroupNames").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `InboundRuleSecurityGroupNames` to be an array in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("InboundRuleSecurityGroupNames").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("InboundRuleToPortRanges") != null
                && !jsonObj.get("InboundRuleToPortRanges").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `InboundRuleToPortRanges` to be an array in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("InboundRuleToPortRanges").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("NetIds") != null && !jsonObj.get("NetIds").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `NetIds` to be an array in the JSON string but got"
                                    + " `%s`",
                            jsonObj.get("NetIds").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("OutboundRuleAccountIds") != null
                && !jsonObj.get("OutboundRuleAccountIds").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `OutboundRuleAccountIds` to be an array in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("OutboundRuleAccountIds").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("OutboundRuleFromPortRanges") != null
                && !jsonObj.get("OutboundRuleFromPortRanges").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `OutboundRuleFromPortRanges` to be an array in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("OutboundRuleFromPortRanges").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("OutboundRuleIpRanges") != null
                && !jsonObj.get("OutboundRuleIpRanges").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `OutboundRuleIpRanges` to be an array in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("OutboundRuleIpRanges").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("OutboundRuleProtocols") != null
                && !jsonObj.get("OutboundRuleProtocols").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `OutboundRuleProtocols` to be an array in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("OutboundRuleProtocols").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("OutboundRuleSecurityGroupIds") != null
                && !jsonObj.get("OutboundRuleSecurityGroupIds").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `OutboundRuleSecurityGroupIds` to be an array in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("OutboundRuleSecurityGroupIds").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("OutboundRuleSecurityGroupNames") != null
                && !jsonObj.get("OutboundRuleSecurityGroupNames").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `OutboundRuleSecurityGroupNames` to be an array in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("OutboundRuleSecurityGroupNames").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("OutboundRuleToPortRanges") != null
                && !jsonObj.get("OutboundRuleToPortRanges").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `OutboundRuleToPortRanges` to be an array in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("OutboundRuleToPortRanges").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("SecurityGroupIds") != null
                && !jsonObj.get("SecurityGroupIds").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `SecurityGroupIds` to be an array in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("SecurityGroupIds").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("SecurityGroupNames") != null
                && !jsonObj.get("SecurityGroupNames").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `SecurityGroupNames` to be an array in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("SecurityGroupNames").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("TagKeys") != null && !jsonObj.get("TagKeys").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `TagKeys` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("TagKeys").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("TagValues") != null && !jsonObj.get("TagValues").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `TagValues` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("TagValues").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `Tags` to be an array in the JSON string but got"
                                    + " `%s`",
                            jsonObj.get("Tags").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!FiltersSecurityGroup.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'FiltersSecurityGroup' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<FiltersSecurityGroup> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(FiltersSecurityGroup.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<FiltersSecurityGroup>() {
                        @Override
                        public void write(JsonWriter out, FiltersSecurityGroup value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public FiltersSecurityGroup read(JsonReader in) throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of FiltersSecurityGroup given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of FiltersSecurityGroup
     * @throws IOException if the JSON string is invalid with respect to FiltersSecurityGroup
     */
    public static FiltersSecurityGroup fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, FiltersSecurityGroup.class);
    }

    /**
     * Convert an instance of FiltersSecurityGroup to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
