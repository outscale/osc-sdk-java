/*
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> Throttling: To protect against overloads, the number of identical requests allowed in a given time period is limited.<br /> Brute force: To protect against brute force attacks, the number of failed authentication attempts in a given time period is limited.<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/About-the-APIs.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).<br /> # Authentication Schemes ### Access Key/Secret Key The main way to authenticate your requests to the OUTSCALE API is to use an access key and a secret key.<br /> The mechanism behind this is based on AWS Signature Version 4, whose technical implementation details are described in [Signature of API Requests](https://docs.outscale.com/en/userguide/Signature-of-API-Requests.html).<br /><br /> In practice, the way to specify your access key and secret key depends on the tool or SDK you want to use to interact with the API.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify your access key, secret key, and the Region of your account. > 2. You then specify the `--profile` option when executing OSC CLI commands. >  > For more information, see [Installing and Configuring OSC CLI](https://docs.outscale.com/en/userguide/Installing-and-Configuring-OSC-CLI.html).  See the code samples in each section of this documentation for specific examples in different programming languages.<br /> For more information about access keys, see [About Access Keys](https://docs.outscale.com/en/userguide/About-Access-Keys.html).  > If you try to sign requests with an invalid access key four times in a row, further authentication attempts will be prevented for 1 minute. This lockout time increases 1 minute every four failed attempts, for up to 10 minutes.  ### Login/Password For certain API actions, you can also use basic authentication with the login (email address) and password of your TINA account.<br /> This is useful only in special circumstances, for example if you do not know your access key/secret key and want to retrieve them programmatically.<br /> In most cases, however, you can use the Cockpit web interface to retrieve them.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify the Region of your account, but you leave the access key value and secret key value empty (`&quot;&quot;`). > 2. You then specify the `--profile`, `--authentication-method`, `--login`, and `--password` options when executing OSC CLI commands.  See the code samples in each section of this documentation for specific examples in different programming languages.  > If you try to sign requests with an invalid password four times in a row, further authentication attempts will be prevented for 1 minute. This lockout time increases 1 minute every four failed attempts, for up to 10 minutes.  ### No Authentication A few API actions do not require any authentication. They are indicated as such in this documentation.<br /> ### Other Security Mechanisms In parallel with the authentication schemes, you can add other security mechanisms to your OUTSCALE account, for example to restrict API requests by IP or other criteria.<br /> For more information, see [Managing Your API Accesses](https://docs.outscale.com/en/userguide/Managing-Your-API-Accesses.html).<br /> # Error Codes Reference You can learn more about errors returned by the API in the dedicated [errors page](api-errors.html).
 *
 * The version of the OpenAPI document: 1.30.0
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.github.outscale.osc_sdk_java.client.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.outscale.osc_sdk_java.client.JSON;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/** One or more filters. */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FiltersImage {
    public static final String SERIALIZED_NAME_ACCOUNT_ALIASES = "AccountAliases";

    @SerializedName(SERIALIZED_NAME_ACCOUNT_ALIASES)
    private List<String> accountAliases = null;

    public static final String SERIALIZED_NAME_ACCOUNT_IDS = "AccountIds";

    @SerializedName(SERIALIZED_NAME_ACCOUNT_IDS)
    private List<String> accountIds = null;

    public static final String SERIALIZED_NAME_ARCHITECTURES = "Architectures";

    @SerializedName(SERIALIZED_NAME_ARCHITECTURES)
    private List<String> architectures = null;

    public static final String SERIALIZED_NAME_BLOCK_DEVICE_MAPPING_DELETE_ON_VM_DELETION =
            "BlockDeviceMappingDeleteOnVmDeletion";

    @SerializedName(SERIALIZED_NAME_BLOCK_DEVICE_MAPPING_DELETE_ON_VM_DELETION)
    private Boolean blockDeviceMappingDeleteOnVmDeletion;

    public static final String SERIALIZED_NAME_BLOCK_DEVICE_MAPPING_DEVICE_NAMES =
            "BlockDeviceMappingDeviceNames";

    @SerializedName(SERIALIZED_NAME_BLOCK_DEVICE_MAPPING_DEVICE_NAMES)
    private List<String> blockDeviceMappingDeviceNames = null;

    public static final String SERIALIZED_NAME_BLOCK_DEVICE_MAPPING_SNAPSHOT_IDS =
            "BlockDeviceMappingSnapshotIds";

    @SerializedName(SERIALIZED_NAME_BLOCK_DEVICE_MAPPING_SNAPSHOT_IDS)
    private List<String> blockDeviceMappingSnapshotIds = null;

    public static final String SERIALIZED_NAME_BLOCK_DEVICE_MAPPING_VOLUME_SIZES =
            "BlockDeviceMappingVolumeSizes";

    @SerializedName(SERIALIZED_NAME_BLOCK_DEVICE_MAPPING_VOLUME_SIZES)
    private List<Integer> blockDeviceMappingVolumeSizes = null;

    public static final String SERIALIZED_NAME_BLOCK_DEVICE_MAPPING_VOLUME_TYPES =
            "BlockDeviceMappingVolumeTypes";

    @SerializedName(SERIALIZED_NAME_BLOCK_DEVICE_MAPPING_VOLUME_TYPES)
    private List<String> blockDeviceMappingVolumeTypes = null;

    public static final String SERIALIZED_NAME_DESCRIPTIONS = "Descriptions";

    @SerializedName(SERIALIZED_NAME_DESCRIPTIONS)
    private List<String> descriptions = null;

    public static final String SERIALIZED_NAME_FILE_LOCATIONS = "FileLocations";

    @SerializedName(SERIALIZED_NAME_FILE_LOCATIONS)
    private List<String> fileLocations = null;

    public static final String SERIALIZED_NAME_HYPERVISORS = "Hypervisors";

    @SerializedName(SERIALIZED_NAME_HYPERVISORS)
    private List<String> hypervisors = null;

    public static final String SERIALIZED_NAME_IMAGE_IDS = "ImageIds";

    @SerializedName(SERIALIZED_NAME_IMAGE_IDS)
    private List<String> imageIds = null;

    public static final String SERIALIZED_NAME_IMAGE_NAMES = "ImageNames";

    @SerializedName(SERIALIZED_NAME_IMAGE_NAMES)
    private List<String> imageNames = null;

    public static final String SERIALIZED_NAME_PERMISSIONS_TO_LAUNCH_ACCOUNT_IDS =
            "PermissionsToLaunchAccountIds";

    @SerializedName(SERIALIZED_NAME_PERMISSIONS_TO_LAUNCH_ACCOUNT_IDS)
    private List<String> permissionsToLaunchAccountIds = null;

    public static final String SERIALIZED_NAME_PERMISSIONS_TO_LAUNCH_GLOBAL_PERMISSION =
            "PermissionsToLaunchGlobalPermission";

    @SerializedName(SERIALIZED_NAME_PERMISSIONS_TO_LAUNCH_GLOBAL_PERMISSION)
    private Boolean permissionsToLaunchGlobalPermission;

    public static final String SERIALIZED_NAME_PRODUCT_CODE_NAMES = "ProductCodeNames";

    @SerializedName(SERIALIZED_NAME_PRODUCT_CODE_NAMES)
    private List<String> productCodeNames = null;

    public static final String SERIALIZED_NAME_PRODUCT_CODES = "ProductCodes";

    @SerializedName(SERIALIZED_NAME_PRODUCT_CODES)
    private List<String> productCodes = null;

    public static final String SERIALIZED_NAME_ROOT_DEVICE_NAMES = "RootDeviceNames";

    @SerializedName(SERIALIZED_NAME_ROOT_DEVICE_NAMES)
    private List<String> rootDeviceNames = null;

    public static final String SERIALIZED_NAME_ROOT_DEVICE_TYPES = "RootDeviceTypes";

    @SerializedName(SERIALIZED_NAME_ROOT_DEVICE_TYPES)
    private List<String> rootDeviceTypes = null;

    public static final String SERIALIZED_NAME_STATES = "States";

    @SerializedName(SERIALIZED_NAME_STATES)
    private List<String> states = null;

    public static final String SERIALIZED_NAME_TAG_KEYS = "TagKeys";

    @SerializedName(SERIALIZED_NAME_TAG_KEYS)
    private List<String> tagKeys = null;

    public static final String SERIALIZED_NAME_TAG_VALUES = "TagValues";

    @SerializedName(SERIALIZED_NAME_TAG_VALUES)
    private List<String> tagValues = null;

    public static final String SERIALIZED_NAME_TAGS = "Tags";

    @SerializedName(SERIALIZED_NAME_TAGS)
    private List<String> tags = null;

    public static final String SERIALIZED_NAME_VIRTUALIZATION_TYPES = "VirtualizationTypes";

    @SerializedName(SERIALIZED_NAME_VIRTUALIZATION_TYPES)
    private List<String> virtualizationTypes = null;

    public FiltersImage() {}

    public FiltersImage accountAliases(List<String> accountAliases) {

        this.accountAliases = accountAliases;
        return this;
    }

    public FiltersImage addAccountAliasesItem(String accountAliasesItem) {
        if (this.accountAliases == null) {
            this.accountAliases = new ArrayList<>();
        }
        this.accountAliases.add(accountAliasesItem);
        return this;
    }

    /**
     * The account aliases of the owners of the OMIs.
     *
     * @return accountAliases
     */
    @javax.annotation.Nullable
    public List<String> getAccountAliases() {
        return accountAliases;
    }

    public void setAccountAliases(List<String> accountAliases) {
        this.accountAliases = accountAliases;
    }

    public FiltersImage accountIds(List<String> accountIds) {

        this.accountIds = accountIds;
        return this;
    }

    public FiltersImage addAccountIdsItem(String accountIdsItem) {
        if (this.accountIds == null) {
            this.accountIds = new ArrayList<>();
        }
        this.accountIds.add(accountIdsItem);
        return this;
    }

    /**
     * The account IDs of the owners of the OMIs. By default, all the OMIs for which you have launch
     * permissions are described.
     *
     * @return accountIds
     */
    @javax.annotation.Nullable
    public List<String> getAccountIds() {
        return accountIds;
    }

    public void setAccountIds(List<String> accountIds) {
        this.accountIds = accountIds;
    }

    public FiltersImage architectures(List<String> architectures) {

        this.architectures = architectures;
        return this;
    }

    public FiltersImage addArchitecturesItem(String architecturesItem) {
        if (this.architectures == null) {
            this.architectures = new ArrayList<>();
        }
        this.architectures.add(architecturesItem);
        return this;
    }

    /**
     * The architectures of the OMIs (&#x60;i386&#x60; \\| &#x60;x86_64&#x60;).
     *
     * @return architectures
     */
    @javax.annotation.Nullable
    public List<String> getArchitectures() {
        return architectures;
    }

    public void setArchitectures(List<String> architectures) {
        this.architectures = architectures;
    }

    public FiltersImage blockDeviceMappingDeleteOnVmDeletion(
            Boolean blockDeviceMappingDeleteOnVmDeletion) {

        this.blockDeviceMappingDeleteOnVmDeletion = blockDeviceMappingDeleteOnVmDeletion;
        return this;
    }

    /**
     * Whether the volumes are deleted or not when terminating the VM.
     *
     * @return blockDeviceMappingDeleteOnVmDeletion
     */
    @javax.annotation.Nullable
    public Boolean getBlockDeviceMappingDeleteOnVmDeletion() {
        return blockDeviceMappingDeleteOnVmDeletion;
    }

    public void setBlockDeviceMappingDeleteOnVmDeletion(
            Boolean blockDeviceMappingDeleteOnVmDeletion) {
        this.blockDeviceMappingDeleteOnVmDeletion = blockDeviceMappingDeleteOnVmDeletion;
    }

    public FiltersImage blockDeviceMappingDeviceNames(List<String> blockDeviceMappingDeviceNames) {

        this.blockDeviceMappingDeviceNames = blockDeviceMappingDeviceNames;
        return this;
    }

    public FiltersImage addBlockDeviceMappingDeviceNamesItem(
            String blockDeviceMappingDeviceNamesItem) {
        if (this.blockDeviceMappingDeviceNames == null) {
            this.blockDeviceMappingDeviceNames = new ArrayList<>();
        }
        this.blockDeviceMappingDeviceNames.add(blockDeviceMappingDeviceNamesItem);
        return this;
    }

    /**
     * The device names for the volumes.
     *
     * @return blockDeviceMappingDeviceNames
     */
    @javax.annotation.Nullable
    public List<String> getBlockDeviceMappingDeviceNames() {
        return blockDeviceMappingDeviceNames;
    }

    public void setBlockDeviceMappingDeviceNames(List<String> blockDeviceMappingDeviceNames) {
        this.blockDeviceMappingDeviceNames = blockDeviceMappingDeviceNames;
    }

    public FiltersImage blockDeviceMappingSnapshotIds(List<String> blockDeviceMappingSnapshotIds) {

        this.blockDeviceMappingSnapshotIds = blockDeviceMappingSnapshotIds;
        return this;
    }

    public FiltersImage addBlockDeviceMappingSnapshotIdsItem(
            String blockDeviceMappingSnapshotIdsItem) {
        if (this.blockDeviceMappingSnapshotIds == null) {
            this.blockDeviceMappingSnapshotIds = new ArrayList<>();
        }
        this.blockDeviceMappingSnapshotIds.add(blockDeviceMappingSnapshotIdsItem);
        return this;
    }

    /**
     * The IDs of the snapshots used to create the volumes.
     *
     * @return blockDeviceMappingSnapshotIds
     */
    @javax.annotation.Nullable
    public List<String> getBlockDeviceMappingSnapshotIds() {
        return blockDeviceMappingSnapshotIds;
    }

    public void setBlockDeviceMappingSnapshotIds(List<String> blockDeviceMappingSnapshotIds) {
        this.blockDeviceMappingSnapshotIds = blockDeviceMappingSnapshotIds;
    }

    public FiltersImage blockDeviceMappingVolumeSizes(List<Integer> blockDeviceMappingVolumeSizes) {

        this.blockDeviceMappingVolumeSizes = blockDeviceMappingVolumeSizes;
        return this;
    }

    public FiltersImage addBlockDeviceMappingVolumeSizesItem(
            Integer blockDeviceMappingVolumeSizesItem) {
        if (this.blockDeviceMappingVolumeSizes == null) {
            this.blockDeviceMappingVolumeSizes = new ArrayList<>();
        }
        this.blockDeviceMappingVolumeSizes.add(blockDeviceMappingVolumeSizesItem);
        return this;
    }

    /**
     * The sizes of the volumes, in gibibytes (GiB).
     *
     * @return blockDeviceMappingVolumeSizes
     */
    @javax.annotation.Nullable
    public List<Integer> getBlockDeviceMappingVolumeSizes() {
        return blockDeviceMappingVolumeSizes;
    }

    public void setBlockDeviceMappingVolumeSizes(List<Integer> blockDeviceMappingVolumeSizes) {
        this.blockDeviceMappingVolumeSizes = blockDeviceMappingVolumeSizes;
    }

    public FiltersImage blockDeviceMappingVolumeTypes(List<String> blockDeviceMappingVolumeTypes) {

        this.blockDeviceMappingVolumeTypes = blockDeviceMappingVolumeTypes;
        return this;
    }

    public FiltersImage addBlockDeviceMappingVolumeTypesItem(
            String blockDeviceMappingVolumeTypesItem) {
        if (this.blockDeviceMappingVolumeTypes == null) {
            this.blockDeviceMappingVolumeTypes = new ArrayList<>();
        }
        this.blockDeviceMappingVolumeTypes.add(blockDeviceMappingVolumeTypesItem);
        return this;
    }

    /**
     * The types of volumes (&#x60;standard&#x60; \\| &#x60;gp2&#x60; \\| &#x60;io1&#x60;).
     *
     * @return blockDeviceMappingVolumeTypes
     */
    @javax.annotation.Nullable
    public List<String> getBlockDeviceMappingVolumeTypes() {
        return blockDeviceMappingVolumeTypes;
    }

    public void setBlockDeviceMappingVolumeTypes(List<String> blockDeviceMappingVolumeTypes) {
        this.blockDeviceMappingVolumeTypes = blockDeviceMappingVolumeTypes;
    }

    public FiltersImage descriptions(List<String> descriptions) {

        this.descriptions = descriptions;
        return this;
    }

    public FiltersImage addDescriptionsItem(String descriptionsItem) {
        if (this.descriptions == null) {
            this.descriptions = new ArrayList<>();
        }
        this.descriptions.add(descriptionsItem);
        return this;
    }

    /**
     * The descriptions of the OMIs, provided when they were created.
     *
     * @return descriptions
     */
    @javax.annotation.Nullable
    public List<String> getDescriptions() {
        return descriptions;
    }

    public void setDescriptions(List<String> descriptions) {
        this.descriptions = descriptions;
    }

    public FiltersImage fileLocations(List<String> fileLocations) {

        this.fileLocations = fileLocations;
        return this;
    }

    public FiltersImage addFileLocationsItem(String fileLocationsItem) {
        if (this.fileLocations == null) {
            this.fileLocations = new ArrayList<>();
        }
        this.fileLocations.add(fileLocationsItem);
        return this;
    }

    /**
     * The locations of the buckets where the OMI files are stored.
     *
     * @return fileLocations
     */
    @javax.annotation.Nullable
    public List<String> getFileLocations() {
        return fileLocations;
    }

    public void setFileLocations(List<String> fileLocations) {
        this.fileLocations = fileLocations;
    }

    public FiltersImage hypervisors(List<String> hypervisors) {

        this.hypervisors = hypervisors;
        return this;
    }

    public FiltersImage addHypervisorsItem(String hypervisorsItem) {
        if (this.hypervisors == null) {
            this.hypervisors = new ArrayList<>();
        }
        this.hypervisors.add(hypervisorsItem);
        return this;
    }

    /**
     * The hypervisor type of the OMI (always &#x60;xen&#x60;).
     *
     * @return hypervisors
     */
    @javax.annotation.Nullable
    public List<String> getHypervisors() {
        return hypervisors;
    }

    public void setHypervisors(List<String> hypervisors) {
        this.hypervisors = hypervisors;
    }

    public FiltersImage imageIds(List<String> imageIds) {

        this.imageIds = imageIds;
        return this;
    }

    public FiltersImage addImageIdsItem(String imageIdsItem) {
        if (this.imageIds == null) {
            this.imageIds = new ArrayList<>();
        }
        this.imageIds.add(imageIdsItem);
        return this;
    }

    /**
     * The IDs of the OMIs.
     *
     * @return imageIds
     */
    @javax.annotation.Nullable
    public List<String> getImageIds() {
        return imageIds;
    }

    public void setImageIds(List<String> imageIds) {
        this.imageIds = imageIds;
    }

    public FiltersImage imageNames(List<String> imageNames) {

        this.imageNames = imageNames;
        return this;
    }

    public FiltersImage addImageNamesItem(String imageNamesItem) {
        if (this.imageNames == null) {
            this.imageNames = new ArrayList<>();
        }
        this.imageNames.add(imageNamesItem);
        return this;
    }

    /**
     * The names of the OMIs, provided when they were created.
     *
     * @return imageNames
     */
    @javax.annotation.Nullable
    public List<String> getImageNames() {
        return imageNames;
    }

    public void setImageNames(List<String> imageNames) {
        this.imageNames = imageNames;
    }

    public FiltersImage permissionsToLaunchAccountIds(List<String> permissionsToLaunchAccountIds) {

        this.permissionsToLaunchAccountIds = permissionsToLaunchAccountIds;
        return this;
    }

    public FiltersImage addPermissionsToLaunchAccountIdsItem(
            String permissionsToLaunchAccountIdsItem) {
        if (this.permissionsToLaunchAccountIds == null) {
            this.permissionsToLaunchAccountIds = new ArrayList<>();
        }
        this.permissionsToLaunchAccountIds.add(permissionsToLaunchAccountIdsItem);
        return this;
    }

    /**
     * The account IDs which have launch permissions for the OMIs.
     *
     * @return permissionsToLaunchAccountIds
     */
    @javax.annotation.Nullable
    public List<String> getPermissionsToLaunchAccountIds() {
        return permissionsToLaunchAccountIds;
    }

    public void setPermissionsToLaunchAccountIds(List<String> permissionsToLaunchAccountIds) {
        this.permissionsToLaunchAccountIds = permissionsToLaunchAccountIds;
    }

    public FiltersImage permissionsToLaunchGlobalPermission(
            Boolean permissionsToLaunchGlobalPermission) {

        this.permissionsToLaunchGlobalPermission = permissionsToLaunchGlobalPermission;
        return this;
    }

    /**
     * If true, lists all public OMIs. If false, lists all private OMIs.
     *
     * @return permissionsToLaunchGlobalPermission
     */
    @javax.annotation.Nullable
    public Boolean getPermissionsToLaunchGlobalPermission() {
        return permissionsToLaunchGlobalPermission;
    }

    public void setPermissionsToLaunchGlobalPermission(
            Boolean permissionsToLaunchGlobalPermission) {
        this.permissionsToLaunchGlobalPermission = permissionsToLaunchGlobalPermission;
    }

    public FiltersImage productCodeNames(List<String> productCodeNames) {

        this.productCodeNames = productCodeNames;
        return this;
    }

    public FiltersImage addProductCodeNamesItem(String productCodeNamesItem) {
        if (this.productCodeNames == null) {
            this.productCodeNames = new ArrayList<>();
        }
        this.productCodeNames.add(productCodeNamesItem);
        return this;
    }

    /**
     * The names of the product codes associated with the OMI.
     *
     * @return productCodeNames
     */
    @javax.annotation.Nullable
    public List<String> getProductCodeNames() {
        return productCodeNames;
    }

    public void setProductCodeNames(List<String> productCodeNames) {
        this.productCodeNames = productCodeNames;
    }

    public FiltersImage productCodes(List<String> productCodes) {

        this.productCodes = productCodes;
        return this;
    }

    public FiltersImage addProductCodesItem(String productCodesItem) {
        if (this.productCodes == null) {
            this.productCodes = new ArrayList<>();
        }
        this.productCodes.add(productCodesItem);
        return this;
    }

    /**
     * The product codes associated with the OMI.
     *
     * @return productCodes
     */
    @javax.annotation.Nullable
    public List<String> getProductCodes() {
        return productCodes;
    }

    public void setProductCodes(List<String> productCodes) {
        this.productCodes = productCodes;
    }

    public FiltersImage rootDeviceNames(List<String> rootDeviceNames) {

        this.rootDeviceNames = rootDeviceNames;
        return this;
    }

    public FiltersImage addRootDeviceNamesItem(String rootDeviceNamesItem) {
        if (this.rootDeviceNames == null) {
            this.rootDeviceNames = new ArrayList<>();
        }
        this.rootDeviceNames.add(rootDeviceNamesItem);
        return this;
    }

    /**
     * The name of the root device. This value must be /dev/sda1.
     *
     * @return rootDeviceNames
     */
    @javax.annotation.Nullable
    public List<String> getRootDeviceNames() {
        return rootDeviceNames;
    }

    public void setRootDeviceNames(List<String> rootDeviceNames) {
        this.rootDeviceNames = rootDeviceNames;
    }

    public FiltersImage rootDeviceTypes(List<String> rootDeviceTypes) {

        this.rootDeviceTypes = rootDeviceTypes;
        return this;
    }

    public FiltersImage addRootDeviceTypesItem(String rootDeviceTypesItem) {
        if (this.rootDeviceTypes == null) {
            this.rootDeviceTypes = new ArrayList<>();
        }
        this.rootDeviceTypes.add(rootDeviceTypesItem);
        return this;
    }

    /**
     * The types of root device used by the OMIs (&#x60;bsu&#x60; or &#x60;ebs&#x60;).
     *
     * @return rootDeviceTypes
     */
    @javax.annotation.Nullable
    public List<String> getRootDeviceTypes() {
        return rootDeviceTypes;
    }

    public void setRootDeviceTypes(List<String> rootDeviceTypes) {
        this.rootDeviceTypes = rootDeviceTypes;
    }

    public FiltersImage states(List<String> states) {

        this.states = states;
        return this;
    }

    public FiltersImage addStatesItem(String statesItem) {
        if (this.states == null) {
            this.states = new ArrayList<>();
        }
        this.states.add(statesItem);
        return this;
    }

    /**
     * The states of the OMIs (&#x60;pending&#x60; \\| &#x60;available&#x60; \\|
     * &#x60;failed&#x60;).
     *
     * @return states
     */
    @javax.annotation.Nullable
    public List<String> getStates() {
        return states;
    }

    public void setStates(List<String> states) {
        this.states = states;
    }

    public FiltersImage tagKeys(List<String> tagKeys) {

        this.tagKeys = tagKeys;
        return this;
    }

    public FiltersImage addTagKeysItem(String tagKeysItem) {
        if (this.tagKeys == null) {
            this.tagKeys = new ArrayList<>();
        }
        this.tagKeys.add(tagKeysItem);
        return this;
    }

    /**
     * The keys of the tags associated with the OMIs.
     *
     * @return tagKeys
     */
    @javax.annotation.Nullable
    public List<String> getTagKeys() {
        return tagKeys;
    }

    public void setTagKeys(List<String> tagKeys) {
        this.tagKeys = tagKeys;
    }

    public FiltersImage tagValues(List<String> tagValues) {

        this.tagValues = tagValues;
        return this;
    }

    public FiltersImage addTagValuesItem(String tagValuesItem) {
        if (this.tagValues == null) {
            this.tagValues = new ArrayList<>();
        }
        this.tagValues.add(tagValuesItem);
        return this;
    }

    /**
     * The values of the tags associated with the OMIs.
     *
     * @return tagValues
     */
    @javax.annotation.Nullable
    public List<String> getTagValues() {
        return tagValues;
    }

    public void setTagValues(List<String> tagValues) {
        this.tagValues = tagValues;
    }

    public FiltersImage tags(List<String> tags) {

        this.tags = tags;
        return this;
    }

    public FiltersImage addTagsItem(String tagsItem) {
        if (this.tags == null) {
            this.tags = new ArrayList<>();
        }
        this.tags.add(tagsItem);
        return this;
    }

    /**
     * The key/value combination of the tags associated with the OMIs, in the following format:
     * &amp;quot;Filters&amp;quot;:{&amp;quot;Tags&amp;quot;:[&amp;quot;TAGKEY&#x3D;TAGVALUE&amp;quot;]}.
     *
     * @return tags
     */
    @javax.annotation.Nullable
    public List<String> getTags() {
        return tags;
    }

    public void setTags(List<String> tags) {
        this.tags = tags;
    }

    public FiltersImage virtualizationTypes(List<String> virtualizationTypes) {

        this.virtualizationTypes = virtualizationTypes;
        return this;
    }

    public FiltersImage addVirtualizationTypesItem(String virtualizationTypesItem) {
        if (this.virtualizationTypes == null) {
            this.virtualizationTypes = new ArrayList<>();
        }
        this.virtualizationTypes.add(virtualizationTypesItem);
        return this;
    }

    /**
     * The virtualization types (always &#x60;hvm&#x60;).
     *
     * @return virtualizationTypes
     */
    @javax.annotation.Nullable
    public List<String> getVirtualizationTypes() {
        return virtualizationTypes;
    }

    public void setVirtualizationTypes(List<String> virtualizationTypes) {
        this.virtualizationTypes = virtualizationTypes;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FiltersImage filtersImage = (FiltersImage) o;
        return Objects.equals(this.accountAliases, filtersImage.accountAliases)
                && Objects.equals(this.accountIds, filtersImage.accountIds)
                && Objects.equals(this.architectures, filtersImage.architectures)
                && Objects.equals(
                        this.blockDeviceMappingDeleteOnVmDeletion,
                        filtersImage.blockDeviceMappingDeleteOnVmDeletion)
                && Objects.equals(
                        this.blockDeviceMappingDeviceNames,
                        filtersImage.blockDeviceMappingDeviceNames)
                && Objects.equals(
                        this.blockDeviceMappingSnapshotIds,
                        filtersImage.blockDeviceMappingSnapshotIds)
                && Objects.equals(
                        this.blockDeviceMappingVolumeSizes,
                        filtersImage.blockDeviceMappingVolumeSizes)
                && Objects.equals(
                        this.blockDeviceMappingVolumeTypes,
                        filtersImage.blockDeviceMappingVolumeTypes)
                && Objects.equals(this.descriptions, filtersImage.descriptions)
                && Objects.equals(this.fileLocations, filtersImage.fileLocations)
                && Objects.equals(this.hypervisors, filtersImage.hypervisors)
                && Objects.equals(this.imageIds, filtersImage.imageIds)
                && Objects.equals(this.imageNames, filtersImage.imageNames)
                && Objects.equals(
                        this.permissionsToLaunchAccountIds,
                        filtersImage.permissionsToLaunchAccountIds)
                && Objects.equals(
                        this.permissionsToLaunchGlobalPermission,
                        filtersImage.permissionsToLaunchGlobalPermission)
                && Objects.equals(this.productCodeNames, filtersImage.productCodeNames)
                && Objects.equals(this.productCodes, filtersImage.productCodes)
                && Objects.equals(this.rootDeviceNames, filtersImage.rootDeviceNames)
                && Objects.equals(this.rootDeviceTypes, filtersImage.rootDeviceTypes)
                && Objects.equals(this.states, filtersImage.states)
                && Objects.equals(this.tagKeys, filtersImage.tagKeys)
                && Objects.equals(this.tagValues, filtersImage.tagValues)
                && Objects.equals(this.tags, filtersImage.tags)
                && Objects.equals(this.virtualizationTypes, filtersImage.virtualizationTypes);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                accountAliases,
                accountIds,
                architectures,
                blockDeviceMappingDeleteOnVmDeletion,
                blockDeviceMappingDeviceNames,
                blockDeviceMappingSnapshotIds,
                blockDeviceMappingVolumeSizes,
                blockDeviceMappingVolumeTypes,
                descriptions,
                fileLocations,
                hypervisors,
                imageIds,
                imageNames,
                permissionsToLaunchAccountIds,
                permissionsToLaunchGlobalPermission,
                productCodeNames,
                productCodes,
                rootDeviceNames,
                rootDeviceTypes,
                states,
                tagKeys,
                tagValues,
                tags,
                virtualizationTypes);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class FiltersImage {\n");
        sb.append("    accountAliases: ").append(toIndentedString(accountAliases)).append("\n");
        sb.append("    accountIds: ").append(toIndentedString(accountIds)).append("\n");
        sb.append("    architectures: ").append(toIndentedString(architectures)).append("\n");
        sb.append("    blockDeviceMappingDeleteOnVmDeletion: ")
                .append(toIndentedString(blockDeviceMappingDeleteOnVmDeletion))
                .append("\n");
        sb.append("    blockDeviceMappingDeviceNames: ")
                .append(toIndentedString(blockDeviceMappingDeviceNames))
                .append("\n");
        sb.append("    blockDeviceMappingSnapshotIds: ")
                .append(toIndentedString(blockDeviceMappingSnapshotIds))
                .append("\n");
        sb.append("    blockDeviceMappingVolumeSizes: ")
                .append(toIndentedString(blockDeviceMappingVolumeSizes))
                .append("\n");
        sb.append("    blockDeviceMappingVolumeTypes: ")
                .append(toIndentedString(blockDeviceMappingVolumeTypes))
                .append("\n");
        sb.append("    descriptions: ").append(toIndentedString(descriptions)).append("\n");
        sb.append("    fileLocations: ").append(toIndentedString(fileLocations)).append("\n");
        sb.append("    hypervisors: ").append(toIndentedString(hypervisors)).append("\n");
        sb.append("    imageIds: ").append(toIndentedString(imageIds)).append("\n");
        sb.append("    imageNames: ").append(toIndentedString(imageNames)).append("\n");
        sb.append("    permissionsToLaunchAccountIds: ")
                .append(toIndentedString(permissionsToLaunchAccountIds))
                .append("\n");
        sb.append("    permissionsToLaunchGlobalPermission: ")
                .append(toIndentedString(permissionsToLaunchGlobalPermission))
                .append("\n");
        sb.append("    productCodeNames: ").append(toIndentedString(productCodeNames)).append("\n");
        sb.append("    productCodes: ").append(toIndentedString(productCodes)).append("\n");
        sb.append("    rootDeviceNames: ").append(toIndentedString(rootDeviceNames)).append("\n");
        sb.append("    rootDeviceTypes: ").append(toIndentedString(rootDeviceTypes)).append("\n");
        sb.append("    states: ").append(toIndentedString(states)).append("\n");
        sb.append("    tagKeys: ").append(toIndentedString(tagKeys)).append("\n");
        sb.append("    tagValues: ").append(toIndentedString(tagValues)).append("\n");
        sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
        sb.append("    virtualizationTypes: ")
                .append(toIndentedString(virtualizationTypes))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("AccountAliases");
        openapiFields.add("AccountIds");
        openapiFields.add("Architectures");
        openapiFields.add("BlockDeviceMappingDeleteOnVmDeletion");
        openapiFields.add("BlockDeviceMappingDeviceNames");
        openapiFields.add("BlockDeviceMappingSnapshotIds");
        openapiFields.add("BlockDeviceMappingVolumeSizes");
        openapiFields.add("BlockDeviceMappingVolumeTypes");
        openapiFields.add("Descriptions");
        openapiFields.add("FileLocations");
        openapiFields.add("Hypervisors");
        openapiFields.add("ImageIds");
        openapiFields.add("ImageNames");
        openapiFields.add("PermissionsToLaunchAccountIds");
        openapiFields.add("PermissionsToLaunchGlobalPermission");
        openapiFields.add("ProductCodeNames");
        openapiFields.add("ProductCodes");
        openapiFields.add("RootDeviceNames");
        openapiFields.add("RootDeviceTypes");
        openapiFields.add("States");
        openapiFields.add("TagKeys");
        openapiFields.add("TagValues");
        openapiFields.add("Tags");
        openapiFields.add("VirtualizationTypes");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to FiltersImage
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!FiltersImage.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in FiltersImage is not found in the"
                                        + " empty JSON string",
                                FiltersImage.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!FiltersImage.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `FiltersImage` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("AccountAliases") != null && !jsonObj.get("AccountAliases").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `AccountAliases` to be an array in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("AccountAliases").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("AccountIds") != null && !jsonObj.get("AccountIds").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `AccountIds` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("AccountIds").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("Architectures") != null && !jsonObj.get("Architectures").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `Architectures` to be an array in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("Architectures").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("BlockDeviceMappingDeviceNames") != null
                && !jsonObj.get("BlockDeviceMappingDeviceNames").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `BlockDeviceMappingDeviceNames` to be an array in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("BlockDeviceMappingDeviceNames").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("BlockDeviceMappingSnapshotIds") != null
                && !jsonObj.get("BlockDeviceMappingSnapshotIds").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `BlockDeviceMappingSnapshotIds` to be an array in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("BlockDeviceMappingSnapshotIds").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("BlockDeviceMappingVolumeSizes") != null
                && !jsonObj.get("BlockDeviceMappingVolumeSizes").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `BlockDeviceMappingVolumeSizes` to be an array in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("BlockDeviceMappingVolumeSizes").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("BlockDeviceMappingVolumeTypes") != null
                && !jsonObj.get("BlockDeviceMappingVolumeTypes").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `BlockDeviceMappingVolumeTypes` to be an array in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("BlockDeviceMappingVolumeTypes").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("Descriptions") != null && !jsonObj.get("Descriptions").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `Descriptions` to be an array in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("Descriptions").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("FileLocations") != null && !jsonObj.get("FileLocations").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `FileLocations` to be an array in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("FileLocations").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("Hypervisors") != null && !jsonObj.get("Hypervisors").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `Hypervisors` to be an array in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("Hypervisors").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("ImageIds") != null && !jsonObj.get("ImageIds").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `ImageIds` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("ImageIds").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("ImageNames") != null && !jsonObj.get("ImageNames").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `ImageNames` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("ImageNames").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("PermissionsToLaunchAccountIds") != null
                && !jsonObj.get("PermissionsToLaunchAccountIds").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `PermissionsToLaunchAccountIds` to be an array in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("PermissionsToLaunchAccountIds").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("ProductCodeNames") != null
                && !jsonObj.get("ProductCodeNames").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `ProductCodeNames` to be an array in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("ProductCodeNames").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("ProductCodes") != null && !jsonObj.get("ProductCodes").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `ProductCodes` to be an array in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("ProductCodes").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("RootDeviceNames") != null
                && !jsonObj.get("RootDeviceNames").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `RootDeviceNames` to be an array in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("RootDeviceNames").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("RootDeviceTypes") != null
                && !jsonObj.get("RootDeviceTypes").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `RootDeviceTypes` to be an array in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("RootDeviceTypes").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("States") != null && !jsonObj.get("States").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `States` to be an array in the JSON string but got"
                                    + " `%s`",
                            jsonObj.get("States").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("TagKeys") != null && !jsonObj.get("TagKeys").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `TagKeys` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("TagKeys").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("TagValues") != null && !jsonObj.get("TagValues").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `TagValues` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("TagValues").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `Tags` to be an array in the JSON string but got"
                                    + " `%s`",
                            jsonObj.get("Tags").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("VirtualizationTypes") != null
                && !jsonObj.get("VirtualizationTypes").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `VirtualizationTypes` to be an array in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("VirtualizationTypes").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!FiltersImage.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'FiltersImage' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<FiltersImage> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(FiltersImage.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<FiltersImage>() {
                        @Override
                        public void write(JsonWriter out, FiltersImage value) throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public FiltersImage read(JsonReader in) throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of FiltersImage given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of FiltersImage
     * @throws IOException if the JSON string is invalid with respect to FiltersImage
     */
    public static FiltersImage fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, FiltersImage.class);
    }

    /**
     * Convert an instance of FiltersImage to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
