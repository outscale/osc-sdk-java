/*
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> Throttling: To protect against overloads, the number of identical requests allowed in a given time period is limited.<br /> Brute force: To protect against brute force attacks, the number of failed authentication attempts in a given time period is limited.<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).<br /> # Authentication Schemes ### Access Key/Secret Key The main way to authenticate your requests to the OUTSCALE API is to use an access key and a secret key.<br /> The mechanism behind this is based on AWS Signature Version 4, whose technical implementation details are described in [Signature of API Requests](https://docs.outscale.com/en/userguide/Signature-of-API-Requests.html).<br /><br /> In practice, the way to specify your access key and secret key depends on the tool or SDK you want to use to interact with the API.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify your access key, secret key, and the Region of your account. > 2. You then specify the `--profile` option when executing OSC CLI commands. >  > For more information, see [Installing and Configuring OSC CLI](https://docs.outscale.com/en/userguide/Installing-and-Configuring-OSC-CLI.html).  See the code samples in each section of this documentation for specific examples in different programming languages.<br /> For more information about access keys, see [About Access Keys](https://docs.outscale.com/en/userguide/About-Access-Keys.html).  > If you try to sign requests with an invalid access key four times in a row, further authentication attempts will be prevented for 1 minute. This lockout time increases 1 minute every four failed attempts, for up to 10 minutes.  ### Login/Password For certain API actions, you can also use basic authentication with the login (email address) and password of your TINA account.<br /> This is useful only in special circumstances, for example if you do not know your access key/secret key and want to retrieve them programmatically.<br /> In most cases, however, you can use the Cockpit web interface to retrieve them.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify the Region of your account, but you leave the access key value and secret key value empty (`&quot;&quot;`). > 2. You then specify the `--profile`, `--authentication-method`, `--login`, and `--password` options when executing OSC CLI commands.  See the code samples in each section of this documentation for specific examples in different programming languages.  > If you try to sign requests with an invalid password four times in a row, further authentication attempts will be prevented for 1 minute. This lockout time increases 1 minute every four failed attempts, for up to 10 minutes.  ### No Authentication A few API actions do not require any authentication. They are indicated as such in this documentation.<br /> ### Other Security Mechanisms In parallel with the authentication schemes, you can add other security mechanisms to your OUTSCALE account, for example to restrict API requests by IP or other criteria.<br /> For more information, see [Managing Your API Accesses](https://docs.outscale.com/en/userguide/Managing-Your-API-Accesses.html).<br /> # Error Codes Reference You can learn more about errors returned by the API in the dedicated [errors page](api-errors.html).
 *
 * The version of the OpenAPI document: 1.29.3
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.github.outscale.osc_sdk_java.client.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.outscale.osc_sdk_java.client.JSON;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/** One or more filters. */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FiltersNic {
    public static final String SERIALIZED_NAME_DESCRIPTIONS = "Descriptions";

    @SerializedName(SERIALIZED_NAME_DESCRIPTIONS)
    private List<String> descriptions = null;

    public static final String SERIALIZED_NAME_IS_SOURCE_DEST_CHECK = "IsSourceDestCheck";

    @SerializedName(SERIALIZED_NAME_IS_SOURCE_DEST_CHECK)
    private Boolean isSourceDestCheck;

    public static final String SERIALIZED_NAME_LINK_NIC_DELETE_ON_VM_DELETION =
            "LinkNicDeleteOnVmDeletion";

    @SerializedName(SERIALIZED_NAME_LINK_NIC_DELETE_ON_VM_DELETION)
    private Boolean linkNicDeleteOnVmDeletion;

    public static final String SERIALIZED_NAME_LINK_NIC_DEVICE_NUMBERS = "LinkNicDeviceNumbers";

    @SerializedName(SERIALIZED_NAME_LINK_NIC_DEVICE_NUMBERS)
    private List<Integer> linkNicDeviceNumbers = null;

    public static final String SERIALIZED_NAME_LINK_NIC_LINK_NIC_IDS = "LinkNicLinkNicIds";

    @SerializedName(SERIALIZED_NAME_LINK_NIC_LINK_NIC_IDS)
    private List<String> linkNicLinkNicIds = null;

    public static final String SERIALIZED_NAME_LINK_NIC_STATES = "LinkNicStates";

    @SerializedName(SERIALIZED_NAME_LINK_NIC_STATES)
    private List<String> linkNicStates = null;

    public static final String SERIALIZED_NAME_LINK_NIC_VM_ACCOUNT_IDS = "LinkNicVmAccountIds";

    @SerializedName(SERIALIZED_NAME_LINK_NIC_VM_ACCOUNT_IDS)
    private List<String> linkNicVmAccountIds = null;

    public static final String SERIALIZED_NAME_LINK_NIC_VM_IDS = "LinkNicVmIds";

    @SerializedName(SERIALIZED_NAME_LINK_NIC_VM_IDS)
    private List<String> linkNicVmIds = null;

    public static final String SERIALIZED_NAME_LINK_PUBLIC_IP_ACCOUNT_IDS =
            "LinkPublicIpAccountIds";

    @SerializedName(SERIALIZED_NAME_LINK_PUBLIC_IP_ACCOUNT_IDS)
    private List<String> linkPublicIpAccountIds = null;

    public static final String SERIALIZED_NAME_LINK_PUBLIC_IP_LINK_PUBLIC_IP_IDS =
            "LinkPublicIpLinkPublicIpIds";

    @SerializedName(SERIALIZED_NAME_LINK_PUBLIC_IP_LINK_PUBLIC_IP_IDS)
    private List<String> linkPublicIpLinkPublicIpIds = null;

    public static final String SERIALIZED_NAME_LINK_PUBLIC_IP_PUBLIC_DNS_NAMES =
            "LinkPublicIpPublicDnsNames";

    @SerializedName(SERIALIZED_NAME_LINK_PUBLIC_IP_PUBLIC_DNS_NAMES)
    private List<String> linkPublicIpPublicDnsNames = null;

    public static final String SERIALIZED_NAME_LINK_PUBLIC_IP_PUBLIC_IP_IDS =
            "LinkPublicIpPublicIpIds";

    @SerializedName(SERIALIZED_NAME_LINK_PUBLIC_IP_PUBLIC_IP_IDS)
    private List<String> linkPublicIpPublicIpIds = null;

    public static final String SERIALIZED_NAME_LINK_PUBLIC_IP_PUBLIC_IPS = "LinkPublicIpPublicIps";

    @SerializedName(SERIALIZED_NAME_LINK_PUBLIC_IP_PUBLIC_IPS)
    private List<String> linkPublicIpPublicIps = null;

    public static final String SERIALIZED_NAME_MAC_ADDRESSES = "MacAddresses";

    @SerializedName(SERIALIZED_NAME_MAC_ADDRESSES)
    private List<String> macAddresses = null;

    public static final String SERIALIZED_NAME_NET_IDS = "NetIds";

    @SerializedName(SERIALIZED_NAME_NET_IDS)
    private List<String> netIds = null;

    public static final String SERIALIZED_NAME_NIC_IDS = "NicIds";

    @SerializedName(SERIALIZED_NAME_NIC_IDS)
    private List<String> nicIds = null;

    public static final String SERIALIZED_NAME_PRIVATE_DNS_NAMES = "PrivateDnsNames";

    @SerializedName(SERIALIZED_NAME_PRIVATE_DNS_NAMES)
    private List<String> privateDnsNames = null;

    public static final String SERIALIZED_NAME_PRIVATE_IPS_LINK_PUBLIC_IP_ACCOUNT_IDS =
            "PrivateIpsLinkPublicIpAccountIds";

    @SerializedName(SERIALIZED_NAME_PRIVATE_IPS_LINK_PUBLIC_IP_ACCOUNT_IDS)
    private List<String> privateIpsLinkPublicIpAccountIds = null;

    public static final String SERIALIZED_NAME_PRIVATE_IPS_LINK_PUBLIC_IP_PUBLIC_IPS =
            "PrivateIpsLinkPublicIpPublicIps";

    @SerializedName(SERIALIZED_NAME_PRIVATE_IPS_LINK_PUBLIC_IP_PUBLIC_IPS)
    private List<String> privateIpsLinkPublicIpPublicIps = null;

    public static final String SERIALIZED_NAME_PRIVATE_IPS_PRIMARY_IP = "PrivateIpsPrimaryIp";

    @SerializedName(SERIALIZED_NAME_PRIVATE_IPS_PRIMARY_IP)
    private Boolean privateIpsPrimaryIp;

    public static final String SERIALIZED_NAME_PRIVATE_IPS_PRIVATE_IPS = "PrivateIpsPrivateIps";

    @SerializedName(SERIALIZED_NAME_PRIVATE_IPS_PRIVATE_IPS)
    private List<String> privateIpsPrivateIps = null;

    public static final String SERIALIZED_NAME_SECURITY_GROUP_IDS = "SecurityGroupIds";

    @SerializedName(SERIALIZED_NAME_SECURITY_GROUP_IDS)
    private List<String> securityGroupIds = null;

    public static final String SERIALIZED_NAME_SECURITY_GROUP_NAMES = "SecurityGroupNames";

    @SerializedName(SERIALIZED_NAME_SECURITY_GROUP_NAMES)
    private List<String> securityGroupNames = null;

    public static final String SERIALIZED_NAME_STATES = "States";

    @SerializedName(SERIALIZED_NAME_STATES)
    private List<String> states = null;

    public static final String SERIALIZED_NAME_SUBNET_IDS = "SubnetIds";

    @SerializedName(SERIALIZED_NAME_SUBNET_IDS)
    private List<String> subnetIds = null;

    public static final String SERIALIZED_NAME_SUBREGION_NAMES = "SubregionNames";

    @SerializedName(SERIALIZED_NAME_SUBREGION_NAMES)
    private List<String> subregionNames = null;

    public static final String SERIALIZED_NAME_TAG_KEYS = "TagKeys";

    @SerializedName(SERIALIZED_NAME_TAG_KEYS)
    private List<String> tagKeys = null;

    public static final String SERIALIZED_NAME_TAG_VALUES = "TagValues";

    @SerializedName(SERIALIZED_NAME_TAG_VALUES)
    private List<String> tagValues = null;

    public static final String SERIALIZED_NAME_TAGS = "Tags";

    @SerializedName(SERIALIZED_NAME_TAGS)
    private List<String> tags = null;

    public FiltersNic() {}

    public FiltersNic descriptions(List<String> descriptions) {

        this.descriptions = descriptions;
        return this;
    }

    public FiltersNic addDescriptionsItem(String descriptionsItem) {
        if (this.descriptions == null) {
            this.descriptions = new ArrayList<>();
        }
        this.descriptions.add(descriptionsItem);
        return this;
    }

    /**
     * The descriptions of the NICs.
     *
     * @return descriptions
     */
    @javax.annotation.Nullable
    public List<String> getDescriptions() {
        return descriptions;
    }

    public void setDescriptions(List<String> descriptions) {
        this.descriptions = descriptions;
    }

    public FiltersNic isSourceDestCheck(Boolean isSourceDestCheck) {

        this.isSourceDestCheck = isSourceDestCheck;
        return this;
    }

    /**
     * Whether the source/destination checking is enabled (true) or disabled (false).
     *
     * @return isSourceDestCheck
     */
    @javax.annotation.Nullable
    public Boolean getIsSourceDestCheck() {
        return isSourceDestCheck;
    }

    public void setIsSourceDestCheck(Boolean isSourceDestCheck) {
        this.isSourceDestCheck = isSourceDestCheck;
    }

    public FiltersNic linkNicDeleteOnVmDeletion(Boolean linkNicDeleteOnVmDeletion) {

        this.linkNicDeleteOnVmDeletion = linkNicDeleteOnVmDeletion;
        return this;
    }

    /**
     * Whether the NICs are deleted when the VMs they are attached to are terminated.
     *
     * @return linkNicDeleteOnVmDeletion
     */
    @javax.annotation.Nullable
    public Boolean getLinkNicDeleteOnVmDeletion() {
        return linkNicDeleteOnVmDeletion;
    }

    public void setLinkNicDeleteOnVmDeletion(Boolean linkNicDeleteOnVmDeletion) {
        this.linkNicDeleteOnVmDeletion = linkNicDeleteOnVmDeletion;
    }

    public FiltersNic linkNicDeviceNumbers(List<Integer> linkNicDeviceNumbers) {

        this.linkNicDeviceNumbers = linkNicDeviceNumbers;
        return this;
    }

    public FiltersNic addLinkNicDeviceNumbersItem(Integer linkNicDeviceNumbersItem) {
        if (this.linkNicDeviceNumbers == null) {
            this.linkNicDeviceNumbers = new ArrayList<>();
        }
        this.linkNicDeviceNumbers.add(linkNicDeviceNumbersItem);
        return this;
    }

    /**
     * The device numbers the NICs are attached to.
     *
     * @return linkNicDeviceNumbers
     */
    @javax.annotation.Nullable
    public List<Integer> getLinkNicDeviceNumbers() {
        return linkNicDeviceNumbers;
    }

    public void setLinkNicDeviceNumbers(List<Integer> linkNicDeviceNumbers) {
        this.linkNicDeviceNumbers = linkNicDeviceNumbers;
    }

    public FiltersNic linkNicLinkNicIds(List<String> linkNicLinkNicIds) {

        this.linkNicLinkNicIds = linkNicLinkNicIds;
        return this;
    }

    public FiltersNic addLinkNicLinkNicIdsItem(String linkNicLinkNicIdsItem) {
        if (this.linkNicLinkNicIds == null) {
            this.linkNicLinkNicIds = new ArrayList<>();
        }
        this.linkNicLinkNicIds.add(linkNicLinkNicIdsItem);
        return this;
    }

    /**
     * The attachment IDs of the NICs.
     *
     * @return linkNicLinkNicIds
     */
    @javax.annotation.Nullable
    public List<String> getLinkNicLinkNicIds() {
        return linkNicLinkNicIds;
    }

    public void setLinkNicLinkNicIds(List<String> linkNicLinkNicIds) {
        this.linkNicLinkNicIds = linkNicLinkNicIds;
    }

    public FiltersNic linkNicStates(List<String> linkNicStates) {

        this.linkNicStates = linkNicStates;
        return this;
    }

    public FiltersNic addLinkNicStatesItem(String linkNicStatesItem) {
        if (this.linkNicStates == null) {
            this.linkNicStates = new ArrayList<>();
        }
        this.linkNicStates.add(linkNicStatesItem);
        return this;
    }

    /**
     * The states of the attachments.
     *
     * @return linkNicStates
     */
    @javax.annotation.Nullable
    public List<String> getLinkNicStates() {
        return linkNicStates;
    }

    public void setLinkNicStates(List<String> linkNicStates) {
        this.linkNicStates = linkNicStates;
    }

    public FiltersNic linkNicVmAccountIds(List<String> linkNicVmAccountIds) {

        this.linkNicVmAccountIds = linkNicVmAccountIds;
        return this;
    }

    public FiltersNic addLinkNicVmAccountIdsItem(String linkNicVmAccountIdsItem) {
        if (this.linkNicVmAccountIds == null) {
            this.linkNicVmAccountIds = new ArrayList<>();
        }
        this.linkNicVmAccountIds.add(linkNicVmAccountIdsItem);
        return this;
    }

    /**
     * The account IDs of the owners of the VMs the NICs are attached to.
     *
     * @return linkNicVmAccountIds
     */
    @javax.annotation.Nullable
    public List<String> getLinkNicVmAccountIds() {
        return linkNicVmAccountIds;
    }

    public void setLinkNicVmAccountIds(List<String> linkNicVmAccountIds) {
        this.linkNicVmAccountIds = linkNicVmAccountIds;
    }

    public FiltersNic linkNicVmIds(List<String> linkNicVmIds) {

        this.linkNicVmIds = linkNicVmIds;
        return this;
    }

    public FiltersNic addLinkNicVmIdsItem(String linkNicVmIdsItem) {
        if (this.linkNicVmIds == null) {
            this.linkNicVmIds = new ArrayList<>();
        }
        this.linkNicVmIds.add(linkNicVmIdsItem);
        return this;
    }

    /**
     * The IDs of the VMs the NICs are attached to.
     *
     * @return linkNicVmIds
     */
    @javax.annotation.Nullable
    public List<String> getLinkNicVmIds() {
        return linkNicVmIds;
    }

    public void setLinkNicVmIds(List<String> linkNicVmIds) {
        this.linkNicVmIds = linkNicVmIds;
    }

    public FiltersNic linkPublicIpAccountIds(List<String> linkPublicIpAccountIds) {

        this.linkPublicIpAccountIds = linkPublicIpAccountIds;
        return this;
    }

    public FiltersNic addLinkPublicIpAccountIdsItem(String linkPublicIpAccountIdsItem) {
        if (this.linkPublicIpAccountIds == null) {
            this.linkPublicIpAccountIds = new ArrayList<>();
        }
        this.linkPublicIpAccountIds.add(linkPublicIpAccountIdsItem);
        return this;
    }

    /**
     * The account IDs of the owners of the public IPs associated with the NICs.
     *
     * @return linkPublicIpAccountIds
     */
    @javax.annotation.Nullable
    public List<String> getLinkPublicIpAccountIds() {
        return linkPublicIpAccountIds;
    }

    public void setLinkPublicIpAccountIds(List<String> linkPublicIpAccountIds) {
        this.linkPublicIpAccountIds = linkPublicIpAccountIds;
    }

    public FiltersNic linkPublicIpLinkPublicIpIds(List<String> linkPublicIpLinkPublicIpIds) {

        this.linkPublicIpLinkPublicIpIds = linkPublicIpLinkPublicIpIds;
        return this;
    }

    public FiltersNic addLinkPublicIpLinkPublicIpIdsItem(String linkPublicIpLinkPublicIpIdsItem) {
        if (this.linkPublicIpLinkPublicIpIds == null) {
            this.linkPublicIpLinkPublicIpIds = new ArrayList<>();
        }
        this.linkPublicIpLinkPublicIpIds.add(linkPublicIpLinkPublicIpIdsItem);
        return this;
    }

    /**
     * The association IDs returned when the public IPs were associated with the NICs.
     *
     * @return linkPublicIpLinkPublicIpIds
     */
    @javax.annotation.Nullable
    public List<String> getLinkPublicIpLinkPublicIpIds() {
        return linkPublicIpLinkPublicIpIds;
    }

    public void setLinkPublicIpLinkPublicIpIds(List<String> linkPublicIpLinkPublicIpIds) {
        this.linkPublicIpLinkPublicIpIds = linkPublicIpLinkPublicIpIds;
    }

    public FiltersNic linkPublicIpPublicDnsNames(List<String> linkPublicIpPublicDnsNames) {

        this.linkPublicIpPublicDnsNames = linkPublicIpPublicDnsNames;
        return this;
    }

    public FiltersNic addLinkPublicIpPublicDnsNamesItem(String linkPublicIpPublicDnsNamesItem) {
        if (this.linkPublicIpPublicDnsNames == null) {
            this.linkPublicIpPublicDnsNames = new ArrayList<>();
        }
        this.linkPublicIpPublicDnsNames.add(linkPublicIpPublicDnsNamesItem);
        return this;
    }

    /**
     * The public DNS names associated with the public IPs.
     *
     * @return linkPublicIpPublicDnsNames
     */
    @javax.annotation.Nullable
    public List<String> getLinkPublicIpPublicDnsNames() {
        return linkPublicIpPublicDnsNames;
    }

    public void setLinkPublicIpPublicDnsNames(List<String> linkPublicIpPublicDnsNames) {
        this.linkPublicIpPublicDnsNames = linkPublicIpPublicDnsNames;
    }

    public FiltersNic linkPublicIpPublicIpIds(List<String> linkPublicIpPublicIpIds) {

        this.linkPublicIpPublicIpIds = linkPublicIpPublicIpIds;
        return this;
    }

    public FiltersNic addLinkPublicIpPublicIpIdsItem(String linkPublicIpPublicIpIdsItem) {
        if (this.linkPublicIpPublicIpIds == null) {
            this.linkPublicIpPublicIpIds = new ArrayList<>();
        }
        this.linkPublicIpPublicIpIds.add(linkPublicIpPublicIpIdsItem);
        return this;
    }

    /**
     * The allocation IDs returned when the public IPs were allocated to their accounts.
     *
     * @return linkPublicIpPublicIpIds
     */
    @javax.annotation.Nullable
    public List<String> getLinkPublicIpPublicIpIds() {
        return linkPublicIpPublicIpIds;
    }

    public void setLinkPublicIpPublicIpIds(List<String> linkPublicIpPublicIpIds) {
        this.linkPublicIpPublicIpIds = linkPublicIpPublicIpIds;
    }

    public FiltersNic linkPublicIpPublicIps(List<String> linkPublicIpPublicIps) {

        this.linkPublicIpPublicIps = linkPublicIpPublicIps;
        return this;
    }

    public FiltersNic addLinkPublicIpPublicIpsItem(String linkPublicIpPublicIpsItem) {
        if (this.linkPublicIpPublicIps == null) {
            this.linkPublicIpPublicIps = new ArrayList<>();
        }
        this.linkPublicIpPublicIps.add(linkPublicIpPublicIpsItem);
        return this;
    }

    /**
     * The public IPs associated with the NICs.
     *
     * @return linkPublicIpPublicIps
     */
    @javax.annotation.Nullable
    public List<String> getLinkPublicIpPublicIps() {
        return linkPublicIpPublicIps;
    }

    public void setLinkPublicIpPublicIps(List<String> linkPublicIpPublicIps) {
        this.linkPublicIpPublicIps = linkPublicIpPublicIps;
    }

    public FiltersNic macAddresses(List<String> macAddresses) {

        this.macAddresses = macAddresses;
        return this;
    }

    public FiltersNic addMacAddressesItem(String macAddressesItem) {
        if (this.macAddresses == null) {
            this.macAddresses = new ArrayList<>();
        }
        this.macAddresses.add(macAddressesItem);
        return this;
    }

    /**
     * The Media Access Control (MAC) addresses of the NICs.
     *
     * @return macAddresses
     */
    @javax.annotation.Nullable
    public List<String> getMacAddresses() {
        return macAddresses;
    }

    public void setMacAddresses(List<String> macAddresses) {
        this.macAddresses = macAddresses;
    }

    public FiltersNic netIds(List<String> netIds) {

        this.netIds = netIds;
        return this;
    }

    public FiltersNic addNetIdsItem(String netIdsItem) {
        if (this.netIds == null) {
            this.netIds = new ArrayList<>();
        }
        this.netIds.add(netIdsItem);
        return this;
    }

    /**
     * The IDs of the Nets where the NICs are located.
     *
     * @return netIds
     */
    @javax.annotation.Nullable
    public List<String> getNetIds() {
        return netIds;
    }

    public void setNetIds(List<String> netIds) {
        this.netIds = netIds;
    }

    public FiltersNic nicIds(List<String> nicIds) {

        this.nicIds = nicIds;
        return this;
    }

    public FiltersNic addNicIdsItem(String nicIdsItem) {
        if (this.nicIds == null) {
            this.nicIds = new ArrayList<>();
        }
        this.nicIds.add(nicIdsItem);
        return this;
    }

    /**
     * The IDs of the NICs.
     *
     * @return nicIds
     */
    @javax.annotation.Nullable
    public List<String> getNicIds() {
        return nicIds;
    }

    public void setNicIds(List<String> nicIds) {
        this.nicIds = nicIds;
    }

    public FiltersNic privateDnsNames(List<String> privateDnsNames) {

        this.privateDnsNames = privateDnsNames;
        return this;
    }

    public FiltersNic addPrivateDnsNamesItem(String privateDnsNamesItem) {
        if (this.privateDnsNames == null) {
            this.privateDnsNames = new ArrayList<>();
        }
        this.privateDnsNames.add(privateDnsNamesItem);
        return this;
    }

    /**
     * The private DNS names associated with the primary private IPs.
     *
     * @return privateDnsNames
     */
    @javax.annotation.Nullable
    public List<String> getPrivateDnsNames() {
        return privateDnsNames;
    }

    public void setPrivateDnsNames(List<String> privateDnsNames) {
        this.privateDnsNames = privateDnsNames;
    }

    public FiltersNic privateIpsLinkPublicIpAccountIds(
            List<String> privateIpsLinkPublicIpAccountIds) {

        this.privateIpsLinkPublicIpAccountIds = privateIpsLinkPublicIpAccountIds;
        return this;
    }

    public FiltersNic addPrivateIpsLinkPublicIpAccountIdsItem(
            String privateIpsLinkPublicIpAccountIdsItem) {
        if (this.privateIpsLinkPublicIpAccountIds == null) {
            this.privateIpsLinkPublicIpAccountIds = new ArrayList<>();
        }
        this.privateIpsLinkPublicIpAccountIds.add(privateIpsLinkPublicIpAccountIdsItem);
        return this;
    }

    /**
     * The account IDs of the owner of the public IPs associated with the private IPs.
     *
     * @return privateIpsLinkPublicIpAccountIds
     */
    @javax.annotation.Nullable
    public List<String> getPrivateIpsLinkPublicIpAccountIds() {
        return privateIpsLinkPublicIpAccountIds;
    }

    public void setPrivateIpsLinkPublicIpAccountIds(List<String> privateIpsLinkPublicIpAccountIds) {
        this.privateIpsLinkPublicIpAccountIds = privateIpsLinkPublicIpAccountIds;
    }

    public FiltersNic privateIpsLinkPublicIpPublicIps(
            List<String> privateIpsLinkPublicIpPublicIps) {

        this.privateIpsLinkPublicIpPublicIps = privateIpsLinkPublicIpPublicIps;
        return this;
    }

    public FiltersNic addPrivateIpsLinkPublicIpPublicIpsItem(
            String privateIpsLinkPublicIpPublicIpsItem) {
        if (this.privateIpsLinkPublicIpPublicIps == null) {
            this.privateIpsLinkPublicIpPublicIps = new ArrayList<>();
        }
        this.privateIpsLinkPublicIpPublicIps.add(privateIpsLinkPublicIpPublicIpsItem);
        return this;
    }

    /**
     * The public IPs associated with the private IPs.
     *
     * @return privateIpsLinkPublicIpPublicIps
     */
    @javax.annotation.Nullable
    public List<String> getPrivateIpsLinkPublicIpPublicIps() {
        return privateIpsLinkPublicIpPublicIps;
    }

    public void setPrivateIpsLinkPublicIpPublicIps(List<String> privateIpsLinkPublicIpPublicIps) {
        this.privateIpsLinkPublicIpPublicIps = privateIpsLinkPublicIpPublicIps;
    }

    public FiltersNic privateIpsPrimaryIp(Boolean privateIpsPrimaryIp) {

        this.privateIpsPrimaryIp = privateIpsPrimaryIp;
        return this;
    }

    /**
     * Whether the private IP is the primary IP associated with the NIC.
     *
     * @return privateIpsPrimaryIp
     */
    @javax.annotation.Nullable
    public Boolean getPrivateIpsPrimaryIp() {
        return privateIpsPrimaryIp;
    }

    public void setPrivateIpsPrimaryIp(Boolean privateIpsPrimaryIp) {
        this.privateIpsPrimaryIp = privateIpsPrimaryIp;
    }

    public FiltersNic privateIpsPrivateIps(List<String> privateIpsPrivateIps) {

        this.privateIpsPrivateIps = privateIpsPrivateIps;
        return this;
    }

    public FiltersNic addPrivateIpsPrivateIpsItem(String privateIpsPrivateIpsItem) {
        if (this.privateIpsPrivateIps == null) {
            this.privateIpsPrivateIps = new ArrayList<>();
        }
        this.privateIpsPrivateIps.add(privateIpsPrivateIpsItem);
        return this;
    }

    /**
     * The private IPs of the NICs.
     *
     * @return privateIpsPrivateIps
     */
    @javax.annotation.Nullable
    public List<String> getPrivateIpsPrivateIps() {
        return privateIpsPrivateIps;
    }

    public void setPrivateIpsPrivateIps(List<String> privateIpsPrivateIps) {
        this.privateIpsPrivateIps = privateIpsPrivateIps;
    }

    public FiltersNic securityGroupIds(List<String> securityGroupIds) {

        this.securityGroupIds = securityGroupIds;
        return this;
    }

    public FiltersNic addSecurityGroupIdsItem(String securityGroupIdsItem) {
        if (this.securityGroupIds == null) {
            this.securityGroupIds = new ArrayList<>();
        }
        this.securityGroupIds.add(securityGroupIdsItem);
        return this;
    }

    /**
     * The IDs of the security groups associated with the NICs.
     *
     * @return securityGroupIds
     */
    @javax.annotation.Nullable
    public List<String> getSecurityGroupIds() {
        return securityGroupIds;
    }

    public void setSecurityGroupIds(List<String> securityGroupIds) {
        this.securityGroupIds = securityGroupIds;
    }

    public FiltersNic securityGroupNames(List<String> securityGroupNames) {

        this.securityGroupNames = securityGroupNames;
        return this;
    }

    public FiltersNic addSecurityGroupNamesItem(String securityGroupNamesItem) {
        if (this.securityGroupNames == null) {
            this.securityGroupNames = new ArrayList<>();
        }
        this.securityGroupNames.add(securityGroupNamesItem);
        return this;
    }

    /**
     * The names of the security groups associated with the NICs.
     *
     * @return securityGroupNames
     */
    @javax.annotation.Nullable
    public List<String> getSecurityGroupNames() {
        return securityGroupNames;
    }

    public void setSecurityGroupNames(List<String> securityGroupNames) {
        this.securityGroupNames = securityGroupNames;
    }

    public FiltersNic states(List<String> states) {

        this.states = states;
        return this;
    }

    public FiltersNic addStatesItem(String statesItem) {
        if (this.states == null) {
            this.states = new ArrayList<>();
        }
        this.states.add(statesItem);
        return this;
    }

    /**
     * The states of the NICs.
     *
     * @return states
     */
    @javax.annotation.Nullable
    public List<String> getStates() {
        return states;
    }

    public void setStates(List<String> states) {
        this.states = states;
    }

    public FiltersNic subnetIds(List<String> subnetIds) {

        this.subnetIds = subnetIds;
        return this;
    }

    public FiltersNic addSubnetIdsItem(String subnetIdsItem) {
        if (this.subnetIds == null) {
            this.subnetIds = new ArrayList<>();
        }
        this.subnetIds.add(subnetIdsItem);
        return this;
    }

    /**
     * The IDs of the Subnets for the NICs.
     *
     * @return subnetIds
     */
    @javax.annotation.Nullable
    public List<String> getSubnetIds() {
        return subnetIds;
    }

    public void setSubnetIds(List<String> subnetIds) {
        this.subnetIds = subnetIds;
    }

    public FiltersNic subregionNames(List<String> subregionNames) {

        this.subregionNames = subregionNames;
        return this;
    }

    public FiltersNic addSubregionNamesItem(String subregionNamesItem) {
        if (this.subregionNames == null) {
            this.subregionNames = new ArrayList<>();
        }
        this.subregionNames.add(subregionNamesItem);
        return this;
    }

    /**
     * The Subregions where the NICs are located.
     *
     * @return subregionNames
     */
    @javax.annotation.Nullable
    public List<String> getSubregionNames() {
        return subregionNames;
    }

    public void setSubregionNames(List<String> subregionNames) {
        this.subregionNames = subregionNames;
    }

    public FiltersNic tagKeys(List<String> tagKeys) {

        this.tagKeys = tagKeys;
        return this;
    }

    public FiltersNic addTagKeysItem(String tagKeysItem) {
        if (this.tagKeys == null) {
            this.tagKeys = new ArrayList<>();
        }
        this.tagKeys.add(tagKeysItem);
        return this;
    }

    /**
     * The keys of the tags associated with the NICs.
     *
     * @return tagKeys
     */
    @javax.annotation.Nullable
    public List<String> getTagKeys() {
        return tagKeys;
    }

    public void setTagKeys(List<String> tagKeys) {
        this.tagKeys = tagKeys;
    }

    public FiltersNic tagValues(List<String> tagValues) {

        this.tagValues = tagValues;
        return this;
    }

    public FiltersNic addTagValuesItem(String tagValuesItem) {
        if (this.tagValues == null) {
            this.tagValues = new ArrayList<>();
        }
        this.tagValues.add(tagValuesItem);
        return this;
    }

    /**
     * The values of the tags associated with the NICs.
     *
     * @return tagValues
     */
    @javax.annotation.Nullable
    public List<String> getTagValues() {
        return tagValues;
    }

    public void setTagValues(List<String> tagValues) {
        this.tagValues = tagValues;
    }

    public FiltersNic tags(List<String> tags) {

        this.tags = tags;
        return this;
    }

    public FiltersNic addTagsItem(String tagsItem) {
        if (this.tags == null) {
            this.tags = new ArrayList<>();
        }
        this.tags.add(tagsItem);
        return this;
    }

    /**
     * The key/value combination of the tags associated with the NICs, in the following format:
     * &amp;quot;Filters&amp;quot;:{&amp;quot;Tags&amp;quot;:[&amp;quot;TAGKEY&#x3D;TAGVALUE&amp;quot;]}.
     *
     * @return tags
     */
    @javax.annotation.Nullable
    public List<String> getTags() {
        return tags;
    }

    public void setTags(List<String> tags) {
        this.tags = tags;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FiltersNic filtersNic = (FiltersNic) o;
        return Objects.equals(this.descriptions, filtersNic.descriptions)
                && Objects.equals(this.isSourceDestCheck, filtersNic.isSourceDestCheck)
                && Objects.equals(
                        this.linkNicDeleteOnVmDeletion, filtersNic.linkNicDeleteOnVmDeletion)
                && Objects.equals(this.linkNicDeviceNumbers, filtersNic.linkNicDeviceNumbers)
                && Objects.equals(this.linkNicLinkNicIds, filtersNic.linkNicLinkNicIds)
                && Objects.equals(this.linkNicStates, filtersNic.linkNicStates)
                && Objects.equals(this.linkNicVmAccountIds, filtersNic.linkNicVmAccountIds)
                && Objects.equals(this.linkNicVmIds, filtersNic.linkNicVmIds)
                && Objects.equals(this.linkPublicIpAccountIds, filtersNic.linkPublicIpAccountIds)
                && Objects.equals(
                        this.linkPublicIpLinkPublicIpIds, filtersNic.linkPublicIpLinkPublicIpIds)
                && Objects.equals(
                        this.linkPublicIpPublicDnsNames, filtersNic.linkPublicIpPublicDnsNames)
                && Objects.equals(this.linkPublicIpPublicIpIds, filtersNic.linkPublicIpPublicIpIds)
                && Objects.equals(this.linkPublicIpPublicIps, filtersNic.linkPublicIpPublicIps)
                && Objects.equals(this.macAddresses, filtersNic.macAddresses)
                && Objects.equals(this.netIds, filtersNic.netIds)
                && Objects.equals(this.nicIds, filtersNic.nicIds)
                && Objects.equals(this.privateDnsNames, filtersNic.privateDnsNames)
                && Objects.equals(
                        this.privateIpsLinkPublicIpAccountIds,
                        filtersNic.privateIpsLinkPublicIpAccountIds)
                && Objects.equals(
                        this.privateIpsLinkPublicIpPublicIps,
                        filtersNic.privateIpsLinkPublicIpPublicIps)
                && Objects.equals(this.privateIpsPrimaryIp, filtersNic.privateIpsPrimaryIp)
                && Objects.equals(this.privateIpsPrivateIps, filtersNic.privateIpsPrivateIps)
                && Objects.equals(this.securityGroupIds, filtersNic.securityGroupIds)
                && Objects.equals(this.securityGroupNames, filtersNic.securityGroupNames)
                && Objects.equals(this.states, filtersNic.states)
                && Objects.equals(this.subnetIds, filtersNic.subnetIds)
                && Objects.equals(this.subregionNames, filtersNic.subregionNames)
                && Objects.equals(this.tagKeys, filtersNic.tagKeys)
                && Objects.equals(this.tagValues, filtersNic.tagValues)
                && Objects.equals(this.tags, filtersNic.tags);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                descriptions,
                isSourceDestCheck,
                linkNicDeleteOnVmDeletion,
                linkNicDeviceNumbers,
                linkNicLinkNicIds,
                linkNicStates,
                linkNicVmAccountIds,
                linkNicVmIds,
                linkPublicIpAccountIds,
                linkPublicIpLinkPublicIpIds,
                linkPublicIpPublicDnsNames,
                linkPublicIpPublicIpIds,
                linkPublicIpPublicIps,
                macAddresses,
                netIds,
                nicIds,
                privateDnsNames,
                privateIpsLinkPublicIpAccountIds,
                privateIpsLinkPublicIpPublicIps,
                privateIpsPrimaryIp,
                privateIpsPrivateIps,
                securityGroupIds,
                securityGroupNames,
                states,
                subnetIds,
                subregionNames,
                tagKeys,
                tagValues,
                tags);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class FiltersNic {\n");
        sb.append("    descriptions: ").append(toIndentedString(descriptions)).append("\n");
        sb.append("    isSourceDestCheck: ")
                .append(toIndentedString(isSourceDestCheck))
                .append("\n");
        sb.append("    linkNicDeleteOnVmDeletion: ")
                .append(toIndentedString(linkNicDeleteOnVmDeletion))
                .append("\n");
        sb.append("    linkNicDeviceNumbers: ")
                .append(toIndentedString(linkNicDeviceNumbers))
                .append("\n");
        sb.append("    linkNicLinkNicIds: ")
                .append(toIndentedString(linkNicLinkNicIds))
                .append("\n");
        sb.append("    linkNicStates: ").append(toIndentedString(linkNicStates)).append("\n");
        sb.append("    linkNicVmAccountIds: ")
                .append(toIndentedString(linkNicVmAccountIds))
                .append("\n");
        sb.append("    linkNicVmIds: ").append(toIndentedString(linkNicVmIds)).append("\n");
        sb.append("    linkPublicIpAccountIds: ")
                .append(toIndentedString(linkPublicIpAccountIds))
                .append("\n");
        sb.append("    linkPublicIpLinkPublicIpIds: ")
                .append(toIndentedString(linkPublicIpLinkPublicIpIds))
                .append("\n");
        sb.append("    linkPublicIpPublicDnsNames: ")
                .append(toIndentedString(linkPublicIpPublicDnsNames))
                .append("\n");
        sb.append("    linkPublicIpPublicIpIds: ")
                .append(toIndentedString(linkPublicIpPublicIpIds))
                .append("\n");
        sb.append("    linkPublicIpPublicIps: ")
                .append(toIndentedString(linkPublicIpPublicIps))
                .append("\n");
        sb.append("    macAddresses: ").append(toIndentedString(macAddresses)).append("\n");
        sb.append("    netIds: ").append(toIndentedString(netIds)).append("\n");
        sb.append("    nicIds: ").append(toIndentedString(nicIds)).append("\n");
        sb.append("    privateDnsNames: ").append(toIndentedString(privateDnsNames)).append("\n");
        sb.append("    privateIpsLinkPublicIpAccountIds: ")
                .append(toIndentedString(privateIpsLinkPublicIpAccountIds))
                .append("\n");
        sb.append("    privateIpsLinkPublicIpPublicIps: ")
                .append(toIndentedString(privateIpsLinkPublicIpPublicIps))
                .append("\n");
        sb.append("    privateIpsPrimaryIp: ")
                .append(toIndentedString(privateIpsPrimaryIp))
                .append("\n");
        sb.append("    privateIpsPrivateIps: ")
                .append(toIndentedString(privateIpsPrivateIps))
                .append("\n");
        sb.append("    securityGroupIds: ").append(toIndentedString(securityGroupIds)).append("\n");
        sb.append("    securityGroupNames: ")
                .append(toIndentedString(securityGroupNames))
                .append("\n");
        sb.append("    states: ").append(toIndentedString(states)).append("\n");
        sb.append("    subnetIds: ").append(toIndentedString(subnetIds)).append("\n");
        sb.append("    subregionNames: ").append(toIndentedString(subregionNames)).append("\n");
        sb.append("    tagKeys: ").append(toIndentedString(tagKeys)).append("\n");
        sb.append("    tagValues: ").append(toIndentedString(tagValues)).append("\n");
        sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("Descriptions");
        openapiFields.add("IsSourceDestCheck");
        openapiFields.add("LinkNicDeleteOnVmDeletion");
        openapiFields.add("LinkNicDeviceNumbers");
        openapiFields.add("LinkNicLinkNicIds");
        openapiFields.add("LinkNicStates");
        openapiFields.add("LinkNicVmAccountIds");
        openapiFields.add("LinkNicVmIds");
        openapiFields.add("LinkPublicIpAccountIds");
        openapiFields.add("LinkPublicIpLinkPublicIpIds");
        openapiFields.add("LinkPublicIpPublicDnsNames");
        openapiFields.add("LinkPublicIpPublicIpIds");
        openapiFields.add("LinkPublicIpPublicIps");
        openapiFields.add("MacAddresses");
        openapiFields.add("NetIds");
        openapiFields.add("NicIds");
        openapiFields.add("PrivateDnsNames");
        openapiFields.add("PrivateIpsLinkPublicIpAccountIds");
        openapiFields.add("PrivateIpsLinkPublicIpPublicIps");
        openapiFields.add("PrivateIpsPrimaryIp");
        openapiFields.add("PrivateIpsPrivateIps");
        openapiFields.add("SecurityGroupIds");
        openapiFields.add("SecurityGroupNames");
        openapiFields.add("States");
        openapiFields.add("SubnetIds");
        openapiFields.add("SubregionNames");
        openapiFields.add("TagKeys");
        openapiFields.add("TagValues");
        openapiFields.add("Tags");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to FiltersNic
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!FiltersNic.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in FiltersNic is not found in the empty"
                                        + " JSON string",
                                FiltersNic.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!FiltersNic.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `FiltersNic` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("Descriptions") != null && !jsonObj.get("Descriptions").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `Descriptions` to be an array in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("Descriptions").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("LinkNicDeviceNumbers") != null
                && !jsonObj.get("LinkNicDeviceNumbers").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `LinkNicDeviceNumbers` to be an array in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("LinkNicDeviceNumbers").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("LinkNicLinkNicIds") != null
                && !jsonObj.get("LinkNicLinkNicIds").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `LinkNicLinkNicIds` to be an array in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("LinkNicLinkNicIds").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("LinkNicStates") != null && !jsonObj.get("LinkNicStates").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `LinkNicStates` to be an array in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("LinkNicStates").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("LinkNicVmAccountIds") != null
                && !jsonObj.get("LinkNicVmAccountIds").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `LinkNicVmAccountIds` to be an array in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("LinkNicVmAccountIds").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("LinkNicVmIds") != null && !jsonObj.get("LinkNicVmIds").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `LinkNicVmIds` to be an array in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("LinkNicVmIds").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("LinkPublicIpAccountIds") != null
                && !jsonObj.get("LinkPublicIpAccountIds").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `LinkPublicIpAccountIds` to be an array in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("LinkPublicIpAccountIds").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("LinkPublicIpLinkPublicIpIds") != null
                && !jsonObj.get("LinkPublicIpLinkPublicIpIds").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `LinkPublicIpLinkPublicIpIds` to be an array in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("LinkPublicIpLinkPublicIpIds").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("LinkPublicIpPublicDnsNames") != null
                && !jsonObj.get("LinkPublicIpPublicDnsNames").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `LinkPublicIpPublicDnsNames` to be an array in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("LinkPublicIpPublicDnsNames").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("LinkPublicIpPublicIpIds") != null
                && !jsonObj.get("LinkPublicIpPublicIpIds").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `LinkPublicIpPublicIpIds` to be an array in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("LinkPublicIpPublicIpIds").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("LinkPublicIpPublicIps") != null
                && !jsonObj.get("LinkPublicIpPublicIps").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `LinkPublicIpPublicIps` to be an array in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("LinkPublicIpPublicIps").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("MacAddresses") != null && !jsonObj.get("MacAddresses").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `MacAddresses` to be an array in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("MacAddresses").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("NetIds") != null && !jsonObj.get("NetIds").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `NetIds` to be an array in the JSON string but got"
                                    + " `%s`",
                            jsonObj.get("NetIds").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("NicIds") != null && !jsonObj.get("NicIds").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `NicIds` to be an array in the JSON string but got"
                                    + " `%s`",
                            jsonObj.get("NicIds").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("PrivateDnsNames") != null
                && !jsonObj.get("PrivateDnsNames").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `PrivateDnsNames` to be an array in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("PrivateDnsNames").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("PrivateIpsLinkPublicIpAccountIds") != null
                && !jsonObj.get("PrivateIpsLinkPublicIpAccountIds").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `PrivateIpsLinkPublicIpAccountIds` to be an array"
                                    + " in the JSON string but got `%s`",
                            jsonObj.get("PrivateIpsLinkPublicIpAccountIds").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("PrivateIpsLinkPublicIpPublicIps") != null
                && !jsonObj.get("PrivateIpsLinkPublicIpPublicIps").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `PrivateIpsLinkPublicIpPublicIps` to be an array"
                                    + " in the JSON string but got `%s`",
                            jsonObj.get("PrivateIpsLinkPublicIpPublicIps").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("PrivateIpsPrivateIps") != null
                && !jsonObj.get("PrivateIpsPrivateIps").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `PrivateIpsPrivateIps` to be an array in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("PrivateIpsPrivateIps").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("SecurityGroupIds") != null
                && !jsonObj.get("SecurityGroupIds").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `SecurityGroupIds` to be an array in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("SecurityGroupIds").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("SecurityGroupNames") != null
                && !jsonObj.get("SecurityGroupNames").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `SecurityGroupNames` to be an array in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("SecurityGroupNames").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("States") != null && !jsonObj.get("States").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `States` to be an array in the JSON string but got"
                                    + " `%s`",
                            jsonObj.get("States").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("SubnetIds") != null && !jsonObj.get("SubnetIds").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `SubnetIds` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("SubnetIds").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("SubregionNames") != null && !jsonObj.get("SubregionNames").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `SubregionNames` to be an array in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("SubregionNames").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("TagKeys") != null && !jsonObj.get("TagKeys").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `TagKeys` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("TagKeys").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("TagValues") != null && !jsonObj.get("TagValues").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `TagValues` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("TagValues").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `Tags` to be an array in the JSON string but got"
                                    + " `%s`",
                            jsonObj.get("Tags").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!FiltersNic.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'FiltersNic' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<FiltersNic> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(FiltersNic.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<FiltersNic>() {
                        @Override
                        public void write(JsonWriter out, FiltersNic value) throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public FiltersNic read(JsonReader in) throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of FiltersNic given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of FiltersNic
     * @throws IOException if the JSON string is invalid with respect to FiltersNic
     */
    public static FiltersNic fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, FiltersNic.class);
    }

    /**
     * Convert an instance of FiltersNic to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
