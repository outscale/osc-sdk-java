/*
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> Throttling: To protect against overloads, the number of identical requests allowed in a given time period is limited.<br /> Brute force: To protect against brute force attacks, the number of failed authentication attempts in a given time period is limited.<br /><br /> You can learn more about errors returned by the API in the dedicated [errors page](api/errors).<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).<br /> # Authentication Schemes ### Access Key/Secret Key The main way to authenticate your requests to the OUTSCALE API is to use an access key and a secret key.<br /> The mechanism behind this is based on AWS Signature Version 4, whose technical implementation details are described in [Signature of API Requests](https://docs.outscale.com/en/userguide/Signature-of-API-Requests.html).<br /><br /> In practice, the way to specify your access key and secret key depends on the tool or SDK you want to use to interact with the API.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify your access key, secret key, and the Region of your account. > 2. You then specify the `--profile` option when executing OSC CLI commands. >  > For more information, see [Installing and Configuring OSC CLI](https://docs.outscale.com/en/userguide/Installing-and-Configuring-OSC-CLI.html).  See the code samples in each section of this documentation for specific examples in different programming languages.<br /> For more information about access keys, see [About Access Keys](https://docs.outscale.com/en/userguide/About-Access-Keys.html). ### Login/Password For certain API actions, you can also use basic authentication with the login (email address) and password of your TINA account.<br /> This is useful only in special circumstances, for example if you do not know your access key/secret key and want to retrieve them programmatically.<br /> In most cases, however, you can use the Cockpit web interface to retrieve them.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify the Region of your account, but you leave the access key value and secret key value empty (`&quot;&quot;`). > 2. You then specify the `--profile`, `--authentication-method`, `--login`, and `--password` options when executing OSC CLI commands.  See the code samples in each section of this documentation for specific examples in different programming languages. ### No Authentication A few API actions do not require any authentication. They are indicated as such in this documentation.<br /> ### Other Security Mechanisms In parallel with the authentication schemes, you can add other security mechanisms to your OUTSCALE account, for example to restrict API requests by IP or other criteria.<br /> For more information, see [Managing Your API Accesses](https://docs.outscale.com/en/userguide/Managing-Your-API-Accesses.html).
 *
 * The version of the OpenAPI document: 1.28.5
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.github.outscale.osc_sdk_java.client.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.outscale.osc_sdk_java.client.JSON;
import java.io.IOException;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/** Information about the OOS export task to create. */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class OsuExportToCreate {
    public static final String SERIALIZED_NAME_DISK_IMAGE_FORMAT = "DiskImageFormat";

    @SerializedName(SERIALIZED_NAME_DISK_IMAGE_FORMAT)
    private String diskImageFormat;

    public static final String SERIALIZED_NAME_OSU_API_KEY = "OsuApiKey";

    @SerializedName(SERIALIZED_NAME_OSU_API_KEY)
    private OsuApiKey osuApiKey;

    public static final String SERIALIZED_NAME_OSU_BUCKET = "OsuBucket";

    @SerializedName(SERIALIZED_NAME_OSU_BUCKET)
    private String osuBucket;

    public static final String SERIALIZED_NAME_OSU_MANIFEST_URL = "OsuManifestUrl";

    @SerializedName(SERIALIZED_NAME_OSU_MANIFEST_URL)
    private String osuManifestUrl;

    public static final String SERIALIZED_NAME_OSU_PREFIX = "OsuPrefix";

    @SerializedName(SERIALIZED_NAME_OSU_PREFIX)
    private String osuPrefix;

    public OsuExportToCreate() {}

    public OsuExportToCreate diskImageFormat(String diskImageFormat) {

        this.diskImageFormat = diskImageFormat;
        return this;
    }

    /**
     * The format of the export disk (&#x60;qcow2&#x60; \\| &#x60;raw&#x60;).
     *
     * @return diskImageFormat
     */
    @javax.annotation.Nonnull
    public String getDiskImageFormat() {
        return diskImageFormat;
    }

    public void setDiskImageFormat(String diskImageFormat) {
        this.diskImageFormat = diskImageFormat;
    }

    public OsuExportToCreate osuApiKey(OsuApiKey osuApiKey) {

        this.osuApiKey = osuApiKey;
        return this;
    }

    /**
     * Get osuApiKey
     *
     * @return osuApiKey
     */
    @javax.annotation.Nullable
    public OsuApiKey getOsuApiKey() {
        return osuApiKey;
    }

    public void setOsuApiKey(OsuApiKey osuApiKey) {
        this.osuApiKey = osuApiKey;
    }

    public OsuExportToCreate osuBucket(String osuBucket) {

        this.osuBucket = osuBucket;
        return this;
    }

    /**
     * The name of the OOS bucket where you want to export the object.
     *
     * @return osuBucket
     */
    @javax.annotation.Nonnull
    public String getOsuBucket() {
        return osuBucket;
    }

    public void setOsuBucket(String osuBucket) {
        this.osuBucket = osuBucket;
    }

    public OsuExportToCreate osuManifestUrl(String osuManifestUrl) {

        this.osuManifestUrl = osuManifestUrl;
        return this;
    }

    /**
     * The URL of the manifest file.
     *
     * @return osuManifestUrl
     */
    @javax.annotation.Nullable
    public String getOsuManifestUrl() {
        return osuManifestUrl;
    }

    public void setOsuManifestUrl(String osuManifestUrl) {
        this.osuManifestUrl = osuManifestUrl;
    }

    public OsuExportToCreate osuPrefix(String osuPrefix) {

        this.osuPrefix = osuPrefix;
        return this;
    }

    /**
     * The prefix for the key of the OOS object.
     *
     * @return osuPrefix
     */
    @javax.annotation.Nullable
    public String getOsuPrefix() {
        return osuPrefix;
    }

    public void setOsuPrefix(String osuPrefix) {
        this.osuPrefix = osuPrefix;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OsuExportToCreate osuExportToCreate = (OsuExportToCreate) o;
        return Objects.equals(this.diskImageFormat, osuExportToCreate.diskImageFormat)
                && Objects.equals(this.osuApiKey, osuExportToCreate.osuApiKey)
                && Objects.equals(this.osuBucket, osuExportToCreate.osuBucket)
                && Objects.equals(this.osuManifestUrl, osuExportToCreate.osuManifestUrl)
                && Objects.equals(this.osuPrefix, osuExportToCreate.osuPrefix);
    }

    @Override
    public int hashCode() {
        return Objects.hash(diskImageFormat, osuApiKey, osuBucket, osuManifestUrl, osuPrefix);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OsuExportToCreate {\n");
        sb.append("    diskImageFormat: ").append(toIndentedString(diskImageFormat)).append("\n");
        sb.append("    osuApiKey: ").append(toIndentedString(osuApiKey)).append("\n");
        sb.append("    osuBucket: ").append(toIndentedString(osuBucket)).append("\n");
        sb.append("    osuManifestUrl: ").append(toIndentedString(osuManifestUrl)).append("\n");
        sb.append("    osuPrefix: ").append(toIndentedString(osuPrefix)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("DiskImageFormat");
        openapiFields.add("OsuApiKey");
        openapiFields.add("OsuBucket");
        openapiFields.add("OsuManifestUrl");
        openapiFields.add("OsuPrefix");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("DiskImageFormat");
        openapiRequiredFields.add("OsuBucket");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to OsuExportToCreate
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!OsuExportToCreate.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in OsuExportToCreate is not found in the"
                                        + " empty JSON string",
                                OsuExportToCreate.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!OsuExportToCreate.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `OsuExportToCreate` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : OsuExportToCreate.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonObj.toString()));
            }
        }
        if (!jsonObj.get("DiskImageFormat").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `DiskImageFormat` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("DiskImageFormat").toString()));
        }
        // validate the optional field `OsuApiKey`
        if (jsonObj.get("OsuApiKey") != null && !jsonObj.get("OsuApiKey").isJsonNull()) {
            OsuApiKey.validateJsonObject(jsonObj.getAsJsonObject("OsuApiKey"));
        }
        if (!jsonObj.get("OsuBucket").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `OsuBucket` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("OsuBucket").toString()));
        }
        if ((jsonObj.get("OsuManifestUrl") != null && !jsonObj.get("OsuManifestUrl").isJsonNull())
                && !jsonObj.get("OsuManifestUrl").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `OsuManifestUrl` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("OsuManifestUrl").toString()));
        }
        if ((jsonObj.get("OsuPrefix") != null && !jsonObj.get("OsuPrefix").isJsonNull())
                && !jsonObj.get("OsuPrefix").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `OsuPrefix` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("OsuPrefix").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!OsuExportToCreate.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'OsuExportToCreate' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<OsuExportToCreate> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(OsuExportToCreate.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<OsuExportToCreate>() {
                        @Override
                        public void write(JsonWriter out, OsuExportToCreate value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public OsuExportToCreate read(JsonReader in) throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of OsuExportToCreate given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of OsuExportToCreate
     * @throws IOException if the JSON string is invalid with respect to OsuExportToCreate
     */
    public static OsuExportToCreate fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, OsuExportToCreate.class);
    }

    /**
     * Convert an instance of OsuExportToCreate to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
