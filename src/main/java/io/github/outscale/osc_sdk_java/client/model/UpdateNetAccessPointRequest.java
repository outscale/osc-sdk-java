/*
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> You can learn more about errors returned by the API in the dedicated [errors page](api/errors).<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).
 *
 * The version of the OpenAPI document: 1.26
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.github.outscale.osc_sdk_java.client.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.outscale.osc_sdk_java.client.JSON;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/** UpdateNetAccessPointRequest */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class UpdateNetAccessPointRequest {
    public static final String SERIALIZED_NAME_ADD_ROUTE_TABLE_IDS = "AddRouteTableIds";

    @SerializedName(SERIALIZED_NAME_ADD_ROUTE_TABLE_IDS)
    private List<String> addRouteTableIds = null;

    public static final String SERIALIZED_NAME_DRY_RUN = "DryRun";

    @SerializedName(SERIALIZED_NAME_DRY_RUN)
    private Boolean dryRun;

    public static final String SERIALIZED_NAME_NET_ACCESS_POINT_ID = "NetAccessPointId";

    @SerializedName(SERIALIZED_NAME_NET_ACCESS_POINT_ID)
    private String netAccessPointId;

    public static final String SERIALIZED_NAME_REMOVE_ROUTE_TABLE_IDS = "RemoveRouteTableIds";

    @SerializedName(SERIALIZED_NAME_REMOVE_ROUTE_TABLE_IDS)
    private List<String> removeRouteTableIds = null;

    public UpdateNetAccessPointRequest() {}

    public UpdateNetAccessPointRequest addRouteTableIds(List<String> addRouteTableIds) {

        this.addRouteTableIds = addRouteTableIds;
        return this;
    }

    public UpdateNetAccessPointRequest addAddRouteTableIdsItem(String addRouteTableIdsItem) {
        if (this.addRouteTableIds == null) {
            this.addRouteTableIds = new ArrayList<>();
        }
        this.addRouteTableIds.add(addRouteTableIdsItem);
        return this;
    }

    /**
     * One or more IDs of route tables to associate with the specified Net access point.
     *
     * @return addRouteTableIds
     */
    @javax.annotation.Nullable
    public List<String> getAddRouteTableIds() {
        return addRouteTableIds;
    }

    public void setAddRouteTableIds(List<String> addRouteTableIds) {
        this.addRouteTableIds = addRouteTableIds;
    }

    public UpdateNetAccessPointRequest dryRun(Boolean dryRun) {

        this.dryRun = dryRun;
        return this;
    }

    /**
     * If true, checks whether you have the required permissions to perform the action.
     *
     * @return dryRun
     */
    @javax.annotation.Nullable
    public Boolean getDryRun() {
        return dryRun;
    }

    public void setDryRun(Boolean dryRun) {
        this.dryRun = dryRun;
    }

    public UpdateNetAccessPointRequest netAccessPointId(String netAccessPointId) {

        this.netAccessPointId = netAccessPointId;
        return this;
    }

    /**
     * The ID of the Net access point.
     *
     * @return netAccessPointId
     */
    @javax.annotation.Nonnull
    public String getNetAccessPointId() {
        return netAccessPointId;
    }

    public void setNetAccessPointId(String netAccessPointId) {
        this.netAccessPointId = netAccessPointId;
    }

    public UpdateNetAccessPointRequest removeRouteTableIds(List<String> removeRouteTableIds) {

        this.removeRouteTableIds = removeRouteTableIds;
        return this;
    }

    public UpdateNetAccessPointRequest addRemoveRouteTableIdsItem(String removeRouteTableIdsItem) {
        if (this.removeRouteTableIds == null) {
            this.removeRouteTableIds = new ArrayList<>();
        }
        this.removeRouteTableIds.add(removeRouteTableIdsItem);
        return this;
    }

    /**
     * One or more IDs of route tables to disassociate from the specified Net access point.
     *
     * @return removeRouteTableIds
     */
    @javax.annotation.Nullable
    public List<String> getRemoveRouteTableIds() {
        return removeRouteTableIds;
    }

    public void setRemoveRouteTableIds(List<String> removeRouteTableIds) {
        this.removeRouteTableIds = removeRouteTableIds;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateNetAccessPointRequest updateNetAccessPointRequest = (UpdateNetAccessPointRequest) o;
        return Objects.equals(this.addRouteTableIds, updateNetAccessPointRequest.addRouteTableIds)
                && Objects.equals(this.dryRun, updateNetAccessPointRequest.dryRun)
                && Objects.equals(
                        this.netAccessPointId, updateNetAccessPointRequest.netAccessPointId)
                && Objects.equals(
                        this.removeRouteTableIds, updateNetAccessPointRequest.removeRouteTableIds);
    }

    @Override
    public int hashCode() {
        return Objects.hash(addRouteTableIds, dryRun, netAccessPointId, removeRouteTableIds);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class UpdateNetAccessPointRequest {\n");
        sb.append("    addRouteTableIds: ").append(toIndentedString(addRouteTableIds)).append("\n");
        sb.append("    dryRun: ").append(toIndentedString(dryRun)).append("\n");
        sb.append("    netAccessPointId: ").append(toIndentedString(netAccessPointId)).append("\n");
        sb.append("    removeRouteTableIds: ")
                .append(toIndentedString(removeRouteTableIds))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("AddRouteTableIds");
        openapiFields.add("DryRun");
        openapiFields.add("NetAccessPointId");
        openapiFields.add("RemoveRouteTableIds");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("NetAccessPointId");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to UpdateNetAccessPointRequest
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!UpdateNetAccessPointRequest.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in UpdateNetAccessPointRequest is not"
                                        + " found in the empty JSON string",
                                UpdateNetAccessPointRequest.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!UpdateNetAccessPointRequest.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `UpdateNetAccessPointRequest` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : UpdateNetAccessPointRequest.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonObj.toString()));
            }
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("AddRouteTableIds") != null
                && !jsonObj.get("AddRouteTableIds").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `AddRouteTableIds` to be an array in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("AddRouteTableIds").toString()));
        }
        if (!jsonObj.get("NetAccessPointId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `NetAccessPointId` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("NetAccessPointId").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("RemoveRouteTableIds") != null
                && !jsonObj.get("RemoveRouteTableIds").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `RemoveRouteTableIds` to be an array in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("RemoveRouteTableIds").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!UpdateNetAccessPointRequest.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'UpdateNetAccessPointRequest' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<UpdateNetAccessPointRequest> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(UpdateNetAccessPointRequest.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<UpdateNetAccessPointRequest>() {
                        @Override
                        public void write(JsonWriter out, UpdateNetAccessPointRequest value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public UpdateNetAccessPointRequest read(JsonReader in) throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of UpdateNetAccessPointRequest given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of UpdateNetAccessPointRequest
     * @throws IOException if the JSON string is invalid with respect to UpdateNetAccessPointRequest
     */
    public static UpdateNetAccessPointRequest fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, UpdateNetAccessPointRequest.class);
    }

    /**
     * Convert an instance of UpdateNetAccessPointRequest to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
