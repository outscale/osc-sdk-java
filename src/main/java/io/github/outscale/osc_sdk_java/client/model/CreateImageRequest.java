/*
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> You can learn more about errors returned by the API in the dedicated [errors page](api/errors).<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).
 *
 * The version of the OpenAPI document: 1.26
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.github.outscale.osc_sdk_java.client.model;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.outscale.osc_sdk_java.client.JSON;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/** CreateImageRequest */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CreateImageRequest {
    public static final String SERIALIZED_NAME_ARCHITECTURE = "Architecture";

    @SerializedName(SERIALIZED_NAME_ARCHITECTURE)
    private String architecture;

    public static final String SERIALIZED_NAME_BLOCK_DEVICE_MAPPINGS = "BlockDeviceMappings";

    @SerializedName(SERIALIZED_NAME_BLOCK_DEVICE_MAPPINGS)
    private List<BlockDeviceMappingImage> blockDeviceMappings = null;

    public static final String SERIALIZED_NAME_DESCRIPTION = "Description";

    @SerializedName(SERIALIZED_NAME_DESCRIPTION)
    private String description;

    public static final String SERIALIZED_NAME_DRY_RUN = "DryRun";

    @SerializedName(SERIALIZED_NAME_DRY_RUN)
    private Boolean dryRun;

    public static final String SERIALIZED_NAME_FILE_LOCATION = "FileLocation";

    @SerializedName(SERIALIZED_NAME_FILE_LOCATION)
    private String fileLocation;

    public static final String SERIALIZED_NAME_IMAGE_NAME = "ImageName";

    @SerializedName(SERIALIZED_NAME_IMAGE_NAME)
    private String imageName;

    public static final String SERIALIZED_NAME_NO_REBOOT = "NoReboot";

    @SerializedName(SERIALIZED_NAME_NO_REBOOT)
    private Boolean noReboot;

    public static final String SERIALIZED_NAME_PRODUCT_CODES = "ProductCodes";

    @SerializedName(SERIALIZED_NAME_PRODUCT_CODES)
    private List<String> productCodes = null;

    public static final String SERIALIZED_NAME_ROOT_DEVICE_NAME = "RootDeviceName";

    @SerializedName(SERIALIZED_NAME_ROOT_DEVICE_NAME)
    private String rootDeviceName;

    public static final String SERIALIZED_NAME_SOURCE_IMAGE_ID = "SourceImageId";

    @SerializedName(SERIALIZED_NAME_SOURCE_IMAGE_ID)
    private String sourceImageId;

    public static final String SERIALIZED_NAME_SOURCE_REGION_NAME = "SourceRegionName";

    @SerializedName(SERIALIZED_NAME_SOURCE_REGION_NAME)
    private String sourceRegionName;

    public static final String SERIALIZED_NAME_VM_ID = "VmId";

    @SerializedName(SERIALIZED_NAME_VM_ID)
    private String vmId;

    public CreateImageRequest() {}

    public CreateImageRequest architecture(String architecture) {

        this.architecture = architecture;
        return this;
    }

    /**
     * The architecture of the OMI (by default, &#x60;i386&#x60; if you specified the
     * &#x60;FileLocation&#x60; or &#x60;RootDeviceName&#x60; parameter).
     *
     * @return architecture
     */
    @javax.annotation.Nullable
    public String getArchitecture() {
        return architecture;
    }

    public void setArchitecture(String architecture) {
        this.architecture = architecture;
    }

    public CreateImageRequest blockDeviceMappings(
            List<BlockDeviceMappingImage> blockDeviceMappings) {

        this.blockDeviceMappings = blockDeviceMappings;
        return this;
    }

    public CreateImageRequest addBlockDeviceMappingsItem(
            BlockDeviceMappingImage blockDeviceMappingsItem) {
        if (this.blockDeviceMappings == null) {
            this.blockDeviceMappings = new ArrayList<>();
        }
        this.blockDeviceMappings.add(blockDeviceMappingsItem);
        return this;
    }

    /**
     * One or more block device mappings.
     *
     * @return blockDeviceMappings
     */
    @javax.annotation.Nullable
    public List<BlockDeviceMappingImage> getBlockDeviceMappings() {
        return blockDeviceMappings;
    }

    public void setBlockDeviceMappings(List<BlockDeviceMappingImage> blockDeviceMappings) {
        this.blockDeviceMappings = blockDeviceMappings;
    }

    public CreateImageRequest description(String description) {

        this.description = description;
        return this;
    }

    /**
     * A description for the new OMI.
     *
     * @return description
     */
    @javax.annotation.Nullable
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public CreateImageRequest dryRun(Boolean dryRun) {

        this.dryRun = dryRun;
        return this;
    }

    /**
     * If true, checks whether you have the required permissions to perform the action.
     *
     * @return dryRun
     */
    @javax.annotation.Nullable
    public Boolean getDryRun() {
        return dryRun;
    }

    public void setDryRun(Boolean dryRun) {
        this.dryRun = dryRun;
    }

    public CreateImageRequest fileLocation(String fileLocation) {

        this.fileLocation = fileLocation;
        return this;
    }

    /**
     * The pre-signed URL of the OMI manifest file, or the full path to the OMI stored in a bucket.
     * If you specify this parameter, a copy of the OMI is created in your account. You must specify
     * only one of the following parameters: &#x60;FileLocation&#x60;, &#x60;RootDeviceName&#x60;,
     * &#x60;SourceImageId&#x60; or &#x60;VmId&#x60;.
     *
     * @return fileLocation
     */
    @javax.annotation.Nullable
    public String getFileLocation() {
        return fileLocation;
    }

    public void setFileLocation(String fileLocation) {
        this.fileLocation = fileLocation;
    }

    public CreateImageRequest imageName(String imageName) {

        this.imageName = imageName;
        return this;
    }

    /**
     * A unique name for the new OMI.&lt;br /&gt; Constraints: 3-128 alphanumeric characters,
     * underscores (_), spaces ( ), parentheses (()), slashes (/), periods (.), or dashes (-).
     *
     * @return imageName
     */
    @javax.annotation.Nullable
    public String getImageName() {
        return imageName;
    }

    public void setImageName(String imageName) {
        this.imageName = imageName;
    }

    public CreateImageRequest noReboot(Boolean noReboot) {

        this.noReboot = noReboot;
        return this;
    }

    /**
     * If false, the VM shuts down before creating the OMI and then reboots. If true, the VM does
     * not.
     *
     * @return noReboot
     */
    @javax.annotation.Nullable
    public Boolean getNoReboot() {
        return noReboot;
    }

    public void setNoReboot(Boolean noReboot) {
        this.noReboot = noReboot;
    }

    public CreateImageRequest productCodes(List<String> productCodes) {

        this.productCodes = productCodes;
        return this;
    }

    public CreateImageRequest addProductCodesItem(String productCodesItem) {
        if (this.productCodes == null) {
            this.productCodes = new ArrayList<>();
        }
        this.productCodes.add(productCodesItem);
        return this;
    }

    /**
     * The product codes associated with the OMI.
     *
     * @return productCodes
     */
    @javax.annotation.Nullable
    public List<String> getProductCodes() {
        return productCodes;
    }

    public void setProductCodes(List<String> productCodes) {
        this.productCodes = productCodes;
    }

    public CreateImageRequest rootDeviceName(String rootDeviceName) {

        this.rootDeviceName = rootDeviceName;
        return this;
    }

    /**
     * The name of the root device. You must specify only one of the following parameters:
     * &#x60;FileLocation&#x60;, &#x60;RootDeviceName&#x60;, &#x60;SourceImageId&#x60; or
     * &#x60;VmId&#x60;.
     *
     * @return rootDeviceName
     */
    @javax.annotation.Nullable
    public String getRootDeviceName() {
        return rootDeviceName;
    }

    public void setRootDeviceName(String rootDeviceName) {
        this.rootDeviceName = rootDeviceName;
    }

    public CreateImageRequest sourceImageId(String sourceImageId) {

        this.sourceImageId = sourceImageId;
        return this;
    }

    /**
     * The ID of the OMI you want to copy. You must specify only one of the following parameters:
     * &#x60;FileLocation&#x60;, &#x60;RootDeviceName&#x60;, &#x60;SourceImageId&#x60; or
     * &#x60;VmId&#x60;.
     *
     * @return sourceImageId
     */
    @javax.annotation.Nullable
    public String getSourceImageId() {
        return sourceImageId;
    }

    public void setSourceImageId(String sourceImageId) {
        this.sourceImageId = sourceImageId;
    }

    public CreateImageRequest sourceRegionName(String sourceRegionName) {

        this.sourceRegionName = sourceRegionName;
        return this;
    }

    /**
     * The name of the source Region, which must be the same as the Region of your account.
     *
     * @return sourceRegionName
     */
    @javax.annotation.Nullable
    public String getSourceRegionName() {
        return sourceRegionName;
    }

    public void setSourceRegionName(String sourceRegionName) {
        this.sourceRegionName = sourceRegionName;
    }

    public CreateImageRequest vmId(String vmId) {

        this.vmId = vmId;
        return this;
    }

    /**
     * The ID of the VM from which you want to create the OMI. You must specify only one of the
     * following parameters: &#x60;FileLocation&#x60;, &#x60;RootDeviceName&#x60;,
     * &#x60;SourceImageId&#x60; or &#x60;VmId&#x60;.
     *
     * @return vmId
     */
    @javax.annotation.Nullable
    public String getVmId() {
        return vmId;
    }

    public void setVmId(String vmId) {
        this.vmId = vmId;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateImageRequest createImageRequest = (CreateImageRequest) o;
        return Objects.equals(this.architecture, createImageRequest.architecture)
                && Objects.equals(this.blockDeviceMappings, createImageRequest.blockDeviceMappings)
                && Objects.equals(this.description, createImageRequest.description)
                && Objects.equals(this.dryRun, createImageRequest.dryRun)
                && Objects.equals(this.fileLocation, createImageRequest.fileLocation)
                && Objects.equals(this.imageName, createImageRequest.imageName)
                && Objects.equals(this.noReboot, createImageRequest.noReboot)
                && Objects.equals(this.productCodes, createImageRequest.productCodes)
                && Objects.equals(this.rootDeviceName, createImageRequest.rootDeviceName)
                && Objects.equals(this.sourceImageId, createImageRequest.sourceImageId)
                && Objects.equals(this.sourceRegionName, createImageRequest.sourceRegionName)
                && Objects.equals(this.vmId, createImageRequest.vmId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                architecture,
                blockDeviceMappings,
                description,
                dryRun,
                fileLocation,
                imageName,
                noReboot,
                productCodes,
                rootDeviceName,
                sourceImageId,
                sourceRegionName,
                vmId);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CreateImageRequest {\n");
        sb.append("    architecture: ").append(toIndentedString(architecture)).append("\n");
        sb.append("    blockDeviceMappings: ")
                .append(toIndentedString(blockDeviceMappings))
                .append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    dryRun: ").append(toIndentedString(dryRun)).append("\n");
        sb.append("    fileLocation: ").append(toIndentedString(fileLocation)).append("\n");
        sb.append("    imageName: ").append(toIndentedString(imageName)).append("\n");
        sb.append("    noReboot: ").append(toIndentedString(noReboot)).append("\n");
        sb.append("    productCodes: ").append(toIndentedString(productCodes)).append("\n");
        sb.append("    rootDeviceName: ").append(toIndentedString(rootDeviceName)).append("\n");
        sb.append("    sourceImageId: ").append(toIndentedString(sourceImageId)).append("\n");
        sb.append("    sourceRegionName: ").append(toIndentedString(sourceRegionName)).append("\n");
        sb.append("    vmId: ").append(toIndentedString(vmId)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("Architecture");
        openapiFields.add("BlockDeviceMappings");
        openapiFields.add("Description");
        openapiFields.add("DryRun");
        openapiFields.add("FileLocation");
        openapiFields.add("ImageName");
        openapiFields.add("NoReboot");
        openapiFields.add("ProductCodes");
        openapiFields.add("RootDeviceName");
        openapiFields.add("SourceImageId");
        openapiFields.add("SourceRegionName");
        openapiFields.add("VmId");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to CreateImageRequest
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!CreateImageRequest.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in CreateImageRequest is not found in"
                                        + " the empty JSON string",
                                CreateImageRequest.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!CreateImageRequest.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `CreateImageRequest` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }
        if ((jsonObj.get("Architecture") != null && !jsonObj.get("Architecture").isJsonNull())
                && !jsonObj.get("Architecture").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `Architecture` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("Architecture").toString()));
        }
        if (jsonObj.get("BlockDeviceMappings") != null
                && !jsonObj.get("BlockDeviceMappings").isJsonNull()) {
            JsonArray jsonArrayblockDeviceMappings = jsonObj.getAsJsonArray("BlockDeviceMappings");
            if (jsonArrayblockDeviceMappings != null) {
                // ensure the json data is an array
                if (!jsonObj.get("BlockDeviceMappings").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `BlockDeviceMappings` to be an array in"
                                            + " the JSON string but got `%s`",
                                    jsonObj.get("BlockDeviceMappings").toString()));
                }

                // validate the optional field `BlockDeviceMappings` (array)
                for (int i = 0; i < jsonArrayblockDeviceMappings.size(); i++) {
                    BlockDeviceMappingImage.validateJsonObject(
                            jsonArrayblockDeviceMappings.get(i).getAsJsonObject());
                }
                ;
            }
        }
        if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull())
                && !jsonObj.get("Description").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `Description` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("Description").toString()));
        }
        if ((jsonObj.get("FileLocation") != null && !jsonObj.get("FileLocation").isJsonNull())
                && !jsonObj.get("FileLocation").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `FileLocation` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("FileLocation").toString()));
        }
        if ((jsonObj.get("ImageName") != null && !jsonObj.get("ImageName").isJsonNull())
                && !jsonObj.get("ImageName").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `ImageName` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("ImageName").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("ProductCodes") != null && !jsonObj.get("ProductCodes").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `ProductCodes` to be an array in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("ProductCodes").toString()));
        }
        if ((jsonObj.get("RootDeviceName") != null && !jsonObj.get("RootDeviceName").isJsonNull())
                && !jsonObj.get("RootDeviceName").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `RootDeviceName` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("RootDeviceName").toString()));
        }
        if ((jsonObj.get("SourceImageId") != null && !jsonObj.get("SourceImageId").isJsonNull())
                && !jsonObj.get("SourceImageId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `SourceImageId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("SourceImageId").toString()));
        }
        if ((jsonObj.get("SourceRegionName") != null
                        && !jsonObj.get("SourceRegionName").isJsonNull())
                && !jsonObj.get("SourceRegionName").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `SourceRegionName` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("SourceRegionName").toString()));
        }
        if ((jsonObj.get("VmId") != null && !jsonObj.get("VmId").isJsonNull())
                && !jsonObj.get("VmId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `VmId` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("VmId").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CreateImageRequest.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CreateImageRequest' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CreateImageRequest> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(CreateImageRequest.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<CreateImageRequest>() {
                        @Override
                        public void write(JsonWriter out, CreateImageRequest value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public CreateImageRequest read(JsonReader in) throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of CreateImageRequest given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of CreateImageRequest
     * @throws IOException if the JSON string is invalid with respect to CreateImageRequest
     */
    public static CreateImageRequest fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CreateImageRequest.class);
    }

    /**
     * Convert an instance of CreateImageRequest to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
