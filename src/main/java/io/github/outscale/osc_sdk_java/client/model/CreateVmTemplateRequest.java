/*
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> Throttling: To protect against overloads, the number of identical requests allowed in a given time period is limited.<br /> Brute force: To protect against brute force attacks, the number of failed authentication attempts in a given time period is limited.<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/About-the-APIs.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).<br /> # Authentication Schemes ### Access Key/Secret Key The main way to authenticate your requests to the OUTSCALE API is to use an access key and a secret key.<br /> The mechanism behind this is based on AWS Signature Version 4, whose technical implementation details are described in [Signature of API Requests](https://docs.outscale.com/en/userguide/Signature-of-API-Requests.html).<br /><br /> In practice, the way to specify your access key and secret key depends on the tool or SDK you want to use to interact with the API.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify your access key, secret key, and the Region of your account. > 2. You then specify the `--profile` option when executing OSC CLI commands. >  > For more information, see [Installing and Configuring OSC CLI](https://docs.outscale.com/en/userguide/Installing-and-Configuring-OSC-CLI.html).  See the code samples in each section of this documentation for specific examples in different programming languages.<br /> For more information about access keys, see [About Access Keys](https://docs.outscale.com/en/userguide/About-Access-Keys.html).  > If you try to sign requests with an invalid access key four times in a row, further authentication attempts will be prevented for 1 minute. This lockout time increases 1 minute every four failed attempts, for up to 10 minutes.  ### Login/Password For certain API actions, you can also use basic authentication with the login (email address) and password of your TINA account.<br /> This is useful only in special circumstances, for example if you do not know your access key/secret key and want to retrieve them programmatically.<br /> In most cases, however, you can use the Cockpit web interface to retrieve them.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify the Region of your account, but you leave the access key value and secret key value empty (`&quot;&quot;`). > 2. You then specify the `--profile`, `--authentication-method`, `--login`, and `--password` options when executing OSC CLI commands.  See the code samples in each section of this documentation for specific examples in different programming languages.  > If you try to sign requests with an invalid password four times in a row, further authentication attempts will be prevented for 1 minute. This lockout time increases 1 minute every four failed attempts, for up to 10 minutes.  ### No Authentication A few API actions do not require any authentication. They are indicated as such in this documentation.<br /> ### Other Security Mechanisms In parallel with the authentication schemes, you can add other security mechanisms to your OUTSCALE account, for example to restrict API requests by IP or other criteria.<br /> For more information, see [Managing Your API Accesses](https://docs.outscale.com/en/userguide/Managing-Your-API-Accesses.html).<br /> # Error Codes Reference You can learn more about errors returned by the API in the dedicated [errors page](api-errors.html).
 *
 * The version of the OpenAPI document: 1.30.0
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.github.outscale.osc_sdk_java.client.model;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.outscale.osc_sdk_java.client.JSON;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/** CreateVmTemplateRequest */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CreateVmTemplateRequest {
    public static final String SERIALIZED_NAME_CPU_CORES = "CpuCores";

    @SerializedName(SERIALIZED_NAME_CPU_CORES)
    private Integer cpuCores;

    public static final String SERIALIZED_NAME_CPU_GENERATION = "CpuGeneration";

    @SerializedName(SERIALIZED_NAME_CPU_GENERATION)
    private String cpuGeneration;

    /**
     * The performance of the VMs (&#x60;medium&#x60; \\| &#x60;high&#x60; \\| &#x60;highest&#x60;).
     */
    @JsonAdapter(CpuPerformanceEnum.Adapter.class)
    public enum CpuPerformanceEnum {
        MEDIUM("medium"),

        HIGH("high"),

        HIGHEST("highest");

        private String value;

        CpuPerformanceEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static CpuPerformanceEnum fromValue(String value) {
            for (CpuPerformanceEnum b : CpuPerformanceEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        public static class Adapter extends TypeAdapter<CpuPerformanceEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final CpuPerformanceEnum enumeration)
                    throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public CpuPerformanceEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return CpuPerformanceEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_CPU_PERFORMANCE = "CpuPerformance";

    @SerializedName(SERIALIZED_NAME_CPU_PERFORMANCE)
    private CpuPerformanceEnum cpuPerformance = CpuPerformanceEnum.HIGH;

    public static final String SERIALIZED_NAME_DESCRIPTION = "Description";

    @SerializedName(SERIALIZED_NAME_DESCRIPTION)
    private String description;

    public static final String SERIALIZED_NAME_DRY_RUN = "DryRun";

    @SerializedName(SERIALIZED_NAME_DRY_RUN)
    private Boolean dryRun;

    public static final String SERIALIZED_NAME_IMAGE_ID = "ImageId";

    @SerializedName(SERIALIZED_NAME_IMAGE_ID)
    private String imageId;

    public static final String SERIALIZED_NAME_KEYPAIR_NAME = "KeypairName";

    @SerializedName(SERIALIZED_NAME_KEYPAIR_NAME)
    private String keypairName;

    public static final String SERIALIZED_NAME_RAM = "Ram";

    @SerializedName(SERIALIZED_NAME_RAM)
    private Integer ram;

    public static final String SERIALIZED_NAME_TAGS = "Tags";

    @SerializedName(SERIALIZED_NAME_TAGS)
    private List<ResourceTag> tags = null;

    public static final String SERIALIZED_NAME_VM_TEMPLATE_NAME = "VmTemplateName";

    @SerializedName(SERIALIZED_NAME_VM_TEMPLATE_NAME)
    private String vmTemplateName;

    public CreateVmTemplateRequest() {}

    public CreateVmTemplateRequest cpuCores(Integer cpuCores) {

        this.cpuCores = cpuCores;
        return this;
    }

    /**
     * The number of vCores to use for each VM.
     *
     * @return cpuCores
     */
    @javax.annotation.Nonnull
    public Integer getCpuCores() {
        return cpuCores;
    }

    public void setCpuCores(Integer cpuCores) {
        this.cpuCores = cpuCores;
    }

    public CreateVmTemplateRequest cpuGeneration(String cpuGeneration) {

        this.cpuGeneration = cpuGeneration;
        return this;
    }

    /**
     * The processor generation to use for each VM (for example, &#x60;v4&#x60;).
     *
     * @return cpuGeneration
     */
    @javax.annotation.Nonnull
    public String getCpuGeneration() {
        return cpuGeneration;
    }

    public void setCpuGeneration(String cpuGeneration) {
        this.cpuGeneration = cpuGeneration;
    }

    public CreateVmTemplateRequest cpuPerformance(CpuPerformanceEnum cpuPerformance) {

        this.cpuPerformance = cpuPerformance;
        return this;
    }

    /**
     * The performance of the VMs (&#x60;medium&#x60; \\| &#x60;high&#x60; \\| &#x60;highest&#x60;).
     *
     * @return cpuPerformance
     */
    @javax.annotation.Nullable
    public CpuPerformanceEnum getCpuPerformance() {
        return cpuPerformance;
    }

    public void setCpuPerformance(CpuPerformanceEnum cpuPerformance) {
        this.cpuPerformance = cpuPerformance;
    }

    public CreateVmTemplateRequest description(String description) {

        this.description = description;
        return this;
    }

    /**
     * A description for the VM template.
     *
     * @return description
     */
    @javax.annotation.Nullable
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public CreateVmTemplateRequest dryRun(Boolean dryRun) {

        this.dryRun = dryRun;
        return this;
    }

    /**
     * If true, checks whether you have the required permissions to perform the action.
     *
     * @return dryRun
     */
    @javax.annotation.Nullable
    public Boolean getDryRun() {
        return dryRun;
    }

    public void setDryRun(Boolean dryRun) {
        this.dryRun = dryRun;
    }

    public CreateVmTemplateRequest imageId(String imageId) {

        this.imageId = imageId;
        return this;
    }

    /**
     * The ID of the OMI to use for each VM. You can find a list of OMIs by calling the
     * [ReadImages](#readimages) method.
     *
     * @return imageId
     */
    @javax.annotation.Nonnull
    public String getImageId() {
        return imageId;
    }

    public void setImageId(String imageId) {
        this.imageId = imageId;
    }

    public CreateVmTemplateRequest keypairName(String keypairName) {

        this.keypairName = keypairName;
        return this;
    }

    /**
     * The name of the keypair to use for each VM.
     *
     * @return keypairName
     */
    @javax.annotation.Nullable
    public String getKeypairName() {
        return keypairName;
    }

    public void setKeypairName(String keypairName) {
        this.keypairName = keypairName;
    }

    public CreateVmTemplateRequest ram(Integer ram) {

        this.ram = ram;
        return this;
    }

    /**
     * The amount of RAM to use for each VM.
     *
     * @return ram
     */
    @javax.annotation.Nonnull
    public Integer getRam() {
        return ram;
    }

    public void setRam(Integer ram) {
        this.ram = ram;
    }

    public CreateVmTemplateRequest tags(List<ResourceTag> tags) {

        this.tags = tags;
        return this;
    }

    public CreateVmTemplateRequest addTagsItem(ResourceTag tagsItem) {
        if (this.tags == null) {
            this.tags = new ArrayList<>();
        }
        this.tags.add(tagsItem);
        return this;
    }

    /**
     * One or more tags to add to the VM template.
     *
     * @return tags
     */
    @javax.annotation.Nullable
    public List<ResourceTag> getTags() {
        return tags;
    }

    public void setTags(List<ResourceTag> tags) {
        this.tags = tags;
    }

    public CreateVmTemplateRequest vmTemplateName(String vmTemplateName) {

        this.vmTemplateName = vmTemplateName;
        return this;
    }

    /**
     * The name of the VM template.
     *
     * @return vmTemplateName
     */
    @javax.annotation.Nonnull
    public String getVmTemplateName() {
        return vmTemplateName;
    }

    public void setVmTemplateName(String vmTemplateName) {
        this.vmTemplateName = vmTemplateName;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateVmTemplateRequest createVmTemplateRequest = (CreateVmTemplateRequest) o;
        return Objects.equals(this.cpuCores, createVmTemplateRequest.cpuCores)
                && Objects.equals(this.cpuGeneration, createVmTemplateRequest.cpuGeneration)
                && Objects.equals(this.cpuPerformance, createVmTemplateRequest.cpuPerformance)
                && Objects.equals(this.description, createVmTemplateRequest.description)
                && Objects.equals(this.dryRun, createVmTemplateRequest.dryRun)
                && Objects.equals(this.imageId, createVmTemplateRequest.imageId)
                && Objects.equals(this.keypairName, createVmTemplateRequest.keypairName)
                && Objects.equals(this.ram, createVmTemplateRequest.ram)
                && Objects.equals(this.tags, createVmTemplateRequest.tags)
                && Objects.equals(this.vmTemplateName, createVmTemplateRequest.vmTemplateName);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                cpuCores,
                cpuGeneration,
                cpuPerformance,
                description,
                dryRun,
                imageId,
                keypairName,
                ram,
                tags,
                vmTemplateName);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CreateVmTemplateRequest {\n");
        sb.append("    cpuCores: ").append(toIndentedString(cpuCores)).append("\n");
        sb.append("    cpuGeneration: ").append(toIndentedString(cpuGeneration)).append("\n");
        sb.append("    cpuPerformance: ").append(toIndentedString(cpuPerformance)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    dryRun: ").append(toIndentedString(dryRun)).append("\n");
        sb.append("    imageId: ").append(toIndentedString(imageId)).append("\n");
        sb.append("    keypairName: ").append(toIndentedString(keypairName)).append("\n");
        sb.append("    ram: ").append(toIndentedString(ram)).append("\n");
        sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
        sb.append("    vmTemplateName: ").append(toIndentedString(vmTemplateName)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("CpuCores");
        openapiFields.add("CpuGeneration");
        openapiFields.add("CpuPerformance");
        openapiFields.add("Description");
        openapiFields.add("DryRun");
        openapiFields.add("ImageId");
        openapiFields.add("KeypairName");
        openapiFields.add("Ram");
        openapiFields.add("Tags");
        openapiFields.add("VmTemplateName");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("CpuCores");
        openapiRequiredFields.add("CpuGeneration");
        openapiRequiredFields.add("ImageId");
        openapiRequiredFields.add("Ram");
        openapiRequiredFields.add("VmTemplateName");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to CreateVmTemplateRequest
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!CreateVmTemplateRequest.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in CreateVmTemplateRequest is not found"
                                        + " in the empty JSON string",
                                CreateVmTemplateRequest.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!CreateVmTemplateRequest.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `CreateVmTemplateRequest` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : CreateVmTemplateRequest.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonObj.toString()));
            }
        }
        if (!jsonObj.get("CpuGeneration").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `CpuGeneration` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("CpuGeneration").toString()));
        }
        if ((jsonObj.get("CpuPerformance") != null && !jsonObj.get("CpuPerformance").isJsonNull())
                && !jsonObj.get("CpuPerformance").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `CpuPerformance` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("CpuPerformance").toString()));
        }
        if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull())
                && !jsonObj.get("Description").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `Description` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("Description").toString()));
        }
        if (!jsonObj.get("ImageId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `ImageId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("ImageId").toString()));
        }
        if ((jsonObj.get("KeypairName") != null && !jsonObj.get("KeypairName").isJsonNull())
                && !jsonObj.get("KeypairName").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `KeypairName` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("KeypairName").toString()));
        }
        if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
            JsonArray jsonArraytags = jsonObj.getAsJsonArray("Tags");
            if (jsonArraytags != null) {
                // ensure the json data is an array
                if (!jsonObj.get("Tags").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `Tags` to be an array in the JSON string"
                                            + " but got `%s`",
                                    jsonObj.get("Tags").toString()));
                }

                // validate the optional field `Tags` (array)
                for (int i = 0; i < jsonArraytags.size(); i++) {
                    ResourceTag.validateJsonObject(jsonArraytags.get(i).getAsJsonObject());
                }
                ;
            }
        }
        if (!jsonObj.get("VmTemplateName").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `VmTemplateName` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("VmTemplateName").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CreateVmTemplateRequest.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CreateVmTemplateRequest' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CreateVmTemplateRequest> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(CreateVmTemplateRequest.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<CreateVmTemplateRequest>() {
                        @Override
                        public void write(JsonWriter out, CreateVmTemplateRequest value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public CreateVmTemplateRequest read(JsonReader in) throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of CreateVmTemplateRequest given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of CreateVmTemplateRequest
     * @throws IOException if the JSON string is invalid with respect to CreateVmTemplateRequest
     */
    public static CreateVmTemplateRequest fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CreateVmTemplateRequest.class);
    }

    /**
     * Convert an instance of CreateVmTemplateRequest to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
