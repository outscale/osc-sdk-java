diff --git a/src/main/java/io/github/outscale/osc_sdk_java/client/ConfigurationEnv.java b/src/main/java/io/github/outscale/osc_sdk_java/client/ConfigurationEnv.java
index 6f53b6b..4aa1eaa 100644
--- a/src/main/java/io/github/outscale/osc_sdk_java/client/ConfigurationEnv.java
+++ b/src/main/java/io/github/outscale/osc_sdk_java/client/ConfigurationEnv.java
@@ -26,7 +26,7 @@ public class ConfigurationEnv extends ConfigurationInitializer {
         return configurationEnv;
     }
 
-    public ApiClient getApiClient() {
+    public ApiClient getApiClient() throws ConfigurationException {
         return getApiClient(profile);
     }
 
diff --git a/src/main/java/io/github/outscale/osc_sdk_java/client/ConfigurationException.java b/src/main/java/io/github/outscale/osc_sdk_java/client/ConfigurationException.java
new file mode 100644
index 0000000..66485ae
--- /dev/null
+++ b/src/main/java/io/github/outscale/osc_sdk_java/client/ConfigurationException.java
@@ -0,0 +1,25 @@
+package io.github.outscale.osc_sdk_java.client;
+
+public class ConfigurationException extends Exception {
+
+    /** Constructor for ConfigurationException. */
+    public ConfigurationException() {}
+
+    /**
+     * Constructor for ConfigurationException.
+     *
+     * @param message the error message
+     */
+    public ConfigurationException(String message) {
+        super(message);
+    }
+
+    /**
+     * Get the exception message including HTTP response data.
+     *
+     * @return The exception message
+     */
+    public String getMessage() {
+        return String.format("Message: %s", super.getMessage());
+    }
+}
diff --git a/src/main/java/io/github/outscale/osc_sdk_java/client/ConfigurationFile.java b/src/main/java/io/github/outscale/osc_sdk_java/client/ConfigurationFile.java
index 3ad64f2..cdeceef 100644
--- a/src/main/java/io/github/outscale/osc_sdk_java/client/ConfigurationFile.java
+++ b/src/main/java/io/github/outscale/osc_sdk_java/client/ConfigurationFile.java
@@ -24,11 +24,11 @@ public class ConfigurationFile extends ConfigurationInitializer {
         return defaultConfigPath.toString();
     }
 
-    public static ConfigurationFile loadDefaultConfigFile() {
+    public static ConfigurationFile loadDefaultConfigFile() throws ConfigurationException {
         return loadConfigFile(getDefaultConfigPath());
     }
 
-    public static ConfigurationFile loadConfigFile(String path) {
+    public static ConfigurationFile loadConfigFile(String path) throws ConfigurationException {
         if (path == null) {
             return null;
         }
@@ -44,22 +44,22 @@ public class ConfigurationFile extends ConfigurationInitializer {
             Type listType = new TypeToken<Map<String, Profile>>() {}.getType();
             configurationFile.profiles = gson.fromJson(br, listType);
         } catch (FileNotFoundException e) {
-            System.err.println("The file is not found ");
-            return null;
+            throw new ConfigurationException(String.format("The file '%s' is not found ", path));
         } catch (IOException e) {
-            System.err.println("Error during the read of the file");
-            return null;
+            throw new ConfigurationException(
+                    String.format("Error during the read of the file '%s'", path));
         }
 
         return configurationFile;
     }
 
-    public ApiClient getApiClient(String profile) {
+    public ApiClient getApiClient(String profile) throws ConfigurationException {
         if (!profiles.containsKey(profile)) {
-            System.err.println(
-                    "Profile was not found for creating Configuration, did you load the config"
-                            + " file ?");
-            return null;
+            throw new ConfigurationException(
+                    String.format(
+                            "Profile '%s' was not found for creating Configuration, did you load"
+                                    + " the configfile ?",
+                            profile));
         }
         return getApiClient(profiles.get(profile));
     }
diff --git a/src/main/java/io/github/outscale/osc_sdk_java/client/ConfigurationInitializer.java b/src/main/java/io/github/outscale/osc_sdk_java/client/ConfigurationInitializer.java
index ef2306b..2f13306 100644
--- a/src/main/java/io/github/outscale/osc_sdk_java/client/ConfigurationInitializer.java
+++ b/src/main/java/io/github/outscale/osc_sdk_java/client/ConfigurationInitializer.java
@@ -24,7 +24,7 @@ import org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter;
 
 public class ConfigurationInitializer {
 
-    protected ApiClient getApiClient(Profile profile) {
+    protected ApiClient getApiClient(Profile profile) throws ConfigurationException {
         Profile selectedProfile = profile;
 
         ApiClient apiClient = new ApiClient();
@@ -68,7 +68,7 @@ public class ConfigurationInitializer {
         apiClient.setServers(
                 new ArrayList<ServerConfiguration>() {
                     {
-                        add(serverConfiguration);
+                        this.add(serverConfiguration);
                     }
                 });
         apiClient.setServerIndex(0);
@@ -87,14 +87,20 @@ public class ConfigurationInitializer {
                 CertificateFactory factory = CertificateFactory.getInstance("X.509");
                 cert = (X509Certificate) factory.generateCertificate(br);
             } catch (FileNotFoundException e) {
-                System.err.println("The certificate is not found ");
-                return null;
+                throw new ConfigurationException(
+                        String.format(
+                                "The certificate '%s' is not found ",
+                                selectedProfile.getX509ClientCert()));
             } catch (IOException e) {
-                System.err.println("Error during the read of the certificate");
-                return null;
+                throw new ConfigurationException(
+                        String.format(
+                                "Error during the read of the certificate '%s'",
+                                selectedProfile.getX509ClientCert()));
             } catch (CertificateException e) {
-                System.err.println("Error during the parse of the certificate");
-                return null;
+                throw new ConfigurationException(
+                        String.format(
+                                "Error during the parse of the certificate '%s'",
+                                selectedProfile.getX509ClientCert()));
             }
 
             PEMKeyPair pemKey;
@@ -102,15 +108,25 @@ public class ConfigurationInitializer {
             try (BufferedReader br =
                     new BufferedReader(new FileReader(selectedProfile.getX509ClientKey()))) {
                 pemKey = (PEMKeyPair) new PEMParser(br).readObject();
+                if (pemKey == null) {
+                    throw new ConfigurationException(
+                            String.format(
+                                    "Error during the read of the private key '%s'",
+                                    selectedProfile.getX509ClientKey()));
+                }
                 ecKey =
                         (PrivateKey)
                                 new JcaPEMKeyConverter().getPrivateKey(pemKey.getPrivateKeyInfo());
             } catch (FileNotFoundException e) {
-                System.err.println("The private key is not found ");
-                return null;
+                throw new ConfigurationException(
+                        String.format(
+                                "The private key '%s' is not found ",
+                                selectedProfile.getX509ClientKey()));
             } catch (IOException e) {
-                System.err.println("Error during the read of the private key");
-                return null;
+                throw new ConfigurationException(
+                        String.format(
+                                "Error during the read of the private key '%s'",
+                                selectedProfile.getX509ClientKey()));
             }
 
             HeldCertificate clientCertificate =
@@ -136,8 +152,8 @@ public class ConfigurationInitializer {
                 && selectedProfile.getX509ClientKeyB64() != null
                 && selectedProfile.getX509ClientKeyB64().length() > 0) {
             if (tlsConfigured) {
-                System.err.println("Cannot configure client certificate with both file and base64");
-                return null;
+                throw new ConfigurationException(
+                        "Cannot configure client certificate with both file and base64");
             }
 
             byte[] decodedBytes = Base64.getDecoder().decode(selectedProfile.getX509ClientKeyB64());
@@ -150,12 +166,14 @@ public class ConfigurationInitializer {
             PrivateKey ecKey = null;
             try {
                 pemKey = (PEMKeyPair) new PEMParser(new StringReader(privateKey)).readObject();
+                if (pemKey == null) {
+                    throw new ConfigurationException("Cannot parse the private Key B64 encoded");
+                }
                 ecKey =
                         (PrivateKey)
                                 new JcaPEMKeyConverter().getPrivateKey(pemKey.getPrivateKeyInfo());
             } catch (IOException e) {
-                System.err.println("Cannot parse the private Key");
-                return null;
+                throw new ConfigurationException("Cannot parse the private Key B64 encoded");
             }
 
             X509Certificate cert = null;
@@ -166,8 +184,8 @@ public class ConfigurationInitializer {
                                 factory.generateCertificate(
                                         new ByteArrayInputStream(certificate.getBytes()));
             } catch (CertificateException e) {
-                System.err.println("Error during parse of the certificate");
-                return null;
+                throw new ConfigurationException(
+                        "Error during parse of the certificate B64 encoded");
             }
 
             HeldCertificate clientCertificate =
diff --git a/src/test/java/io/github/outscale/osc_sdk_java/client/ConfigurationInitializerTest.java b/src/test/java/io/github/outscale/osc_sdk_java/client/ConfigurationInitializerTest.java
new file mode 100644
index 0000000..b592441
--- /dev/null
+++ b/src/test/java/io/github/outscale/osc_sdk_java/client/ConfigurationInitializerTest.java
@@ -0,0 +1,154 @@
+package io.github.outscale.osc_sdk_java.client;
+
+import static org.junit.Assert.assertThrows;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotEquals;
+
+import org.junit.jupiter.api.Test;
+
+public class ConfigurationInitializerTest {
+
+    private final ConfigurationInitializer configuration = new ConfigurationInitializer();
+
+    private String getValidCertificateFile() {
+        return ConfigurationInitializerTest.class.getResource("certs/valid/sdk.test.crt").getFile();
+    }
+
+    private String getValidKeyFile() {
+        return ConfigurationInitializerTest.class.getResource("certs/valid/sdk.test.key").getFile();
+    }
+
+    private String getInvalidKeyFile() {
+        return ConfigurationInitializerTest.class
+                .getResource("certs/invalid/sdk.test.key")
+                .getFile();
+    }
+
+    private String getInvalidCertificateFile() {
+        return ConfigurationInitializerTest.class
+                .getResource("certs/invalid/sdk.test.crt")
+                .getFile();
+    }
+
+    private String getValidCertificateB64() {
+        return "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPVENDQWlFQ0ZCQlFQUmloN1pwNEhtcTZLeGtaOFdUbCtUcklNQTBHQ1NxR1NJYjNEUUVCQ3dVQU1HMHgKQ3pBSkJnTlZCQVlUQWxSVE1RMHdDd1lEVlFRSURBUlVaWE4wTVEwd0N3WURWUVFIREFSVVpYTjBNUTB3Q3dZRApWUVFLREFSVVpYTjBNUTB3Q3dZRFZRUUxEQVJVWlhOME1RMHdDd1lEVlFRRERBUlVSVk5VTVJNd0VRWUpLb1pJCmh2Y05BUWtCRmdSVVJWTlVNQjRYRFRJeU1USXhOVEV5TXpZeE1Wb1hEVEkxTURrd09URXlNell4TVZvd1JURUwKTUFrR0ExVUVCaE1DVkZNeEV6QVJCZ05WQkFnTUNsTnZiV1V0VTNSaGRHVXhJVEFmQmdOVkJBb01HRWx1ZEdWeQpibVYwSUZkcFpHZHBkSE1nVUhSNUlFeDBaRENDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DCmdnRUJBS0VXYVJSNUltMkdnMHZjcVI1a0RmNHFyQ3N4amJkbmsvbk5DVDMzV25vVmRVUnVGQVlVV1ljVTVTdCsKTFg3RkdFK0VaOUo1bzlYLzBUcGFRbTMxZndIRUdieWJBQWQzRzI1Y2IwNnd4cGhHL3V6YWR0WVRHdURTdjQ3cgpPLzZuVTBnaG9hMldKRXVLSDJsNXJxQTZHakd4OWFqc1RUeThTbk9zV2MrOFdQRGhBaHhiRjFBS0hhMHprTE9kCm0zWlpnRTk2SWpEdjR1c0lQeUlhR2N1b21lNjBMUnB6OGp6NlBpYWtkbmFWZ21NWVpKMHRncndQWTkvRmd6cGEKVFo3QWhEcTcrSUJQZ1B5cXFZYnZuUHY1bTBvVlp5NG1CRkZuNTdrNnVjcUZpSUJvdDZsN3NDaTRSNXBGV1c2MwpRMFFmaEs4UUZkRXNzeUp6ejdJdGpqYTJuLzhDQXdFQUFUQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFVdmMwClVIS3B5V3Y5Uld0UGZlb3luYTdTOHNJMi9wM2UxNXh4V1ZKSW8zOVZBSmMyRTUvTzZSYVRHS2N6RzkxcjNCMEsKaWhwVkpEWllHM0V2VGtOWWN3Unhqb25URjBkYU5mTzYrSndIOGdMcFRrQU9GN3Ywd0gzeGRRVWJzOW0yY2RWdgphZ3dTT0M1WXdlTFdiaGw2Vm9tRlp0b3h0eE0xclRWUkFDcVNWNzBwNnNQK3FJUFNOUkxOZmVoVkt0Vm5PYmJUCmpFRndRZS9Vb2pCZ2FTMXM0Ni9lK0dMTkdmQWs0MmNZbnVyUU9QTFVKT1pvYmVncXpodElkNytQUndBbGVyT28KODhjb0RXY3JPRnl2RkdUUTJoMXB3dko3NkFNNXh5NHFFbitRNzVCZ0VuaWJSeHBzWUpDeUU1RGErem5LWnlGUQoyeHdWRS9aU2lOcm9BTno1NXc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==";
+    }
+
+    private String getValidKeyB64() {
+        return "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBb1JacEZIa2liWWFEUzl5cEhtUU4vaXFzS3pHTnQyZVQrYzBKUGZkYWVoVjFSRzRVCkJoUlpoeFRsSzM0dGZzVVlUNFJuMG5tajFmL1JPbHBDYmZWL0FjUVp2SnNBQjNjYmJseHZUckRHbUViKzdOcDIKMWhNYTROSy9qdXM3L3FkVFNDR2hyWllrUzRvZmFYbXVvRG9hTWJIMXFPeE5QTHhLYzZ4Wno3eFk4T0VDSEZzWApVQW9kclRPUXM1MmJkbG1BVDNvaU1PL2k2d2cvSWhvWnk2aVo3clF0R25QeVBQbytKcVIyZHBXQ1l4aGtuUzJDCnZBOWozOFdET2xwTm5zQ0VPcnY0Z0UrQS9LcXBodStjKy9tYlNoVm5MaVlFVVdmbnVUcTV5b1dJZ0dpM3FYdXcKS0xoSG1rVlpicmREUkIrRXJ4QVYwU3l6SW5QUHNpMk9OcmFmL3dJREFRQUJBb0lCQUhGTUg5QUVldEJwd1VMRQpDamFUekx1dEs3YWRmYjAzSG42ZFZSaStObWFUWFEwcUZ1OUh0TWdyVEJ2US9SS2ljVHpNTlhGMW1HUFZMMFZKCllsdVFSU25xME9jMFpVcmEzUEk4RlJWVmcvaHFScll6MlUwcjFzVzF0SUZDdGNtZnloVjdnZ2xqQmxnUzU1RDUKd25aekp5VTRzejJDSmJqSC9kMXBwU2xVb1lHWXdvUXUvTzdYamJmbVFyTVY2L2o3dHRibUNMZmpaVjZ3UE53bwpETWZCUnlLKzY3WFhjcTV4c2dreE9qanhTbFUyZmY2ekh1TjhXU3hPUmlWNGw0OEIydU5wV041VWQySDkvcFNGCjgvZlZkNkFtaFh6SzlCL29kQUlKSFhPdU9iQ0JUbGRSV3h5VEVLbW10TTVrZE5GdE51MkRBN1RSNFY0VWJzTWMKZW83NkFMRUNnWUVBeldzdE42VGdzRTJJdXVlbm83ajRmaXhXdDN4MFU1SkNyZjg0cURZUzQ1cVVmbzBzU3gxdQp3V0F3M09FTjBmNHhkTUJEb2x0eFFOejBmQ1pkR1hVOGxiQUpzbENxWm1EVlRCcXUyTmdaTnhBbHNMYzdNNHY0CkdJb2svaE5YOHF1L0dVbEpqRnNBSzJxNTZMWE5uc3Z2TlZLcWQwdGRPOFB3WmNKU25mZ1lnV01DZ1lFQXlNREUKSHpIWEppMFlDd2RVQmF6SkpQVGtXV1pMYnlyTWk0di95OElNZTNmMC9nWUR1ZUtCZWdiVE1rVWxZN3lqTk5YYQpuZUlWSndvYk05MnJDNU9rVldvalo2ZlA1MVUydy9kendsSFZGanJiaFZtVVN0RjViZGdZRHNDbm5rMUdwTjdOCnM0bS8vVjV2RjBFbk5MY1hkY1IzTlFXMzRpNXdybmFOUm1ZejE3VUNnWUFneEZYa0tHTEcvTGN3eVQ4T2VMVDYKdTJ2aHZQSjVXajFVci8rRHBZeUJ6ZWlkL3pydmlIUmdXRTJ6RGhzOFFnWDFqNjI2T2tmb2h0Wmc3Mld1WitzUQpIWktPWlJ1cFZRenhKTmg3TW8xaklTcEI5QmgzY241U3U4YUcyT01RaktEaEViV3ZzOXhsRUpNek1iem85YkxrCm1Ka2tpbHNHNjR4dlR2NEt3TVozN1FLQmdRQ2RZTWtmTDJKY01rUEQrWlc3OFMycXhEVHpoTWNrT2lncVNiRloKV2lHUTlZUmhVL085Mkx6cUhjbVpnaTJDbDlKV1RFUmJPMjZic1VlTURIM1gwSUdtMkZNeklwSlE1elBNd3dQRAoxWVU0TFNJRTB5bjIwV3JoV3VQWlJOemlzKy9xdGlRS1dMWGkraElhNTkvRmFyZUFnbWwxYnFzdUxIdjN1VWFkClp1ZkRkUUtCZ0Zsb1ZJWlpNcGFIZGI2TUw3UmhPbGZQcXNldHl3TmFOMG0yVFAyY0tpMXVsTnZCNC9zd1I5WkQKYUN4TXd0c1BFK21Qa0ZpVXlQcUd1U1AvZSs3dzBIejFjdlJkT251TUNDVUE0alg5RFRjN2JOTFZKVVYwUHFsZgpoYlFPaDJzdFE5b0FJMStBOXpTZEhSWUUvMXpPWW9XaDlUN0N0T3YxRHhMMEFqa1Iwc2w1Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==";
+    }
+
+    /**
+     * Model tests for AccepterNet
+     *
+     * @throws ConfigurationException
+     */
+    @Test
+    public void testRegion() throws ConfigurationException {
+        Profile profile = new Profile();
+        profile.setRegion("us-east-2");
+
+        ApiClient client = this.configuration.getApiClient(profile);
+
+        assertEquals(1, client.getServers().size());
+        assertEquals("https://api.{region}.outscale.com/api/v1", client.getServers().get(0).URL);
+    }
+
+    @Test
+    public void testCertificateFileOk() throws ConfigurationException {
+        Profile profile = new Profile();
+        profile.setRegion("us-east-2");
+        profile.setX509ClientCert(this.getValidCertificateFile());
+        profile.setX509ClientKey(this.getValidKeyFile());
+
+        ApiClient client = this.configuration.getApiClient(profile);
+        assertNotEquals(null, client);
+    }
+
+    @Test
+    public void testCertificateFileKo() throws ConfigurationException {
+        Profile profile = new Profile();
+        profile.setRegion("us-east-2");
+
+        // Invalid Certificate
+        profile.setX509ClientCert(this.getInvalidCertificateFile());
+        profile.setX509ClientKey(this.getValidKeyFile());
+
+        assertThrows(
+                ConfigurationException.class,
+                () -> {
+                    this.configuration.getApiClient(profile);
+                });
+
+        // Invalid Private Key
+        profile.setX509ClientCert(this.getValidCertificateFile());
+        profile.setX509ClientKey(this.getInvalidKeyFile());
+        assertThrows(
+                ConfigurationException.class,
+                () -> {
+                    this.configuration.getApiClient(profile);
+                });
+
+        // Invalid Path
+        profile.setX509ClientCert("notAPath");
+        profile.setX509ClientKey(this.getValidKeyFile());
+        assertThrows(
+                ConfigurationException.class,
+                () -> {
+                    this.configuration.getApiClient(profile);
+                });
+    }
+
+    @Test
+    public void testCertificateEnvOk() throws ConfigurationException {
+        Profile profile = new Profile();
+        profile.setRegion("us-east-2");
+
+        profile.setX509ClientCertB64(this.getValidCertificateB64());
+        profile.setX509ClientKeyB64(this.getValidKeyB64());
+
+        assertNotEquals(null, this.configuration.getApiClient(profile));
+    }
+
+    @Test
+    public void testCertificateBoth() throws ConfigurationException {
+        Profile profile = new Profile();
+        profile.setRegion("us-east-2");
+
+        // Set Both
+        profile.setX509ClientCert(this.getValidCertificateFile());
+        profile.setX509ClientKey(this.getValidKeyFile());
+        profile.setX509ClientCertB64(this.getValidCertificateB64());
+        profile.setX509ClientKeyB64(this.getValidCertificateB64());
+
+        assertThrows(
+                ConfigurationException.class,
+                () -> {
+                    this.configuration.getApiClient(profile);
+                });
+    }
+
+    @Test
+    public void testCertificateEnvKo() throws ConfigurationException {
+        Profile profile = new Profile();
+        profile.setRegion("us-east-2");
+
+        // Invalid Certificate
+        profile.setX509ClientCertB64("NotValid");
+        profile.setX509ClientKeyB64(this.getValidKeyB64());
+        assertThrows(
+                ConfigurationException.class,
+                () -> {
+                    this.configuration.getApiClient(profile);
+                });
+
+        // Invalid PrivateKey
+        profile.setX509ClientCertB64(this.getValidCertificateB64());
+        profile.setX509ClientKeyB64("NotValid");
+        assertThrows(
+                ConfigurationException.class,
+                () -> {
+                    this.configuration.getApiClient(profile);
+                });
+    }
+}
diff --git a/src/test/resources/io/github/outscale/osc_sdk_java/client/certs/README.md b/src/test/resources/io/github/outscale/osc_sdk_java/client/certs/README.md
new file mode 100644
index 0000000..be767f4
--- /dev/null
+++ b/src/test/resources/io/github/outscale/osc_sdk_java/client/certs/README.md
@@ -0,0 +1,12 @@
+# Certificates
+
+## How to regenerate test certificate
+```
+mkdir -p valid 
+cd valid
+openssl genrsa -des3 -out myCA.key 2048
+openssl req -x509 -new -nodes -key myCA.key -sha256 -days 1825 -out myCA.pem
+openssl genrsa -out sdk.test.key 2048
+openssl req -new -key sdk.test.key -out sdk.test.csr
+openssl x509 -req -in sdk.test.csr -CA myCA.pem -CAkey myCA.key -CAcreateserial -out sdk.test.crt -days 999 -sha256
+```
\ No newline at end of file
diff --git a/src/test/resources/io/github/outscale/osc_sdk_java/client/certs/invalid/sdk.test.crt b/src/test/resources/io/github/outscale/osc_sdk_java/client/certs/invalid/sdk.test.crt
new file mode 100644
index 0000000..4b301a4
--- /dev/null
+++ b/src/test/resources/io/github/outscale/osc_sdk_java/client/certs/invalid/sdk.test.crt
@@ -0,0 +1,3 @@
+-----BEGIN CERTIFICATE-----
+SU5WQUxJRENFUlQ=
+-----END CERTIFICATE-----
diff --git a/src/test/resources/io/github/outscale/osc_sdk_java/client/certs/invalid/sdk.test.key b/src/test/resources/io/github/outscale/osc_sdk_java/client/certs/invalid/sdk.test.key
new file mode 100644
index 0000000..8e2cd39
--- /dev/null
+++ b/src/test/resources/io/github/outscale/osc_sdk_java/client/certs/invalid/sdk.test.key
@@ -0,0 +1,3 @@
+-----BEGIN RSA PRIVATE KEY-----
+SU5WQUxJREtFWQ==
+-----END RSA PRIVATE KEY-----
diff --git a/src/test/resources/io/github/outscale/osc_sdk_java/client/certs/valid/sdk.test.crt b/src/test/resources/io/github/outscale/osc_sdk_java/client/certs/valid/sdk.test.crt
new file mode 100644
index 0000000..db722ca
--- /dev/null
+++ b/src/test/resources/io/github/outscale/osc_sdk_java/client/certs/valid/sdk.test.crt
@@ -0,0 +1,20 @@
+-----BEGIN CERTIFICATE-----
+MIIDOTCCAiECFBBQPRih7Zp4Hmq6KxkZ8WTl+TrIMA0GCSqGSIb3DQEBCwUAMG0x
+CzAJBgNVBAYTAlRTMQ0wCwYDVQQIDARUZXN0MQ0wCwYDVQQHDARUZXN0MQ0wCwYD
+VQQKDARUZXN0MQ0wCwYDVQQLDARUZXN0MQ0wCwYDVQQDDARURVNUMRMwEQYJKoZI
+hvcNAQkBFgRURVNUMB4XDTIyMTIxNTEyMzYxMVoXDTI1MDkwOTEyMzYxMVowRTEL
+MAkGA1UEBhMCVFMxEzARBgNVBAgMClNvbWUtU3RhdGUxITAfBgNVBAoMGEludGVy
+bmV0IFdpZGdpdHMgUHR5IEx0ZDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC
+ggEBAKEWaRR5Im2Gg0vcqR5kDf4qrCsxjbdnk/nNCT33WnoVdURuFAYUWYcU5St+
+LX7FGE+EZ9J5o9X/0TpaQm31fwHEGbybAAd3G25cb06wxphG/uzadtYTGuDSv47r
+O/6nU0ghoa2WJEuKH2l5rqA6GjGx9ajsTTy8SnOsWc+8WPDhAhxbF1AKHa0zkLOd
+m3ZZgE96IjDv4usIPyIaGcuome60LRpz8jz6PiakdnaVgmMYZJ0tgrwPY9/Fgzpa
+TZ7AhDq7+IBPgPyqqYbvnPv5m0oVZy4mBFFn57k6ucqFiIBot6l7sCi4R5pFWW63
+Q0QfhK8QFdEssyJzz7Itjja2n/8CAwEAATANBgkqhkiG9w0BAQsFAAOCAQEAUvc0
+UHKpyWv9RWtPfeoyna7S8sI2/p3e15xxWVJIo39VAJc2E5/O6RaTGKczG91r3B0K
+ihpVJDZYG3EvTkNYcwRxjonTF0daNfO6+JwH8gLpTkAOF7v0wH3xdQUbs9m2cdVv
+agwSOC5YweLWbhl6VomFZtoxtxM1rTVRACqSV70p6sP+qIPSNRLNfehVKtVnObbT
+jEFwQe/UojBgaS1s46/e+GLNGfAk42cYnurQOPLUJOZobegqzhtId7+PRwAlerOo
+88coDWcrOFyvFGTQ2h1pwvJ76AM5xy4qEn+Q75BgEnibRxpsYJCyE5Da+znKZyFQ
+2xwVE/ZSiNroANz55w==
+-----END CERTIFICATE-----
diff --git a/src/test/resources/io/github/outscale/osc_sdk_java/client/certs/valid/sdk.test.key b/src/test/resources/io/github/outscale/osc_sdk_java/client/certs/valid/sdk.test.key
new file mode 100644
index 0000000..957889f
--- /dev/null
+++ b/src/test/resources/io/github/outscale/osc_sdk_java/client/certs/valid/sdk.test.key
@@ -0,0 +1,27 @@
+-----BEGIN RSA PRIVATE KEY-----
+MIIEowIBAAKCAQEAoRZpFHkibYaDS9ypHmQN/iqsKzGNt2eT+c0JPfdaehV1RG4U
+BhRZhxTlK34tfsUYT4Rn0nmj1f/ROlpCbfV/AcQZvJsAB3cbblxvTrDGmEb+7Np2
+1hMa4NK/jus7/qdTSCGhrZYkS4ofaXmuoDoaMbH1qOxNPLxKc6xZz7xY8OECHFsX
+UAodrTOQs52bdlmAT3oiMO/i6wg/IhoZy6iZ7rQtGnPyPPo+JqR2dpWCYxhknS2C
+vA9j38WDOlpNnsCEOrv4gE+A/Kqphu+c+/mbShVnLiYEUWfnuTq5yoWIgGi3qXuw
+KLhHmkVZbrdDRB+ErxAV0SyzInPPsi2ONraf/wIDAQABAoIBAHFMH9AEetBpwULE
+CjaTzLutK7adfb03Hn6dVRi+NmaTXQ0qFu9HtMgrTBvQ/RKicTzMNXF1mGPVL0VJ
+YluQRSnq0Oc0ZUra3PI8FRVVg/hqRrYz2U0r1sW1tIFCtcmfyhV7ggljBlgS55D5
+wnZzJyU4sz2CJbjH/d1ppSlUoYGYwoQu/O7XjbfmQrMV6/j7ttbmCLfjZV6wPNwo
+DMfBRyK+67XXcq5xsgkxOjjxSlU2ff6zHuN8WSxORiV4l48B2uNpWN5Ud2H9/pSF
+8/fVd6AmhXzK9B/odAIJHXOuObCBTldRWxyTEKmmtM5kdNFtNu2DA7TR4V4UbsMc
+eo76ALECgYEAzWstN6TgsE2Iuueno7j4fixWt3x0U5JCrf84qDYS45qUfo0sSx1u
+wWAw3OEN0f4xdMBDoltxQNz0fCZdGXU8lbAJslCqZmDVTBqu2NgZNxAlsLc7M4v4
+GIok/hNX8qu/GUlJjFsAK2q56LXNnsvvNVKqd0tdO8PwZcJSnfgYgWMCgYEAyMDE
+HzHXJi0YCwdUBazJJPTkWWZLbyrMi4v/y8IMe3f0/gYDueKBegbTMkUlY7yjNNXa
+neIVJwobM92rC5OkVWojZ6fP51U2w/dzwlHVFjrbhVmUStF5bdgYDsCnnk1GpN7N
+s4m//V5vF0EnNLcXdcR3NQW34i5wrnaNRmYz17UCgYAgxFXkKGLG/LcwyT8OeLT6
+u2vhvPJ5Wj1Ur/+DpYyBzeid/zrviHRgWE2zDhs8QgX1j626OkfohtZg72WuZ+sQ
+HZKOZRupVQzxJNh7Mo1jISpB9Bh3cn5Su8aG2OMQjKDhEbWvs9xlEJMzMbzo9bLk
+mJkkilsG64xvTv4KwMZ37QKBgQCdYMkfL2JcMkPD+ZW78S2qxDTzhMckOigqSbFZ
+WiGQ9YRhU/O92LzqHcmZgi2Cl9JWTERbO26bsUeMDH3X0IGm2FMzIpJQ5zPMwwPD
+1YU4LSIE0yn20WrhWuPZRNzis+/qtiQKWLXi+hIa59/FareAgml1bqsuLHv3uUad
+ZufDdQKBgFloVIZZMpaHdb6ML7RhOlfPqsetywNaN0m2TP2cKi1ulNvB4/swR9ZD
+aCxMwtsPE+mPkFiUyPqGuSP/e+7w0Hz1cvRdOnuMCCUA4jX9DTc7bNLVJUV0Pqlf
+hbQOh2stQ9oAI1+A9zSdHRYE/1zOYoWh9T7CtOv1DxL0AjkR0sl5
+-----END RSA PRIVATE KEY-----
-- 
2.30.2

